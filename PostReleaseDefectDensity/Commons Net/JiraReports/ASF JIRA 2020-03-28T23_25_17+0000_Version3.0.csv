Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Duplicate),Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Review Date),Custom field (Reviewer),Custom field (Severity),Custom field (Severity),Custom field (Skill Level),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Tags),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Problem connecting to TLS/SSL SMTP server using explicit mode,NET-421,12520568,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Critical,Fixed,,oliver.saggau,oliver.saggau,29/Aug/11 13:38,29/Feb/12 20:35,28/Mar/20 23:25,30/Aug/11 14:52,3.0,3.0.1,,3.1,SMTP,,0,"Just tried to send an email through gmail servers by doing the following:
{code}AuthenticatingSMTPClient client = new AuthenticatingSMTPClient();
client.connect(""smtp.gmail.com"", 587); // reply: 220 220 mx.google.com ESMTP
client.login(); // reply: 250 250 mx.google.com at your service
client.execTLS(); // reply: 220 2.0.0 Ready to start TLS
client.auth(AUTH_METHOD.PLAIN, username, password); // exception
...{code}

Unfortunality after execTLS() I get a MalformedServerReplyException. I looked at the SMTPSClient source code and found out that the reader/writer are wrong after execTLS() got called. The performSSLNegotiation() method sets _input_ and _output_ to the new input/output streams from SSLSocket, but the reader/writer are still pointing to the values set inside _connectAction_().

Possible fix for this issue:
{code}public boolean execTLS() throws SSLException, IOException
{
	if (!SMTPReply.isPositiveCompletion(sendCommand(""STARTTLS"")))
	{
		return false;
		//throw new SSLException(getReplyString());
	}
	performSSLNegotiation();
	_reader = new CRLFLineReader(new InputStreamReader(_input_, encoding));
    	_writer = new BufferedWriter(new OutputStreamWriter(_output_, encoding));
	return true;
}{code}",,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,63115,,,2011-08-29 13:38:39.0,,,,,,,"0|i0j0ov:",109040,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Apache Commons TFTP implementation subject to Sorcerer's Apprentice Syndrome,NET-412,12508611,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Critical,Fixed,,chuckwolber,chuckwolber,28/May/11 03:42,29/Feb/12 20:35,28/Mar/20 23:25,10/Jan/12 19:27,2.2,3.0,,3.1,TFTP,,0,"This is regarding the org.apache.commons.net.tftp.TFTPClient class.

In the sendFile() method, when a duplicate TFTP ACK is received, the ""if (lastBlock == block)"" section of code fails and control moves to the ""else"" statement. The else block checks to see if the ACK is for the previous DATA packet, and if so, sends control back to the _sendPacket label where the DATA packet is resent.

This is in direct violation of Sorcerer's Apprentice Syndrome as defined in RFC 1123 section 4.2.3.1:

""the sender (i.e., the side originating the DATA packets) must never resend the current DATA packet on receipt of a duplicate ACK""

The proper else block would look something like this:

{noformat}
{
    continue _receivePacket;
}
{noformat}

This enables the client to ignore the duplicated ACK and listen for ACK+1. If ACK+1 never comes in, the listener should timeout and attempt to resend the current data packet. As described in NET-410, the TFTP client also does not properly handle re-transmits either. It is recommended that this issue and NET-410 be implemented in tandem.



",Java 6 patch 20,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,154631,,,2011-05-28 03:42:10.0,,,,,,,"0|i0j0pj:",109043,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
problem connecting to ProFTPD with FTPES,NET-408,12507562,Bug,Open,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,,,mivola,mivola,18/May/11 05:28,13/Sep/19 10:19,28/Mar/20 23:25,,2.2,3.0,,,FTP,,9,"I have a problem with the FTPClient connecting to a ProFTPD server.

If the server uses the configuration option ""TLSProtocol TLSv1"", I
cannot connect to it at all. I recieve the following error message:
- javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection

On the server side I see in the log:
unable to accept TLS connection: protocol error:
-  (1) error:14094416:SSL routines:SSL3_READ_BYTES:sslv3 alert
certificate unknown
- TLS/TLS-C negotiation failed on control channel

If the server uses the configuration option ""TLSProtocol SSLv23"", I
can connect to it but I cant transfer any files. In the server log I
see:
- starting TLS negotiation on data connection
- TLSv1/SSLv3 renegotiation accepted, using cipher RC4-MD5 (128 bits)
- client did not reuse SSL session, rejecting data connection (see
TLSOption NoSessionReuseRequired)
- unable to open data connection: TLS negotiation failed

If I add the NoSessionReuseRequired parameter to the ProFTPD config
everything works fine.

Here is my code:
               FTPClient ftpClient = new FTPClient();
               ftpClient = new FTPSClient(""TLS"");

               // this throws an exception with TLSProtocol TLSv1
               ftpClient.connect(host, port);

               int reply = ftpClient.getReplyCode();
               if (!FTPReply.isPositiveCompletion(reply)) {
                       ftpClient.disconnect();
                       log.error(""The FTP Server did not return a positive completion reply!"");
                       throw new FtpTransferException(ECCUtils.ERROR_FTP_CONNECTION);
               }

               boolean loginSuccessful = ftpClient.login(userName, password);
               if (!loginSuccessful) {
                       log.error(""Login to the FTP Server failed! The credentials are not valid."");
                       throw new FtpTransferException(ECCUtils.ERROR_FTP_LOGIN);
               }

               ftpClient.execPBSZ(0);
               ftpClient.execPROT(""P"");

               boolean success = ftpClient.storeFile(fileName, fis);
               if (!success) {
                       // this is false if ""NoSessionReuseRequired"" is not set
               }


Now my question is if it is generally possible to connect to a server
with ""TLSProtocol TLSv1"" or ""TLSProtocol SSLv23"" without the
""NoSessionReuseRequired"" parameter? Could someone provide a piece of
example code for this?","ProFTPD 1.3.3d on SUSE Linux Enterprise Server 10.1 32bit, Kernel 2.6.16.46-0.12-default (config file attached)
ProFTPD 1.3.3d on OpenSUSE 64bit Linux 2.6.34.8-0.2-desktop
Java 1.5",,,,,,,,,,"25/Jul/11 09:28;bogdro;BCFTPSClient.java;https://issues.apache.org/jira/secure/attachment/12487679/BCFTPSClient.java","09/Jun/17 17:57;elichtas;FTPSClientWithTLSResumption.zip;https://issues.apache.org/jira/secure/attachment/12872299/FTPSClientWithTLSResumption.zip","25/Jul/11 09:36;bogdro;PTFTPSClient.java;https://issues.apache.org/jira/secure/attachment/12487681/PTFTPSClient.java","18/May/11 10:41;mivola;ftpes.jpg;https://issues.apache.org/jira/secure/attachment/12479564/ftpes.jpg","18/May/11 05:32;mivola;proftpd.conf;https://issues.apache.org/jira/secure/attachment/12479549/proftpd.conf",,5.0,,,,,,,,,,,,,,,,,,,,2011-05-18 09:38:08.022,,,false,,,,,,,,,,,,,,,,,66958,,,Fri Sep 13 10:19:15 UTC 2019,,,,,,,"0|i1a45z:",267141,,,,,,,,,,,,,,,,"18/May/11 05:31;mivola;attached ProFTPD config file","18/May/11 09:38;sebb;Are you able to connect to the server with other FTP clients? If so which, and what settings do you use?

It would help if you could attach a sample of the code you are using.","18/May/11 10:41;mivola;Yes, I can connect to the FTP Server with FileZilla. I attached a screenshot of the settings. 
The posted the code I'm using in the issue description.","18/May/11 16:32;bogdro;Try adding the ""TLSv1"" protocol to the FTPSClient (if it's not there yet) with the getEnabledProtocols() and setEnabledProtocols() methods. Also, the server displays ""certificate unknown"". Perhaps a client certificate was required by the server and none was provided to the FTPSCilent class.

About session reusing: it doesn't look like it's implemented in FTPSClient (all connections are created ""fresh""), so right now you have to disable requiring session reuse in your server.

Try implicit SSL mode and see if you get the same error when connecting.

I won't be much of a help, because my ProFTPd is not SSL-enabled and rejects ""AUTH TLS"".","19/May/11 06:05;mivola;- adding the ""TLSv1"" protocol helps to connect to the ProFTPD. Thanks for this hint!
- but: it still does only wirk with ""NoSessionReuseRequired"" set to true
- since it is a customer requirement not to use the ""NoSessionReuseRequired"" flag, we'll have to find another solution","20/May/11 12:09;dkocher@sudo.ch;Does anyone here have an expertise how the caching per hostname and port in the SSL context could be altered to provide interoperability with the requirement to use the same SSL session for the data channel?","20/May/11 16:55;bogdro;Some say it's impossible (http://forums.oracle.com/forums/thread.jspa?messageID=9279689), but the Java SSE Reference guide says (JSSERefGuide.html#SSLSession) the SSLContext, SSLSession and SSLEngine can be used to re-use the session, with the help of SSLContext.getClientSessionContext(), or by just simply using the same SSLContext for the subsequent sockets. On some message board I've also read that altering the default behaviour (or adding this functionality) would eventually lead to re-implementing many, many classes.

Apache's FTPSClient seems to use the same SSLContext for the control and data connections, so this should work. But it may be the problem that the control channel connects to the host by name and the data channel connects using the IP address (because this is what the PASV command gives), so the addresses may not match and the session is not reused.

Michael, could you try connecting to the host by its IP address and checking if that works (that is, NoSessionReuseRequired is not required any more)? Could you also please check if data transfer works in ACTIVE mode?","22/May/11 01:31;sebb;The default ProFtpd package that is available for Ubuntu (and possibly other distros) does not include AUTH support, but I was able to build ProFtpd on Ubuntu with mod_tls support. I needed to install the libssl-dev package.

Then ran ./configure --with-modules=mod_tls ; make ; make install

This works with FileZilla, but requires NoSessionReuseRequired with the Net code, even if connecting by IP address.","23/May/11 05:26;mivola;I also build the ProFTPD with --with-modules=mod_tls and can connect with FileZilla but not with NET FTPSClient (even not with IP address).","25/Jun/11 17:32;bogdro;I finally got some time to look at this. I confirm the problem exists when connecting by IP in both active and passive mode to ProFTPd 1.3.3e. I confirm the sessions are different for the control and data connections (as per .toString()) despite using one SSLContext everywhere. Disabling session creating in server sockets or disabling client mode in them doesn't help.

I looked more closely at the JSSE Reference and yes, you can reuse sessions, but the only way you can do it is by passing the same host and port to the SSLEngine creation methods. These don't need to be the actual host and port you're connecting to (luckily) - they're just a marker or connection identifier. The first bad news is that these are just a ""hint"", so the implementation might just as well ignore these and always create new SSL sessions. The second bad news is that you can't use an SSLEngine anywhere. You can't create contexts or sockets with it. The only thing you can do is creating your own subset of TLS implementation for your needs, just like in the example in the JSSE Reference Guide - you check message types, wrap and unwrap them etc. Just creating an SSLEngine from an SSLContext doesn't work, you have to use it.

Now better news that I've found: the PureTLS library (http://www.rtfm.com/puretls/) seems to do it in an easier way - you specify the host and port in the constructors and they're used to find sessions, so re-using sessions looks possible. The drawback is that the whole FTPSClient would have to be re-written to use this library and a new project dependency would have to be introduced, not to mention that PureTLS may not be as secure as the ""original"" SSL code in the JRE. There also is ftp4j, but it doesn't semm to do more that the Commons-Net FTP Client in terms of SSL.

The whole SSL stuff is so wrapped in Java that you can't access the details and you don't have full control over what's being done unless you write your own implementation.","27/Jun/11 05:43;dkocher@sudo.ch;There is also [TlsProtocolHandler|http://www.bouncycastle.org/docs/docs1.6/index.html?org/bouncycastle/crypto/tls/TlsProtocolHandler.html] from the BouncyCastle project but that wouldn't be a drop-in replacement.","27/Jun/11 05:51;mivola;Thanks for the investigation. So I guess there will be no (short-time)fix for this problem?

I also tried ftp4j in my scenario but there is the same problem. I guess it uses the same SSL stuff as FTPClient does.","29/Jun/11 17:59;bogdro;Short-time fix - probably not. As you can see, it's just not that easy. But if you find an open-source FTP program in Java that works with your ProFTPd, it might help us create something similar in Commons-Net, so let us know as soon as you find something.

@David: Yes, TlsProtocolHandler connects TlsClients which have something to do with session IDs, so this also might be an option. But, as you say, it's not a drop-in. This would also require a partial or complete re-write of the FTPSClient. It might be easier to use than PureTLS. Not to mention that it is more maintained and up-to-date (PureTLS's ChangLog ends on the year 2002). Unfortunately, still a new dependency for Commons-Net.","25/Jul/11 09:28;bogdro;The attached BCFTPSClient is the bouncycastle-based FTPSClient. Unfortunately, it doesn't work for me (still ""session not reused"" error). Apparently, the notifySessionID doesn't make the TlsClient use this session ID (or I'm doing something wrong).

The code is a mess - some lines just commented-out, many now-useless methods not removed, active-only mode supported. I didn't clean it up, because it doesn't work anyway (for me). If you like it, you can use it. If it works for you, let us know. Compile against ""bcprov-jdk16-XXX.jar"".","25/Jul/11 09:36;bogdro;The attached PTFTPSClient is the PureTLS-based FTPSClient. It uses the host/port pair (whatever provided, just use unique for each control connection and the control connection's host/port for data connections) to identify connections.

It doesn't work for me (I get ""Not a PrintableString or IA5String"" exceptions), but it may be my server's certificate's fault, so you may try it.

This code also is a mess - the host/port pairs (that identify sessions) are hardcoded, some now-useless methods are not removed. It's more like some base test code, to be rebuilt if works. If you like it, use it. If it works for you, let us know.","26/Jul/11 08:00;dkocher@sudo.ch;The problem is that DefaultTlsClient#notifySessionID(byte[]) is a no op.","26/Jul/11 08:07;dkocher@sudo.ch;I have filed http://www.bouncycastle.org/jira/browse/BJB-7","25/Nov/11 12:53;cbustamante;Hi, recently i try to use the claymoresystems, with the Crytix library, *jdk 1.7, but it shows me an the class Socket is duplicated, and i have reviewed this same bug with   proftpd-1.3.3c-1.el5.rf with centos 5.7,

SOLUTION
 use vsftpd with this configuration

ssl_enable=YES
allow_anon_ssl=NO
force_local_data_ssl=NO
force_local_logins_ssl=YES
ssl_tlsv1=YES
ssl_sslv2=NO
ssl_sslv3=NO
rsa_cert_file=/etc/vsftpd/vsftpd.pem
xferlog_enable=YES
log_ftp_protocol=YES
setproctitle_enable=YES

this works great, without modify the apache commons library.

The problem originated basically was the ciphed method used by proftdp not supported



","18/Feb/13 13:51;joehni;Cache-injection-hack in NET-426 solves this issue in a platform dependent (and therefore unsuitable) way.","02/May/13 09:50;burnyguru;@[~cbustamante]: I guess this is working for you, because you are setting _'force_local_data_ssl=NO'_, which allows data to be sent in plain. 
This is not an option for me, and the error still exists for me. (tested with jdk 1.6 and 1.7, commons-net-3.1.jar and 3.2, vsftp 2.2.x)
Error message: _""Error: 522 SSL connection failed; session reuse required: see require_ssl_reuse option in vsftpd.conf man page""_

However, _cyberduck_ had the same issue and were obviously able to solve it. Their code is available, so maybe you can get a hint there.
See: http://trac.cyberduck.ch/ticket/5087","09/Jun/17 17:57;elichtas;Hi everyone, 

I have adjusted the implementation of the FTPSClient to support TLS resumption in a way that is friendly across all JVMs and security providers.  I've essentially implemented some custom SSL sockets and socket factories that use the SSLEngine and SocketChannels directly for handling SSL encryption and decryption. These SocketChannels and the encryption/decryption is encapsulated in Input and Output streams so the changes to existing Commons NET code is minimal. There's only a couple updates to the SocketClient and FTPSClient classes in order to swap out the socket factories. I've also added a flag on the FTPSClient to control whether or not to resume TLS sessions for data connections.

I have a separate fork of version 3.3 that I've developed this on, but I've applied the changes to the 3.6 version and ran a couple tests. See the changes attached (FTPSClientWithTLSResumption.zip).

I've tested this against the Apache Mina FTP server project in addition to the FileZilla server. TLS resumption is working as expected with FileZilla. I've tested the changes for Explicit and Implicit SSL, Active and Passive data connections, as well as clear command channel which is working as expected.

I'm hoping that the development team will adopt these changes so that they can be utilized and tested by the entire community.  If you have any questions, please let me know.","20/Jun/17 11:04;jtoivonoja;Erick Lichtas, I have tried your fix but I'm facing this:
450 TLS session of data connection has not resumed or the session does not match the control connection

Any ideas why is this happening?

Pretty sure that the server is FileZilla, but unfortunately I have no control over it.


SSL-debug:

{code:java}
***
pool-20-thread-1, WRITE: TLSv1.2 Handshake, length = 80
DefaultQuartzScheduler_Worker-10, called closeInbound()
DefaultQuartzScheduler_Worker-10, fatal error: 80: Inbound closed before receiving peer's close_notify: possible truncation attack?
javax.net.ssl.SSLException: Inbound closed before receiving peer's close_notify: possible truncation attack?
%% Invalidated:  [Session-7, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256]
DefaultQuartzScheduler_Worker-10, SEND TLSv1.2 ALERT:  fatal, description = internal_error
DefaultQuartzScheduler_Worker-10, WRITE: TLSv1.2 Alert, length = 64
This engine was forced to close inbound, without having received the proper SSL/TLS close notification message from the peer, due to end of stream.
DefaultQuartzScheduler_Worker-10, called closeOutbound()
DefaultQuartzScheduler_Worker-10, closeOutboundInternal()
DefaultQuartzScheduler_Worker-10, called closeOutbound()
DefaultQuartzScheduler_Worker-10, closeOutboundInternal()
DefaultQuartzScheduler_Worker-10, WRITE: TLSv1.2 Application Data, length = 6
DefaultQuartzScheduler_Worker-10, called closeOutbound()
DefaultQuartzScheduler_Worker-10, closeOutboundInternal()
DefaultQuartzScheduler_Worker-10, SEND TLSv1.2 ALERT:  warning, description = close_notify
DefaultQuartzScheduler_Worker-10, WRITE: TLSv1.2 Alert, length = 64
DefaultQuartzScheduler_Worker-10, called closeInbound()
DefaultQuartzScheduler_Worker-10, fatal error: 80: Inbound closed before receiving peer's close_notify: possible truncation attack?
javax.net.ssl.SSLException: Inbound closed before receiving peer's close_notify: possible truncation attack?
%% Invalidated:  [Session-6, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256]
DefaultQuartzScheduler_Worker-10, SEND TLSv1.2 ALERT:  fatal, description = internal_error
DefaultQuartzScheduler_Worker-10, Exception sending alert: java.io.IOException: writer side was already closed.
This engine was forced to close inbound, without having received the proper SSL/TLS close notification message from the peer, due to end of stream.
{code}
","13/Sep/19 06:45;mperktold;Is there any progress on this?

I am currently using a workaround suggested on Stackoverflow, which is a copy of cyberduck's code:
 [https://stackoverflow.com/a/32404418]

Additionally, on JDK 8u161 or higher, the following System property is required:
{code:java}
System.setProperty(""jdk.tls.useExtendedMasterSecret"", ""false"");
{code}
Also, when running on JDK 11, I get the following console output:
{code:java}
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by FTPSClientWithSessionResumption to field sun.security.ssl.SSLSessionContextImpl.sessionHostPortCache
WARNING: Please consider reporting this to the maintainers of FTPSClientWithSessionResumption
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
{code}

Which makes it pretty clear that this cannot be a long term solution.","13/Sep/19 10:19;pd40;[~mperktold] the long term solution might be [https://bugs.openjdk.java.net/browse/JDK-8170813] which references this issue."
NPE in nntp.Threader.thread() when all messages  in a derived thread are missing.,NET-532,12706443,Bug,Resolved,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Cannot Reproduce,,clonezone,clonezone,03/Apr/14 15:26,01/Dec/14 00:40,28/Mar/20 23:25,01/Dec/14 00:40,3.0,3.3,,,NNTP,,0,"I'm threading emails using the References: header. When I've got an incomplete set of messages (in this specific case, it's from one of the C++ standards committee lists) such that I'm missing an entire thread, I get exceptions like this:

{noformat}
Exception in thread ""main"" java.lang.NullPointerException
     at org.apache.commons.net.nntp.Threader.gatherSubjects(Threader.java:342)
     at org.apache.commons.net.nntp.Threader.thread(Threader.java:81)
     at org.apache.commons.net.nntp.Threader.thread(Threader.java:47)
{noformat}

What happens is that the graph returned by findRootSet() at line 71 will look something like

{noformat}
     ...
     <ThreadContainer A with Threadable>
         ...
     <ThreadContainer B without Threadable>
         <ThreadContainer ... without Threadable>
             <ThreadContainer ... without Threadable>
             <ThreadContainer ... without Threadable>
         <ThreadContainer ... without Threadable>
             <ThreadContainer ... without Threadable>
                 <ThreadContainer ... without Threadable>
     <ThreadContainer C with Threadable>
         ...
     ...
{noformat}

And, after pruneEmptyContainers() has had its way with things on line 75, the graph will be

{noformat}
     ...
     <ThreadContainer A with Threadable>
         ...
     <ThreadContainer B without Threadable>
     <ThreadContainer C with Threadable>
         ...
     ...
{noformat}

when it should be

{noformat}
     ...
     <ThreadContainer A with Threadable>
         ...
     <ThreadContainer C with Threadable>
         ...
     ...
{noformat}

I.e., ThreadContainer B should be eliminated entirely.

As it is, with ThreadContainer B present, but not containing any children or a Threadable, gatherSubjects() chokes.",,,,,,,,,,,"03/Apr/14 18:23;clonezone;messages-referencing-CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com.tar.gz;https://issues.apache.org/jira/secure/attachment/12638534/messages-referencing-CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA%40mail.gmail.com.tar.gz","03/Apr/14 18:23;clonezone;threader-3.3-debug.patch;https://issues.apache.org/jira/secure/attachment/12638533/threader-3.3-debug.patch","03/Apr/14 15:30;clonezone;threader.patch;https://issues.apache.org/jira/secure/attachment/12638495/threader.patch",,,,3.0,,,,,,,,,,,,,,,,,,,,2014-04-03 15:49:51.74,,,false,,,,,,,,,,,,,,,,,384766,,,Mon Dec 01 00:40:54 UTC 2014,,,,,,,"0|i1uaav:",385033,,,,,,,,,,,,,,,,"03/Apr/14 15:30;clonezone;Patch against current trunk that fixes my issue.

Rather than only pruning a completely empty node, it prunes nodes that have no Threadable on the node or any of its children.","03/Apr/14 15:49;sebb;Thanks for the patch.

Can you provide details of the news group and some threads that exhibit the problem please?","03/Apr/14 16:15;clonezone;Specifically, it’s the list c++std-ext.accu.org. For one specific thread, I've got the following 18 messages:

Date: Fri, 18 Oct 2013 11:14:21 -0500
From: Gabriel Dos Reis <gdr@axiomatics.org>
Message-ID: <878uxqr1ya.fsf_-_@euclid.axiomatics.org>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
Subject: [c++std-ext-14555] Sized integer types and char bits

Date: Fri, 18 Oct 2013 19:26:25 +0300
From: Ville Voutilainen <ville.voutilainen@gmail.com>
Message-ID:
<CAFk2RUaiDj-Fu_QVktwZBp-S-Kkr2DfBsJ+dLQNdTp6qZ7SKHQ@mail.gmail.com>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
Subject: [c++std-ext-14556] Re: [ub] Sized integer types and char bits

Date: Fri, 18 Oct 2013 19:05:41 +0000
From: ""Stephan T. Lavavej"" <stl@exchange.microsoft.com>
Message-ID:
<b189ea5c75d242a5b795bb524b2ea810@SN2PR03MB093.namprd03.prod.outlook.com>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
Subject: [c++std-ext-14557] Re: Sized integer types and char bits

Date: Fri, 18 Oct 2013 12:54:38 -0700
From: Matt Austern <austern@google.com>
Message-ID:
<CAGuJnYd7bULjKn1TCpX0_hWsQ2PhuNEw8zypunS0Ty8wztSO_g@mail.gmail.com>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
Subject: [c++std-ext-14558] Re: [ub] Sized integer types and char bits

Date: Fri, 18 Oct 2013 20:22:30 +0000
From: Gabriel Dos Reis <gdr@microsoft.com>
Message-ID:
<394d2a6c4d524ea49607aabbe8fc2f37@DM2PR03MB304.namprd03.prod.outlook.com>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
Subject: [c++std-ext-14559] Re: [ub] Sized integer types and char bits

Date: Fri, 18 Oct 2013 16:32:21 -0400
From: John Spicer <jhs@edg.com>
Message-ID: <BD55E214-3752-45E0-AE06-D453C9F18862@edg.com>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
Subject: [c++std-ext-14560] Re: [ub] Sized integer types and char bits

Date: Fri, 18 Oct 2013 20:37:09 +0000
From: Gabriel Dos Reis <gdr@microsoft.com>
Message-ID:
<cad3f73261094d738dc5b98f13eb4618@DM2PR03MB304.namprd03.prod.outlook.com>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
Subject: [c++std-ext-14561] Re: Sized integer types and char bits

Date: Fri, 18 Oct 2013 20:15:57 -0700
From: Lawrence Crowl <Lawrence@Crowl.org>
Message-ID:
<CAA+UVZTx+ZDBdQ2USFn+D=SNQ-OLrGbRG3NxUBisY6SMYF17fg@mail.gmail.com>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
Subject: [c++std-ext-14563] Re: Sized integer types and char bits

Date: Fri, 18 Oct 2013 20:19:31 -0700
From: Lawrence Crowl <Lawrence@Crowl.org>
Message-ID:
<CAA+UVZRVo-Wr9g2dONCOxiVe9XDsqF2T0vAd-Qzy_HgZy7jvbw@mail.gmail.com>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
Subject: [c++std-ext-14564] Re: [ub] Sized integer types and char bits

Date: Sat, 19 Oct 2013 08:37:03 +0200
From: =?UTF-8?B?SW9uIEdhenRhw7FhZ2E=?= <igaztanaga@gmail.com>
Message-ID: <5262288F.2070107@gmail.com>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
 <CAGg_6+Mz-bo2rs-RLnQgXoBKz1Hv17u7WkR924voatb7doHF8w@mail.gmail.com>
 <CA+jCFLvCLODV59vyv_R6-vwHN5HXFs1mm0rRAc-PFJvh4bxhOg@mail.gmail.com>
 <CAGg_6+NRXp_anbvmZnkunEdLcrrNH1xT+ssj7NiNAmyGYGJXAQ@mail.gmail.com>
 <CANh-dXm8PNWHBJ49GV9vu3OdRB1MHC+XJY=JAy8PVyUe9=1c6w@mail.gmail.com>
 <c7ee95de94e94f6db9ad38edef4fa3a8@BY2PR03MB091.namprd03.prod.outlook.com>  <4faee2ff47524ee1b37d0852ed530987@BN1PR03MB107.namprd03.prod.outlook.com>  <87ob6m37qj.fsf@euclid.axiomatics.org>  <37b63d23d2a045dd8ae24fa06f893ebc@BN1PR03MB107.namprd03.prod.outlook.com>  <878uxqr1ya.fsf_-_@euclid.axiomatics.org>  <b189ea5c75d242a5b795bb524b2ea810@SN2PR03MB093.namprd03.prod.outlook.com>  <CAGuJnYd7bULjKn1TCpX0_hWsQ2PhuNEw8zypunS0Ty8wztSO_g@mail.gmail.com>  <394d2a6c4d524ea49607aabbe8fc2f37@DM2PR03MB304.namprd03.prod.outlook.com>  <BD55E214-3752-45E0-AE06-D453C9F18862@edg.com> <CAA+UVZRVo-Wr9g2dONCOxiVe9XDsqF2T0vAd-Qzy_HgZy7jvbw@mail.gmail.com>
Subject: [c++std-ext-14565] Re: [ub] Sized integer types and char bits

Date: Sat, 19 Oct 2013 02:03:47 -0500
From: Gabriel Dos Reis <gdr@axiomatics.org>
Message-ID: <87r4bh7ne4.fsf@euclid.axiomatics.org>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
Subject: [c++std-ext-14566] Re: [ub] Sized integer types and char bits

Date: Sat, 19 Oct 2013 10:02:14 +0200
From: Jean-Marc Bourguet <jm@bourguet.org>
Message-ID: <52623C86.5070004@bourguet.org>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
<CAGg_6+Mz-bo2rs-RLnQgXoBKz1Hv17u7WkR924voatb7doHF8w@mail.gmail.com>
<CA+jCFLvCLODV59vyv_R6-vwHN5HXFs1mm0rRAc-PFJvh4bxhOg@mail.gmail.com>
<CAGg_6+NRXp_anbvmZnkunEdLcrrNH1xT+ssj7NiNAmyGYGJXAQ@mail.gmail.com>
<CANh-dXm8PNWHBJ49GV9vu3OdRB1MHC+XJY=JAy8PVyUe9=1c6w@mail.gmail.com>
<c7ee95de94e94f6db9ad38edef4fa3a8@BY2PR03MB091.namprd03.prod.outlook.com> <4faee2ff47524ee1b37d0852ed530987@BN1PR03MB107.namprd03.prod.outlook.com>
<87ob6m37qj.fsf@euclid.axiomatics.org>
<37b63d23d2a045dd8ae24fa06f893ebc@BN1PR03MB107.namprd03.prod.outlook.com> <878uxqr1ya.fsf_-_@euclid.axiomatics.org>
<b189ea5c75d242a5b795bb524b2ea810@SN2PR03MB093.namprd03.prod.outlook.com> <CAGuJnYd7bULjKn1TCpX0_hWsQ2PhuNEw8zypunS0Ty8wztSO_g@mail.gmail.com>
<394d2a6c4d524ea49607aabbe8fc2f37@DM2PR03MB304.namprd03.prod.outlook.com> <BD55E214-3752-45E0-AE06-D453C9F18862@edg.com>
<CAA+UVZRVo-Wr9g2dONCOxiVe9XDsqF2T0vAd-Qzy_HgZy7jvbw@mail.gmail.co
Subject: [c++std-ext-14567] Re: [ub] Sized integer types and char bits

Date: Sat, 19 Oct 2013 21:37:31 +0000
From: Herb Sutter <hsutter@microsoft.com>
Message-ID:
<dae22e95c446444a8b3c8d7c54c8bfc8@BN1PR03MB107.namprd03.prod.outlook.com>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
Subject: [c++std-ext-14568] Re: [ub] Sized integer types and char bits

Date: Sat, 19 Oct 2013 23:51:06 -0400
From: Jason Merrill <jason@redhat.com>
Message-ID: <5263532A.7040208@redhat.com>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
 <8fdbbcb040164f1f97a25e609fc549b2@DM2PR03MB304.namprd03.prod.outlook.com>  <CA+jCFLt5o_TmO9tnSMr3b=w3ZCdVayAkBcd3mpU4jq-AEFSjDw@mail.gmail.com>  <CAGg_6+Mz-bo2rs-RLnQgXoBKz1Hv17u7WkR924voatb7doHF8w@mail.gmail.com>  <CA+jCFLvCLODV59vyv_R6-vwHN5HXFs1mm0rRAc-PFJvh4bxhOg@mail.gmail.com>  <CAGg_6+NRXp_anbvmZnkunEdLcrrNH1xT+ssj7NiNAmyGYGJXAQ@mail.gmail.com>  <CANh-dXm8PNWHBJ49GV9vu3OdRB1MHC+XJY=JAy8PVyUe9=1c6w@mail.gmail.com>  <c7ee95de94e94f6db9ad38edef4fa3a8@BY2PR03MB091.namprd03.prod.outlook.com>  <4faee2ff47524ee1b37d0852ed530987@BN1PR03MB107.namprd03.prod.outlook.com>  <87ob6m37qj.fsf@euclid.axiomatics.org>  <37b63d23d2a045dd8ae24fa06f893ebc@BN1PR03MB107.namprd03.prod.outlook.com>  <878uxqr1ya.fsf_-_@euclid.axiomatics.org>  <b189ea5c75d242a5b795bb524b2ea810@SN2PR03MB093.namprd03.prod.outlook.com> <CAA+UVZTx+ZDBdQ2USFn+D=SNQ-OLrGbRG3NxUBisY6SMYF17fg@mail.gmail.com>
Subject: [c++std-ext-14569] Re: [ub] Re: Sized integer types and char bits

Date: Sun, 20 Oct 2013 13:18:10 +0200
From: =?windows-1252?Q?Ion_Gazta=F1aga?= <igaztanaga@gmail.com>
Message-ID: <5263BBF2.7070103@gmail.com>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
 <CAGg_6+NRXp_anbvmZnkunEdLcrrNH1xT+ssj7NiNAmyGYGJXAQ@mail.gmail.com>
 <CANh-dXm8PNWHBJ49GV9vu3OdRB1MHC+XJY=JAy8PVyUe9=1c6w@mail.gmail.com>
 <c7ee95de94e94f6db9ad38edef4fa3a8@BY2PR03MB091.namprd03.prod.outlook.com>  <4faee2ff47524ee1b37d0852ed530987@BN1PR03MB107.namprd03.prod.outlook.com>  <87ob6m37qj.fsf@euclid.axiomatics.org>  <37b63d23d2a045dd8ae24fa06f893ebc@BN1PR03MB107.namprd03.prod.outlook.com>  <878uxqr1ya.fsf_-_@euclid.axiomatics.org>  <b189ea5c75d242a5b795bb524b2ea810@SN2PR03MB093.namprd03.prod.outlook.com>  <CAGuJnYd7bULjKn1TCpX0_hWsQ2PhuNEw8zypunS0Ty8wztSO_g@mail.gmail.com>  <394d2a6c4d524ea49607aabbe8fc2f37@DM2PR03MB304.namprd03.prod.outlook.com>  <BD55E214-3752-45E0-AE06-D453C9F18862@edg.com>  <CAA+UVZRVo-Wr9g2dONCOxiVe9XDsqF2T0vAd-Qzy_HgZy7jvbw@mail.gmail.com>  <5262288F.2070107@gmail.com> <dae22e95c446444a8b3c8d7c54c8bfc8@BN1PR03MB107.namprd03.prod.outlook.com>
Subject: [c++std-ext-14570] Re: [ub] Sized integer types and char bits

Date: Mon, 21 Oct 2013 16:22:38 +0000
From: Herb Sutter <hsutter@microsoft.com>
Message-ID:
<084fdfce6dda46cc99edea348b28b1d9@BN1PR03MB107.namprd03.prod.outlook.com>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
Subject: [c++std-ext-14577] Re: [ub] Sized integer types and char bits

Date: Thu, 24 Oct 2013 15:40:47 -0700
From: Richard Smith <richardsmith@google.com>
Message-ID:
<CAGL0aWeP8Ku=4B66xss4QMLJUXKxE9sMiPG7Pfvm3rorxQG-Fg@mail.gmail.com>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
Subject: [c++std-ext-14587] Re: [ub] Re: Sized integer types and char bits

Date: Thu, 24 Oct 2013 22:50:30 +0000
From: Gabriel Dos Reis <gdr@microsoft.com>
Message-ID:
<4ed19f87c10c46b28c6a8514583d3354@DM2PR03MB304.namprd03.prod.outlook.com>
References:
<CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>
Subject: [c++std-ext-14589] Re: [ub] Re: Sized integer types and char bits","03/Apr/14 17:03;sebb;Thanks!
However I am having problems finding a news server that carries the group. Is there a public on you know of?","03/Apr/14 18:23;clonezone;threader-3.3-debug.patch is a patch against the v3.3 tag that dumps the message graph prior to and after pruning and that will indicate the node that is about to cause an NPE in gatherSubjects(). Note that this uses some Unicode characters, so you can't look at this in an editor that can't handle UTF-8.

messages-referencing-CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com.tar.gz contains the 18 messages (with some slightly sanitized headers).

When I run over this set of messages, I get the following:

{noformat}
Pre-prune: «504820309 - ‹root›: no message, even on child»
Pre-prune: |   «1954527713 - ‹references: CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>	<8fdbbcb040164f1f97a25e609fc549b2@DM2PR03MB304.namprd03.prod.outlook.com>	<CA+jCFLt5o_TmO9tnSMr3b=w3ZCdVayAkBcd3mpU4jq-AEFSjDw@mail.gmail.com>	<CAGg_6+Mz-bo2rs-RLnQgXoBKz1Hv17u7WkR924voatb7doHF8w@mail.gmail.com>	<CA+jCFLvCLODV59vyv_R6-vwHN5HXFs1mm0rRAc-PFJvh4bxhOg@mail.gmail.com>	<CAGg_6+NRXp_anbvmZnkunEdLcrrNH1xT+ssj7NiNAmyGYGJXAQ@mail.gmail.com>	<CANh-dXm8PNWHBJ49GV9vu3OdRB1MHC+XJY=JAy8PVyUe9=1c6w@mail.gmail.com>	<c7ee95de94e94f6db9ad38edef4fa3a8@BY2PR03MB091.namprd03.prod.outlook.com>	<4faee2ff47524ee1b37d0852ed530987@BN1PR03MB107.namprd03.prod.outlook.com>	<87ob6m37qj.fsf@euclid.axiomatics.org>	<37b63d23d2a045dd8ae24fa06f893ebc@BN1PR03MB107.namprd03.prod.outlook.com>	<878uxqr1ya.fsf_-_@euclid.axiomatics.org>	<b189ea5c75d242a5b795bb524b2ea810@SN2PR03MB093.namprd03.prod.outlook.com>	<CAA+UVZTx+ZDBdQ2USFn+D=SNQ-OLrGbRG3NxUBisY6SMYF17fg@mail.gmail.com>	<5263532A.7040208@redhat.com›: no message»
Pre-prune: |   |   [c++std-ext-14587] Re: [ub] Re: Sized integer types and char bits (‹references: CAGL0aWeP8Ku=4B66xss4QMLJUXKxE9sMiPG7Pfvm3rorxQG-Fg@mail.gmail.com›)
Pre-prune: |   |   |   [c++std-ext-14589] Re: [ub] Re: Sized integer types and char bits (4ed19f87c10c46b28c6a8514583d3354@DM2PR03MB304.namprd03.prod.outlook.com)
Pre-prune: |   «1837407879 - ‹references: CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>	<048653ed07b04544bc3f6183592e1b79@DM2PR03MB304.namprd03.prod.outlook.com>	<CAGg_6+O_+DugEN-5UTZbXm8ecz+N=reOrox9w5rsxEYw+YBBEQ@mail.gmail.com>	<389e2109e5094aaf88703287e9d9b52b@DM2PR03MB304.namprd03.prod.outlook.com>	<CAGg_6+O7-Qco_08CNLn=Sgg=hSuqokmknUqnMUxt+YgmqkRSBg@mail.gmail.com>	<87fvs890bq.fsf@euclid.axiomatics.org>	<CAGg_6+M8qRYjmHXxTaHW9QEVaiYr7oRZ2=99uQnd0zTGo9Wapg@mail.gmail.com>	<87fvs81tb9.fsf@euclid.axiomatics.org>	<CAGg_6+NG-vgNn-bSO6d_V9G+_JYLkr6iho0DtVZbN=ivEoqYPw@mail.gmail.com>	<bbb97395cde546348bb7fa90d8ac27ea@DM2PR03MB304.namprd03.prod.outlook.com>	<CAGg_6+OLzJ2DgOpbAieDssv-06CSfWc227t0L8yRPCYzi0KFhA@mail.gmail.com>	<8fdbbcb040164f1f97a25e609fc549b2@DM2PR03MB304.namprd03.prod.outlook.com>	<CA+jCFLt5o_TmO9tnSMr3b=w3ZCdVayAkBcd3mpU4jq-AEFSjDw@mail.gmail.com>	<CAGg_6+Mz-bo2rs-RLnQgXoBKz1Hv17u7WkR924voatb7doHF8w@mail.gmail.com>	<CA+jCFLvCLODV59vyv_R6-vwHN5HXFs1mm0rRAc-PFJvh4bxhOg@mail.gmail.com>	<CAGg_6+NRXp_anbvmZnkunEdLcrrNH1xT+ssj7NiNAmyGYGJXAQ@mail.gmail.com>	<CANh-dXm8PNWHBJ49GV9vu3OdRB1MHC+XJY=JAy8PVyUe9=1c6w@mail.gmail.com>	<c7ee95de94e94f6db9ad38edef4fa3a8@BY2PR03MB091.namprd03.prod.outlook.com>	<4faee2ff47524ee1b37d0852ed530987@BN1PR03MB107.namprd03.prod.outlook.com>	<87ob6m37qj.fsf@euclid.axiomatics.org>	<37b63d23d2a045dd8ae24fa06f893ebc@BN1PR03MB107.namprd03.prod.outlook.com›: no message»
Pre-prune: |   |   [c++std-ext-14555] Sized integer types and char bits (‹references: 878uxqr1ya.fsf_-_@euclid.axiomatics.org›)
Pre-prune: |   |   |   [c++std-ext-14557] Re: Sized integer types and char bits (‹references: b189ea5c75d242a5b795bb524b2ea810@SN2PR03MB093.namprd03.prod.outlook.com›)
Pre-prune: |   |   |   |   [c++std-ext-14561] Re: Sized integer types and char bits (cad3f73261094d738dc5b98f13eb4618@DM2PR03MB304.namprd03.prod.outlook.com)
Pre-prune: |   «499378493 - ‹references: CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>	<8fdbbcb040164f1f97a25e609fc549b2@DM2PR03MB304.namprd03.prod.outlook.com>	<CA+jCFLt5o_TmO9tnSMr3b=w3ZCdVayAkBcd3mpU4jq-AEFSjDw@mail.gmail.com>	<CAGg_6+Mz-bo2rs-RLnQgXoBKz1Hv17u7WkR924voatb7doHF8w@mail.gmail.com>	<CA+jCFLvCLODV59vyv_R6-vwHN5HXFs1mm0rRAc-PFJvh4bxhOg@mail.gmail.com>	<CAGg_6+NRXp_anbvmZnkunEdLcrrNH1xT+ssj7NiNAmyGYGJXAQ@mail.gmail.com>	<CANh-dXm8PNWHBJ49GV9vu3OdRB1MHC+XJY=JAy8PVyUe9=1c6w@mail.gmail.com>	<c7ee95de94e94f6db9ad38edef4fa3a8@BY2PR03MB091.namprd03.prod.outlook.com>	<4faee2ff47524ee1b37d0852ed530987@BN1PR03MB107.namprd03.prod.outlook.com>	<87ob6m37qj.fsf@euclid.axiomatics.org>	<37b63d23d2a045dd8ae24fa06f893ebc@BN1PR03MB107.namprd03.prod.outlook.com>	<878uxqr1ya.fsf_-_@euclid.axiomatics.org>	<b189ea5c75d242a5b795bb524b2ea810@SN2PR03MB093.namprd03.prod.outlook.com›: no message and no child»
Pre-prune: |   «688239375 - ‹references: CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>	<CAGg_6+Mz-bo2rs-RLnQgXoBKz1Hv17u7WkR924voatb7doHF8w@mail.gmail.com>	<CA+jCFLvCLODV59vyv_R6-vwHN5HXFs1mm0rRAc-PFJvh4bxhOg@mail.gmail.com>	<CAGg_6+NRXp_anbvmZnkunEdLcrrNH1xT+ssj7NiNAmyGYGJXAQ@mail.gmail.com>	<CANh-dXm8PNWHBJ49GV9vu3OdRB1MHC+XJY=JAy8PVyUe9=1c6w@mail.gmail.com>	<c7ee95de94e94f6db9ad38edef4fa3a8@BY2PR03MB091.namprd03.prod.outlook.com>	<4faee2ff47524ee1b37d0852ed530987@BN1PR03MB107.namprd03.prod.outlook.com>	<87ob6m37qj.fsf@euclid.axiomatics.org>	<37b63d23d2a045dd8ae24fa06f893ebc@BN1PR03MB107.namprd03.prod.outlook.com>	<878uxqr1ya.fsf_-_@euclid.axiomatics.org>	<b189ea5c75d242a5b795bb524b2ea810@SN2PR03MB093.namprd03.prod.outlook.com>	<CAGuJnYd7bULjKn1TCpX0_hWsQ2PhuNEw8zypunS0Ty8wztSO_g@mail.gmail.com>	<394d2a6c4d524ea49607aabbe8fc2f37@DM2PR03MB304.namprd03.prod.outlook.com>	<BD55E214-3752-45E0-AE06-D453C9F18862@edg.com>	<CAA+UVZRVo-Wr9g2dONCOxiVe9XDsqF2T0vAd-Qzy_HgZy7jvbw@mail.gmail.com›: no message and no child»
Pre-prune: |   «892252883 - ‹references: CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>	<CAGg_6+NRXp_anbvmZnkunEdLcrrNH1xT+ssj7NiNAmyGYGJXAQ@mail.gmail.com>	<CANh-dXm8PNWHBJ49GV9vu3OdRB1MHC+XJY=JAy8PVyUe9=1c6w@mail.gmail.com>	<c7ee95de94e94f6db9ad38edef4fa3a8@BY2PR03MB091.namprd03.prod.outlook.com>	<4faee2ff47524ee1b37d0852ed530987@BN1PR03MB107.namprd03.prod.outlook.com>	<87ob6m37qj.fsf@euclid.axiomatics.org>	<37b63d23d2a045dd8ae24fa06f893ebc@BN1PR03MB107.namprd03.prod.outlook.com>	<878uxqr1ya.fsf_-_@euclid.axiomatics.org>	<b189ea5c75d242a5b795bb524b2ea810@SN2PR03MB093.namprd03.prod.outlook.com>	<CAGuJnYd7bULjKn1TCpX0_hWsQ2PhuNEw8zypunS0Ty8wztSO_g@mail.gmail.com>	<394d2a6c4d524ea49607aabbe8fc2f37@DM2PR03MB304.namprd03.prod.outlook.com>	<BD55E214-3752-45E0-AE06-D453C9F18862@edg.com>	<CAA+UVZRVo-Wr9g2dONCOxiVe9XDsqF2T0vAd-Qzy_HgZy7jvbw@mail.gmail.com>	<5262288F.2070107@gmail.com›: no message and no child»
Pre-prune: |   «215897580 - ‹references: CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>	<048653ed07b04544bc3f6183592e1b79@DM2PR03MB304.namprd03.prod.outlook.com>	<CAGg_6+O_+DugEN-5UTZbXm8ecz+N=reOrox9w5rsxEYw+YBBEQ@mail.gmail.com>	<389e2109e5094aaf88703287e9d9b52b@DM2PR03MB304.namprd03.prod.outlook.com>	<CAGg_6+O7-Qco_08CNLn=Sgg=hSuqokmknUqnMUxt+YgmqkRSBg@mail.gmail.com>	<87fvs890bq.fsf@euclid.axiomatics.org>	<CAGg_6+M8qRYjmHXxTaHW9QEVaiYr7oRZ2=99uQnd0zTGo9Wapg@mail.gmail.com>	<87fvs81tb9.fsf@euclid.axiomatics.org>	<CAGg_6+NG-vgNn-bSO6d_V9G+_JYLkr6iho0DtVZbN=ivEoqYPw@mail.gmail.com>	<bbb97395cde546348bb7fa90d8ac27ea@DM2PR03MB304.namprd03.prod.outlook.com>	<CAGg_6+OLzJ2DgOpbAieDssv-06CSfWc227t0L8yRPCYzi0KFhA@mail.gmail.com>	<8fdbbcb040164f1f97a25e609fc549b2@DM2PR03MB304.namprd03.prod.outlook.com>	<CA+jCFLt5o_TmO9tnSMr3b=w3ZCdVayAkBcd3mpU4jq-AEFSjDw@mail.gmail.com>	<CAGg_6+Mz-bo2rs-RLnQgXoBKz1Hv17u7WkR924voatb7doHF8w@mail.gmail.com>	<CA+jCFLvCLODV59vyv_R6-vwHN5HXFs1mm0rRAc-PFJvh4bxhOg@mail.gmail.com>	<CAGg_6+NRXp_anbvmZnkunEdLcrrNH1xT+ssj7NiNAmyGYGJXAQ@mail.gmail.com>	<CANh-dXm8PNWHBJ49GV9vu3OdRB1MHC+XJY=JAy8PVyUe9=1c6w@mail.gmail.com>	<c7ee95de94e94f6db9ad38edef4fa3a8@BY2PR03MB091.namprd03.prod.outlook.com>	<4faee2ff47524ee1b37d0852ed530987@BN1PR03MB107.namprd03.prod.outlook.com>	<87ob6m37qj.fsf@euclid.axiomatics.org>	<37b63d23d2a045dd8ae24fa06f893ebc@BN1PR03MB107.namprd03.prod.outlook.com>	<878uxqr1ya.fsf_-_@euclid.axiomatics.org›: no message»
Pre-prune: |   |   [c++std-ext-14556] Re: [ub] Sized integer types and char bits (CAFk2RUaiDj-Fu_QVktwZBp-S-Kkr2DfBsJ+dLQNdTp6qZ7SKHQ@mail.gmail.com)
Pre-prune: |   «1490747277 - ‹references: CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>	<048653ed07b04544bc3f6183592e1b79@DM2PR03MB304.namprd03.prod.outlook.com>	<CAGg_6+O_+DugEN-5UTZbXm8ecz+N=reOrox9w5rsxEYw+YBBEQ@mail.gmail.com>	<389e2109e5094aaf88703287e9d9b52b@DM2PR03MB304.namprd03.prod.outlook.com>	<CAGg_6+O7-Qco_08CNLn=Sgg=hSuqokmknUqnMUxt+YgmqkRSBg@mail.gmail.com>	<87fvs890bq.fsf@euclid.axiomatics.org>	<CAGg_6+M8qRYjmHXxTaHW9QEVaiYr7oRZ2=99uQnd0zTGo9Wapg@mail.gmail.com>	<87fvs81tb9.fsf@euclid.axiomatics.org>	<CAGg_6+NG-vgNn-bSO6d_V9G+_JYLkr6iho0DtVZbN=ivEoqYPw@mail.gmail.com>	<bbb97395cde546348bb7fa90d8ac27ea@DM2PR03MB304.namprd03.prod.outlook.com>	<CAGg_6+OLzJ2DgOpbAieDssv-06CSfWc227t0L8yRPCYzi0KFhA@mail.gmail.com>	<8fdbbcb040164f1f97a25e609fc549b2@DM2PR03MB304.namprd03.prod.outlook.com>	<CA+jCFLt5o_TmO9tnSMr3b=w3ZCdVayAkBcd3mpU4jq-AEFSjDw@mail.gmail.com>	<CAGg_6+Mz-bo2rs-RLnQgXoBKz1Hv17u7WkR924voatb7doHF8w@mail.gmail.com>	<CA+jCFLvCLODV59vyv_R6-vwHN5HXFs1mm0rRAc-PFJvh4bxhOg@mail.gmail.com>	<CAGg_6+NRXp_anbvmZnkunEdLcrrNH1xT+ssj7NiNAmyGYGJXAQ@mail.gmail.com>	<CANh-dXm8PNWHBJ49GV9vu3OdRB1MHC+XJY=JAy8PVyUe9=1c6w@mail.gmail.com>	<c7ee95de94e94f6db9ad38edef4fa3a8@BY2PR03MB091.namprd03.prod.outlook.com>	<4faee2ff47524ee1b37d0852ed530987@BN1PR03MB107.namprd03.prod.outlook.com>	<87ob6m37qj.fsf@euclid.axiomatics.org>	<37b63d23d2a045dd8ae24fa06f893ebc@BN1PR03MB107.namprd03.prod.outlook.com>	<878uxqr1ya.fsf_-_@euclid.axiomatics.org>	<b189ea5c75d242a5b795bb524b2ea810@SN2PR03MB093.namprd03.prod.outlook.com›: no message»
Pre-prune: |   |   [c++std-ext-14558] Re: [ub] Sized integer types and char bits (‹references: CAGuJnYd7bULjKn1TCpX0_hWsQ2PhuNEw8zypunS0Ty8wztSO_g@mail.gmail.com›)
Pre-prune: |   |   |   [c++std-ext-14559] Re: [ub] Sized integer types and char bits (‹references: 394d2a6c4d524ea49607aabbe8fc2f37@DM2PR03MB304.namprd03.prod.outlook.com›)
Pre-prune: |   |   |   |   [c++std-ext-14560] Re: [ub] Sized integer types and char bits (‹references: BD55E214-3752-45E0-AE06-D453C9F18862@edg.com›)
Pre-prune: |   |   |   |   |   «297774990 - ‹references: CAA+UVZRVo-Wr9g2dONCOxiVe9XDsqF2T0vAd-Qzy_HgZy7jvbw@mail.gmail.co›: no message, even on child»
Pre-prune: |   |   |   |   |   |   «1067359420 - ‹references: m›: no message»
Pre-prune: |   |   |   |   |   |   |   [c++std-ext-14567] Re: [ub] Sized integer types and char bits (52623C86.5070004@bourguet.org)
Pre-prune: |   |   [c++std-ext-14563] Re: Sized integer types and char bits (CAA+UVZTx+ZDBdQ2USFn+D=SNQ-OLrGbRG3NxUBisY6SMYF17fg@mail.gmail.com)
Pre-prune: |   |   |   [c++std-ext-14569] Re: [ub] Re: Sized integer types and char bits (5263532A.7040208@redhat.com)
Pre-prune: |   «1178868549 - ‹references: CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com›: no message, even on child»
Pre-prune: |   |   «559575821 - ‹references: 048653ed07b04544bc3f6183592e1b79@DM2PR03MB304.namprd03.prod.outlook.com›: no message, even on child»
Pre-prune: |   |   |   «959933334 - ‹references: CAGg_6+O_+DugEN-5UTZbXm8ecz+N=reOrox9w5rsxEYw+YBBEQ@mail.gmail.com›: no message, even on child»
Pre-prune: |   |   |   |   «1702388274 - ‹references: 389e2109e5094aaf88703287e9d9b52b@DM2PR03MB304.namprd03.prod.outlook.com›: no message, even on child»
Pre-prune: |   |   |   |   |   «1115092137 - ‹references: CAGg_6+O7-Qco_08CNLn=Sgg=hSuqokmknUqnMUxt+YgmqkRSBg@mail.gmail.com›: no message, even on child»
Pre-prune: |   |   |   |   |   |   «263759190 - ‹references: 87fvs890bq.fsf@euclid.axiomatics.org›: no message, even on child»
Pre-prune: |   |   |   |   |   |   |   «594458922 - ‹references: CAGg_6+M8qRYjmHXxTaHW9QEVaiYr7oRZ2=99uQnd0zTGo9Wapg@mail.gmail.com›: no message, even on child»
Pre-prune: |   |   |   |   |   |   |   |   «977176210 - ‹references: 87fvs81tb9.fsf@euclid.axiomatics.org›: no message, even on child»
Pre-prune: |   |   |   |   |   |   |   |   |   «1593112861 - ‹references: CAGg_6+NG-vgNn-bSO6d_V9G+_JYLkr6iho0DtVZbN=ivEoqYPw@mail.gmail.com›: no message, even on child»
Pre-prune: |   |   |   |   |   |   |   |   |   |   «621744031 - ‹references: bbb97395cde546348bb7fa90d8ac27ea@DM2PR03MB304.namprd03.prod.outlook.com›: no message, even on child»
Pre-prune: |   |   |   |   |   |   |   |   |   |   |   «2143986362 - ‹references: CAGg_6+OLzJ2DgOpbAieDssv-06CSfWc227t0L8yRPCYzi0KFhA@mail.gmail.com›: no message, even on child»
Pre-prune: |   |   |   |   |   |   |   |   |   |   |   |   «1350673121 - ‹references: 8fdbbcb040164f1f97a25e609fc549b2@DM2PR03MB304.namprd03.prod.outlook.com›: no message, even on child»
Pre-prune: |   |   |   |   |   |   |   |   |   |   |   |   |   «1860995857 - ‹references: CA+jCFLt5o_TmO9tnSMr3b=w3ZCdVayAkBcd3mpU4jq-AEFSjDw@mail.gmail.com›: no message and no child»
Pre-prune: |   |   «1805533691 - ‹references: CAGg_6+Mz-bo2rs-RLnQgXoBKz1Hv17u7WkR924voatb7doHF8w@mail.gmail.com›: no message, even on child»
Pre-prune: |   |   |   «1660812527 - ‹references: CA+jCFLvCLODV59vyv_R6-vwHN5HXFs1mm0rRAc-PFJvh4bxhOg@mail.gmail.com›: no message, even on child»
Pre-prune: |   |   |   |   «283697583 - ‹references: CAGg_6+NRXp_anbvmZnkunEdLcrrNH1xT+ssj7NiNAmyGYGJXAQ@mail.gmail.com›: no message, even on child»
Pre-prune: |   |   |   |   |   «691581141 - ‹references: CANh-dXm8PNWHBJ49GV9vu3OdRB1MHC+XJY=JAy8PVyUe9=1c6w@mail.gmail.com›: no message, even on child»
Pre-prune: |   |   |   |   |   |   «1222739223 - ‹references: c7ee95de94e94f6db9ad38edef4fa3a8@BY2PR03MB091.namprd03.prod.outlook.com›: no message, even on child»
Pre-prune: |   |   |   |   |   |   |   «1307102818 - ‹references: 4faee2ff47524ee1b37d0852ed530987@BN1PR03MB107.namprd03.prod.outlook.com›: no message, even on child»
Pre-prune: |   |   |   |   |   |   |   |   «1866836963 - ‹references: 87ob6m37qj.fsf@euclid.axiomatics.org›: no message, even on child»
Pre-prune: |   |   |   |   |   |   |   |   |   «1192754471 - ‹references: 37b63d23d2a045dd8ae24fa06f893ebc@BN1PR03MB107.namprd03.prod.outlook.com›: no message and no child»
Pre-prune: |   «2012032999 - ‹references: CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>	<CAGg_6+Mz-bo2rs-RLnQgXoBKz1Hv17u7WkR924voatb7doHF8w@mail.gmail.com>	<CA+jCFLvCLODV59vyv_R6-vwHN5HXFs1mm0rRAc-PFJvh4bxhOg@mail.gmail.com>	<CAGg_6+NRXp_anbvmZnkunEdLcrrNH1xT+ssj7NiNAmyGYGJXAQ@mail.gmail.com>	<CANh-dXm8PNWHBJ49GV9vu3OdRB1MHC+XJY=JAy8PVyUe9=1c6w@mail.gmail.com>	<c7ee95de94e94f6db9ad38edef4fa3a8@BY2PR03MB091.namprd03.prod.outlook.com>	<4faee2ff47524ee1b37d0852ed530987@BN1PR03MB107.namprd03.prod.outlook.com>	<87ob6m37qj.fsf@euclid.axiomatics.org>	<37b63d23d2a045dd8ae24fa06f893ebc@BN1PR03MB107.namprd03.prod.outlook.com>	<878uxqr1ya.fsf_-_@euclid.axiomatics.org>	<b189ea5c75d242a5b795bb524b2ea810@SN2PR03MB093.namprd03.prod.outlook.com>	<CAGuJnYd7bULjKn1TCpX0_hWsQ2PhuNEw8zypunS0Ty8wztSO_g@mail.gmail.com>	<394d2a6c4d524ea49607aabbe8fc2f37@DM2PR03MB304.namprd03.prod.outlook.com>	<BD55E214-3752-45E0-AE06-D453C9F18862@edg.com›: no message and no child»
Pre-prune: |   «1961108531 - ‹references: CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>	<CAGg_6+NRXp_anbvmZnkunEdLcrrNH1xT+ssj7NiNAmyGYGJXAQ@mail.gmail.com>	<CANh-dXm8PNWHBJ49GV9vu3OdRB1MHC+XJY=JAy8PVyUe9=1c6w@mail.gmail.com>	<c7ee95de94e94f6db9ad38edef4fa3a8@BY2PR03MB091.namprd03.prod.outlook.com>	<4faee2ff47524ee1b37d0852ed530987@BN1PR03MB107.namprd03.prod.outlook.com>	<87ob6m37qj.fsf@euclid.axiomatics.org>	<37b63d23d2a045dd8ae24fa06f893ebc@BN1PR03MB107.namprd03.prod.outlook.com>	<878uxqr1ya.fsf_-_@euclid.axiomatics.org>	<b189ea5c75d242a5b795bb524b2ea810@SN2PR03MB093.namprd03.prod.outlook.com>	<CAGuJnYd7bULjKn1TCpX0_hWsQ2PhuNEw8zypunS0Ty8wztSO_g@mail.gmail.com>	<394d2a6c4d524ea49607aabbe8fc2f37@DM2PR03MB304.namprd03.prod.outlook.com>	<BD55E214-3752-45E0-AE06-D453C9F18862@edg.com>	<CAA+UVZRVo-Wr9g2dONCOxiVe9XDsqF2T0vAd-Qzy_HgZy7jvbw@mail.gmail.com>	<5262288F.2070107@gmail.com>	<dae22e95c446444a8b3c8d7c54c8bfc8@BN1PR03MB107.namprd03.prod.outlook.com›: no message and no child»
Pre-prune: |   «772066361 - ‹references: CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>	<CAGg_6+Mz-bo2rs-RLnQgXoBKz1Hv17u7WkR924voatb7doHF8w@mail.gmail.com>	<CA+jCFLvCLODV59vyv_R6-vwHN5HXFs1mm0rRAc-PFJvh4bxhOg@mail.gmail.com>	<CAGg_6+NRXp_anbvmZnkunEdLcrrNH1xT+ssj7NiNAmyGYGJXAQ@mail.gmail.com>	<CANh-dXm8PNWHBJ49GV9vu3OdRB1MHC+XJY=JAy8PVyUe9=1c6w@mail.gmail.com>	<c7ee95de94e94f6db9ad38edef4fa3a8@BY2PR03MB091.namprd03.prod.outlook.com>	<4faee2ff47524ee1b37d0852ed530987@BN1PR03MB107.namprd03.prod.outlook.com>	<87ob6m37qj.fsf@euclid.axiomatics.org>	<37b63d23d2a045dd8ae24fa06f893ebc@BN1PR03MB107.namprd03.prod.outlook.com>	<878uxqr1ya.fsf_-_@euclid.axiomatics.org>	<b189ea5c75d242a5b795bb524b2ea810@SN2PR03MB093.namprd03.prod.outlook.com>	<CAGuJnYd7bULjKn1TCpX0_hWsQ2PhuNEw8zypunS0Ty8wztSO_g@mail.gmail.com>	<394d2a6c4d524ea49607aabbe8fc2f37@DM2PR03MB304.namprd03.prod.outlook.com>	<BD55E214-3752-45E0-AE06-D453C9F18862@edg.com>	<CAA+UVZRVo-Wr9g2dONCOxiVe9XDsqF2T0vAd-Qzy_HgZy7jvbw@mail.gmail.com>	<5262288F.2070107@gmail.com›: no message»
Pre-prune: |   |   [c++std-ext-14566] Re: [ub] Sized integer types and char bits (87r4bh7ne4.fsf@euclid.axiomatics.org)
Pre-prune: |   «1023134153 - ‹references: CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>	<048653ed07b04544bc3f6183592e1b79@DM2PR03MB304.namprd03.prod.outlook.com>	<CAGg_6+O_+DugEN-5UTZbXm8ecz+N=reOrox9w5rsxEYw+YBBEQ@mail.gmail.com>	<389e2109e5094aaf88703287e9d9b52b@DM2PR03MB304.namprd03.prod.outlook.com>	<CAGg_6+O7-Qco_08CNLn=Sgg=hSuqokmknUqnMUxt+YgmqkRSBg@mail.gmail.com>	<87fvs890bq.fsf@euclid.axiomatics.org>	<CAGg_6+M8qRYjmHXxTaHW9QEVaiYr7oRZ2=99uQnd0zTGo9Wapg@mail.gmail.com>	<87fvs81tb9.fsf@euclid.axiomatics.org>	<CAGg_6+NG-vgNn-bSO6d_V9G+_JYLkr6iho0DtVZbN=ivEoqYPw@mail.gmail.com>	<bbb97395cde546348bb7fa90d8ac27ea@DM2PR03MB304.namprd03.prod.outlook.com>	<CAGg_6+OLzJ2DgOpbAieDssv-06CSfWc227t0L8yRPCYzi0KFhA@mail.gmail.com>	<8fdbbcb040164f1f97a25e609fc549b2@DM2PR03MB304.namprd03.prod.outlook.com>	<CA+jCFLt5o_TmO9tnSMr3b=w3ZCdVayAkBcd3mpU4jq-AEFSjDw@mail.gmail.com>	<CAGg_6+Mz-bo2rs-RLnQgXoBKz1Hv17u7WkR924voatb7doHF8w@mail.gmail.com>	<CA+jCFLvCLODV59vyv_R6-vwHN5HXFs1mm0rRAc-PFJvh4bxhOg@mail.gmail.com>	<CAGg_6+NRXp_anbvmZnkunEdLcrrNH1xT+ssj7NiNAmyGYGJXAQ@mail.gmail.com>	<CANh-dXm8PNWHBJ49GV9vu3OdRB1MHC+XJY=JAy8PVyUe9=1c6w@mail.gmail.com>	<c7ee95de94e94f6db9ad38edef4fa3a8@BY2PR03MB091.namprd03.prod.outlook.com>	<4faee2ff47524ee1b37d0852ed530987@BN1PR03MB107.namprd03.prod.outlook.com>	<87ob6m37qj.fsf@euclid.axiomatics.org>	<37b63d23d2a045dd8ae24fa06f893ebc@BN1PR03MB107.namprd03.prod.outlook.com>	<878uxqr1ya.fsf_-_@euclid.axiomatics.org>	<b189ea5c75d242a5b795bb524b2ea810@SN2PR03MB093.namprd03.prod.outlook.com>	<CAGuJnYd7bULjKn1TCpX0_hWsQ2PhuNEw8zypunS0Ty8wztSO_g@mail.gmail.com>	<394d2a6c4d524ea49607aabbe8fc2f37@DM2PR03MB304.namprd03.prod.outlook.com>	<BD55E214-3752-45E0-AE06-D453C9F18862@edg.com›: no message»
Pre-prune: |   |   [c++std-ext-14564] Re: [ub] Sized integer types and char bits (CAA+UVZRVo-Wr9g2dONCOxiVe9XDsqF2T0vAd-Qzy_HgZy7jvbw@mail.gmail.com)
Pre-prune: |   |   |   [c++std-ext-14565] Re: [ub] Sized integer types and char bits (‹references: 5262288F.2070107@gmail.com›)
Pre-prune: |   |   |   |   [c++std-ext-14568] Re: [ub] Sized integer types and char bits (‹references: dae22e95c446444a8b3c8d7c54c8bfc8@BN1PR03MB107.namprd03.prod.outlook.com›)
Pre-prune: |   |   |   |   |   [c++std-ext-14570] Re: [ub] Sized integer types and char bits (5263BBF2.7070103@gmail.com)
Pre-prune: |   |   |   |   |   |   [c++std-ext-14577] Re: [ub] Sized integer types and char bits (084fdfce6dda46cc99edea348b28b1d9@BN1PR03MB107.namprd03.prod.outlook.com)
Post-prune:«504820309 - ‹root›: no message»
Post-prune:|   [c++std-ext-14587] Re: [ub] Re: Sized integer types and char bits (‹references: CAGL0aWeP8Ku=4B66xss4QMLJUXKxE9sMiPG7Pfvm3rorxQG-Fg@mail.gmail.com›)
Post-prune:|   |   [c++std-ext-14589] Re: [ub] Re: Sized integer types and char bits (4ed19f87c10c46b28c6a8514583d3354@DM2PR03MB304.namprd03.prod.outlook.com)
Post-prune:|   [c++std-ext-14555] Sized integer types and char bits (‹references: 878uxqr1ya.fsf_-_@euclid.axiomatics.org›)
Post-prune:|   |   [c++std-ext-14557] Re: Sized integer types and char bits (‹references: b189ea5c75d242a5b795bb524b2ea810@SN2PR03MB093.namprd03.prod.outlook.com›)
Post-prune:|   |   |   [c++std-ext-14561] Re: Sized integer types and char bits (cad3f73261094d738dc5b98f13eb4618@DM2PR03MB304.namprd03.prod.outlook.com)
Post-prune:|   [c++std-ext-14556] Re: [ub] Sized integer types and char bits (CAFk2RUaiDj-Fu_QVktwZBp-S-Kkr2DfBsJ+dLQNdTp6qZ7SKHQ@mail.gmail.com)
Post-prune:|   «1490747277 - ‹references: CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com>	<048653ed07b04544bc3f6183592e1b79@DM2PR03MB304.namprd03.prod.outlook.com>	<CAGg_6+O_+DugEN-5UTZbXm8ecz+N=reOrox9w5rsxEYw+YBBEQ@mail.gmail.com>	<389e2109e5094aaf88703287e9d9b52b@DM2PR03MB304.namprd03.prod.outlook.com>	<CAGg_6+O7-Qco_08CNLn=Sgg=hSuqokmknUqnMUxt+YgmqkRSBg@mail.gmail.com>	<87fvs890bq.fsf@euclid.axiomatics.org>	<CAGg_6+M8qRYjmHXxTaHW9QEVaiYr7oRZ2=99uQnd0zTGo9Wapg@mail.gmail.com>	<87fvs81tb9.fsf@euclid.axiomatics.org>	<CAGg_6+NG-vgNn-bSO6d_V9G+_JYLkr6iho0DtVZbN=ivEoqYPw@mail.gmail.com>	<bbb97395cde546348bb7fa90d8ac27ea@DM2PR03MB304.namprd03.prod.outlook.com>	<CAGg_6+OLzJ2DgOpbAieDssv-06CSfWc227t0L8yRPCYzi0KFhA@mail.gmail.com>	<8fdbbcb040164f1f97a25e609fc549b2@DM2PR03MB304.namprd03.prod.outlook.com>	<CA+jCFLt5o_TmO9tnSMr3b=w3ZCdVayAkBcd3mpU4jq-AEFSjDw@mail.gmail.com>	<CAGg_6+Mz-bo2rs-RLnQgXoBKz1Hv17u7WkR924voatb7doHF8w@mail.gmail.com>	<CA+jCFLvCLODV59vyv_R6-vwHN5HXFs1mm0rRAc-PFJvh4bxhOg@mail.gmail.com>	<CAGg_6+NRXp_anbvmZnkunEdLcrrNH1xT+ssj7NiNAmyGYGJXAQ@mail.gmail.com>	<CANh-dXm8PNWHBJ49GV9vu3OdRB1MHC+XJY=JAy8PVyUe9=1c6w@mail.gmail.com>	<c7ee95de94e94f6db9ad38edef4fa3a8@BY2PR03MB091.namprd03.prod.outlook.com>	<4faee2ff47524ee1b37d0852ed530987@BN1PR03MB107.namprd03.prod.outlook.com>	<87ob6m37qj.fsf@euclid.axiomatics.org>	<37b63d23d2a045dd8ae24fa06f893ebc@BN1PR03MB107.namprd03.prod.outlook.com>	<878uxqr1ya.fsf_-_@euclid.axiomatics.org>	<b189ea5c75d242a5b795bb524b2ea810@SN2PR03MB093.namprd03.prod.outlook.com›: no message»
Post-prune:|   |   [c++std-ext-14558] Re: [ub] Sized integer types and char bits (‹references: CAGuJnYd7bULjKn1TCpX0_hWsQ2PhuNEw8zypunS0Ty8wztSO_g@mail.gmail.com›)
Post-prune:|   |   |   [c++std-ext-14559] Re: [ub] Sized integer types and char bits (‹references: 394d2a6c4d524ea49607aabbe8fc2f37@DM2PR03MB304.namprd03.prod.outlook.com›)
Post-prune:|   |   |   |   [c++std-ext-14560] Re: [ub] Sized integer types and char bits (‹references: BD55E214-3752-45E0-AE06-D453C9F18862@edg.com›)
Post-prune:|   |   |   |   |   [c++std-ext-14567] Re: [ub] Sized integer types and char bits (52623C86.5070004@bourguet.org)
Post-prune:|   |   [c++std-ext-14563] Re: Sized integer types and char bits (CAA+UVZTx+ZDBdQ2USFn+D=SNQ-OLrGbRG3NxUBisY6SMYF17fg@mail.gmail.com)
Post-prune:|   |   |   [c++std-ext-14569] Re: [ub] Re: Sized integer types and char bits (5263532A.7040208@redhat.com)
Post-prune:|   «1178868549 - ‹references: CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com›: no message and no child»
Post-prune:|   [c++std-ext-14566] Re: [ub] Sized integer types and char bits (87r4bh7ne4.fsf@euclid.axiomatics.org)
Post-prune:|   [c++std-ext-14564] Re: [ub] Sized integer types and char bits (CAA+UVZRVo-Wr9g2dONCOxiVe9XDsqF2T0vAd-Qzy_HgZy7jvbw@mail.gmail.com)
Post-prune:|   |   [c++std-ext-14565] Re: [ub] Sized integer types and char bits (‹references: 5262288F.2070107@gmail.com›)
Post-prune:|   |   |   [c++std-ext-14568] Re: [ub] Sized integer types and char bits (‹references: dae22e95c446444a8b3c8d7c54c8bfc8@BN1PR03MB107.namprd03.prod.outlook.com›)
Post-prune:|   |   |   |   [c++std-ext-14570] Re: [ub] Sized integer types and char bits (5263BBF2.7070103@gmail.com)
Post-prune:|   |   |   |   |   [c++std-ext-14577] Re: [ub] Sized integer types and char bits (084fdfce6dda46cc99edea348b28b1d9@BN1PR03MB107.namprd03.prod.outlook.com)
About to blow up on ‹references: CANh-dXkxpwcgnCYP_tfvH0yXb6__mKbZfbcNoPeyUNZ_arv1SA@mail.gmail.com›!!!
Exception in thread ""main"" java.lang.NullPointerException
	at org.apache.commons.net.nntp.Threader.gatherSubjects(Threader.java:319)
	at org.apache.commons.net.nntp.Threader.thread(Threader.java:80)
	at org.apache.commons.net.nntp.Threader.thread(Threader.java:47)
	at [redacted]
{noformat}","15/Apr/14 23:17;sebb;I'm not getting the NPE with your test data.

It would be a lot easier to test against a real NNTP server - is there a public one which carries this news-group?

Or if not, can you provide the XOVER response for the messages in question?","16/Apr/14 01:16;clonezone;These are not being read via NNTP. These are emails being read from the local filesystem. The threading is being done via the IDs in the References: headers.","16/Apr/14 02:15;sebb;I realise that, but as already noted I cannot reproduce the NPE with your test data.

I tried with both the tar.gz attachment and the header-only listing in the comments (BTW, one reference is truncated in the comments).

Can you provide a complete test case that fails?

Note that the class was originally designed for use with NNTP, in particular XOVER responses.
It would be useful to know if these responses can trigger the bug, or if the response is adjusted to remove any missing threads so the problem does not occur.","01/Dec/14 00:40;sebb;If you can provide a test case that reproduces the error, please attach it an reopen.",,,,,,,,,,,,,,,
DataConnection-Socket hangs on InputStream.read(),NET-470,12560464,Bug,Open,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,,,fenvariel,fenvariel,13/Jun/12 08:45,19/May/14 15:22,28/Mar/20 23:25,,3.0,3.0.1,3.1,,FTP,,0,"I'm using ftps (SSL/implicit) and passive mode. connect(), login() and cwd() commands work well.

But if I have to open a data connection (for example for LIST) the socket is opened successfully using one of the desired ""dataports"". The underlying InputStream is created as well without any Exception.
But then every attempt to read from the InputStream will eventually time out or hang forever (depending on the DataTimeout-value).

If I use the FileZilla client, everything works successfully and fast. FileZilla issues the following commands:

{color:blue}
{{C: SYST}}
{{A: 215 UNIX Type: L8}}
{{C: FEAT}}
{{A: 211-Extensions supported}}
{{A:  SIZE}}
{{A:  REST}}
{{A:  MDTM}}
{{A:  MFMT YYYYMMDDHHMMSS filename}}
{{A:  MDTM YYYYMMDDHHMMSS filename}}
{{A:  MDTM YYYYMMDDHHMMSS[+-TZ] filename}}
{{A:  XCRC filename}}
{{A:  XMD5 filename}}
{{A:  AUTH TLS}}
{{A:  AUTH SSL}}
{{A:  MODE Z}}
{{A:  PBSZ}}
{{A:  PROT}}
{{A: 211 End of FEAT}}
{{C: USER ********}}
{{A: 331 Password required for ********}}
{{C: PASS ********}}
{{A: 230 User ******** logged in}}
{{C: PBSZ 0}}
{{A: 200 PBSZ 0 successful}}
{{C: PROT P}}
{{A: 200 Data connection set to: Private}}
{{C: TYPE I}}
{{A: 200 TYPE set to BINARY}}
{{C: PASV}}
{{A: 227 Entering passive mode (217,70,161,93,39,15)}}
{{C: LIST}}
{{A: 150 Opening ASCII mode data connection}}
{{A: 226 Directory send OK}}
{color}

Issueing the commands ""PBSZ 0"" and ""PROT P"" before and calling enterLocalPassiveMode() and setFileType(FTP.BINARY_FILE_TYPE) will produce the same commandsequence (without SYST and FEAT), but with the error described above.
              
On top of that: disconnect() will block forever, originating from socket.close() which is blocking. The only way to avoid this is calling logout() (even if login() wasn't issued). Then disconnect will return as expected.


","Windows 7 (x86), Netbeans 7, JDK 1.6 and JDK 1.7",,,,,,,,,,"13/Jun/12 11:14;fenvariel;examplePatch.diff;https://issues.apache.org/jira/secure/attachment/12531954/examplePatch.diff",,,,,,1.0,,,,,,,,,,,,,,,,,,,,2012-06-13 09:38:38.785,,,false,,,,,,,,,,,,,,,,,307045,,,Mon May 19 15:22:23 UTC 2014,,,,,,,"0|i1a46v:",267145,,,,,,,,,,,,,,,,"13/Jun/12 09:38;sebb;We'll need to know how FileZilla differs from NET.
Can you turn on command logging?

For example:
ftpclient.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out), true));
","13/Jun/12 11:12;fenvariel;Here you are:

{color:blue}
{{220 PSFTPd. Secure FTP Server ready}}
{{Connected to ******** on 990}}
{{USER *******}}
{{331 Password required for *******}}
{{PASS *******}}
{{230 User ******* logged in}}
{{SYST}}
{{215 UNIX Type: L8}}
{{Remote system is UNIX Type: L8}}
{{PBSZ 0}}
{{200 PBSZ 0 successful}}
{{PROT P}}
{{200 Data connection set to: Private}}
{{TYPE I}}
{{200 TYPE set to BINARY}}
{{PASV}}
{{227 Entering passive mode (217,70,161,93,39,12)}}
{{LIST}}
{{150 Opening ASCII mode data connection}}
{color}
{color:red}
java.net.SocketTimeoutException: Read timed out
   at java.net.SocketInputStream.socketRead0(Native Method)
   at java.net.SocketInputStream.read(SocketInputStream.java:150)
   at java.net.SocketInputStream.read(SocketInputStream.java:121)
   at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:283)
   at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:325)
   at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:177)
   at java.io.InputStreamReader.read(InputStreamReader.java:184)
   at java.io.BufferedReader.fill(BufferedReader.java:154)
   at java.io.BufferedReader.readLine(BufferedReader.java:317)
   at java.io.BufferedReader.readLine(BufferedReader.java:382)
   at org.apache.commons.net.ftp.FTPFileEntryParserImpl.readNextEntry(FTPFileEntryParserImpl.java:52)
   at org.apache.commons.net.ftp.FTPListParseEngine.readStream(FTPListParseEngine.java:133)
   at org.apache.commons.net.ftp.FTPListParseEngine.readServerList(FTPListParseEngine.java:102)
   at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:3103)
   at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:3072)
   at org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2731)
   at testapplication.ftp.FTPClientExample.main(FTPClientExample.java:335)
{color}
{color:blue}
QUIT
226 Directory send OK (<-- Received when reading answer for QUIT)
{color}

This was produced using Netbeans 7, JDK 1.7 and a slightly changed version of {http://www.google.de/url?sa=t&rct=j&q=ftpclientexample%20java&source=web&cd=1&ved=0CFIQFjAA&url=http%3A%2F%2Fcommons.apache.org%2Fnet%2Fexamples%2Fftp%2FFTPClientExample.java&ei=83LYT7iSH4TKsgaA_ejjDw&usg=AFQjCNHYEWShtZ-WVhvvFvmnjmsfWanevg&cad=rja]

I'll attach a diff with the modifications. Arguments are ""-l -b -p SSL,true"" and of course the login and server preferences.

I'll try to get more information about the server as well...
","13/Jun/12 11:14;fenvariel;Diff for FTPClienntExample.java that was used to produce the posted output.","13/Jun/12 14:39;fenvariel;I just talked to the FTP-Server admin. He told me that they are using the PSFTP-server v.1.5 Build 199.

Passive ports are between 9990 and 9999.

netstat-result: (xxx.xxx.xxx.xxx = IP in local network; yyy.yyy.yyy.yyy = IP of ftp-server)
{color:blue}
{{TCP xxx.xxx.xxx.xxx:49980  yyy.yyy.yyy.yyy:ftps ESTABLISHED}}
{{TCP xxx.xxx.xxx.xxx:49983  yyy.yyy.yyy.yyy:9999 ESTABLISHED}}
{color}","14/Jun/12 07:15;fenvariel;I just looked around for some other java libraries. ftp4j works fine:
# PBSZ 0 and PROT P are sent automatically after LOGIN and PASS
# LIST is executed without error (so, the DataConnection is established and can be read).
# disconnect() just works as expected, even without sending QUIT.

ftp4j opensource as well, so I guess you may have a look at how they handle the DataSocket.

If you want I can post my sourcecode for ftp4j as well.

{color:blue}
{{A: 220 PSFTPd. Secure FTP Server ready}}
{{C: USER *********}}
{{A: 331 Password required for *********}}
{{C: PASS ********}}
{{A: 230 User ******* logged in}}
{{C: FEAT}}
{{A: 211-Extensions supported}}
{{A:  SIZE}}
{{A:  REST}}
{{A:  MDTM}}
{{A:  MFMT YYYYMMDDHHMMSS filename}}
{{A:  MDTM YYYYMMDDHHMMSS filename}}
{{A:  MDTM YYYYMMDDHHMMSS\[+-TZ\] filename}}
{{A:  XCRC filename}}
{{A:  XMD5 filename}}
{{A:  AUTH TLS}}
{{A:  AUTH SSL}}
{{A:  MODE Z}}
{{A:  PBSZ}}
{{A:  PROT}}
{{A: 211 End of FEAT}}
{{C: PBSZ 0}}
{{A: 200 PBSZ 0 successful}}
{{C: PROT P}}
{{A: 200 Data connection set to: Private}}
{{C: TYPE A}}
{{A: 200 TYPE set to ASCII}}
{{C: PASV}}
{{A: 227 Entering passive mode (217,70,161,93,39,6)}}
{{C: LIST}}
{{A: 150 Opening ASCII mode data connection}}
{{A: 226 Directory send OK}}
{color}

If you need me to do some more tests for you, I'll be glad to help. Unfortunately and needn't provide the ftp-server credentials.","01/Jul/12 13:49;bogdro;Does it work with plaintext (no SSL) connections? Perhaps you have the same problem as in NET-408, but your server doesn't break the connection with an error?","19/May/14 15:22;hauser@acm.org;similar to NET-542 ",,,,,,,,,,,,,,,,,
FTPClient truncates file (storeFile method),NET-409,12507914,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,jon_e,jon_e,20/May/11 19:12,21/Sep/13 00:56,28/Mar/20 23:25,23/May/11 19:55,3.0,,,3.0.1,FTP,,0,Functionality works fine on commons-net-2.2.  Error occurred after upgrading library to commons-net-3.0 version.  Sending a file from Windows 7 to CentOS/Linux using FTPClient storeFile method results in truncation of files over 2k in size.  Rolling back upgrade to commons-net-2.2 version fixes problem.,Windows 7/Eclipse 3.6.2,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2011-05-20 21:27:37.374,,,false,,,,,,,,,,,,,,,,,41742,,,Sat Sep 21 00:56:33 UTC 2013,,,,,,,"0|i0kuvr:",119821,,,,,,,,,,,,,,,,"20/May/11 21:27;sebb;Works fine for me. You'll need to provide sample code that fails on 3.0 and works with 2.2.

Please try using the example code as follows:

java examples.ftp.FTPClientExample -s <host> <user> <password> <remotefile> <localfile>

","23/May/11 18:20;jon_e;Per your request, the following sample class demonstrates the issue.  My original description is not entirely accurate; it is not files over 2k in size that is truncated, but instead the file size ""rounds down"" to the nearest 1k and truncates the rest.

The ""Declaration.txt"" file used in this example is the U.S. Declaration of Independence.  It is 7.94KB on my local drive in Windows.  On arriving at the server, it is only 7K, truncating the last few sentences.

Truncation occurs when the commons-net-3.0.jar is used.  Changing the .jar on the class path to use the commons-net-2.2.jar, the file is transmitted in its entirety.

###

package com.jericson.stuff;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.FileReader;
import java.io.InputStream;
import org.apache.commons.net.ftp.FTPClient;

public class Net_409_Demo {

  /**
   * @param args
   */
  public static void main(String[] args) {
    String independence = getStringFromFile();
    FTPClient ftpClient = new FTPClient();
    try {
      ftpClient.connect(""b2b.myserver.com"");
      ftpClient.login(""testuser"", ""Testpassword"");
      InputStream stream = new ByteArrayInputStream(
              independence.getBytes(""UTF-8""));
      ftpClient.storeFile(""Independence.txt"", stream);
      ftpClient.quit();
      ftpClient.disconnect();
    } catch (Exception e) {
      e.printStackTrace();
    }
    System.out.println(""** Complete **"");
  }

  private static String getStringFromFile() {

    /*
     * The file ""Declaration.txt"" begins with <Declaration>, ends with
     * </Declaration> and has no line separators in between.
     */
    try {
      BufferedReader reader = new BufferedReader(new FileReader(
              ""Declaration.txt""));
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append(reader.readLine());
      return stringBuilder.toString();
    } catch (Exception e) {
      e.printStackTrace();
    }
    return null;
  }
}

###
 

","23/May/11 19:55;sebb;That explains why my test worked and yours did not. As it happens, the file I used was a multiple of 2k bytes, so the error was not exposed.

Code has been fixed now, and will be in the next release.

Snapshot has been uploaded to https://repository.apache.org/content/repositories/snapshots/commons-net/commons-net/3.0.1-SNAPSHOT/

Thanks for reporting the issue.","17/Sep/13 06:32;victorqedu;This problem is still valid in version 3.3.
I copy a file of dimension 1.921.303 and at the destination the dimension is 1.921.283.
This is the code.
                client = new FTPClient();
                client.connect(server);
                int reply = client.getReplyCode();

                if(!FTPReply.isPositiveCompletion(reply)) {
                    client.disconnect();
                    System.err.println(""FTP server refused connection."");
                    return;
                } else {
                    if(client.login(userName, password)) {
                        System.out.println(""FTP connected"");
                        System.out.println(""FTP logged in"");
                        fis = new FileInputStream(srcFileName);
                        if(!client.storeFile(dstFileName, fis)) {
                            String raspuns_text = client.getReplyString();
                            client.logout();
                            return;
                        }
                        System.out.println(""FTP file stored"");
                        client.logout();
                        System.out.println(""FTP logged out"");
                    } else {
                        return;
                    }
                }
","21/Sep/13 00:56;sebb;Is the file actually truncated, or just shorter?
The difference is that a truncated file has some bytes missing from the end, whereas a shorter file may have bytes missing anywhere.

One cause of missing bytes is using ASCII file transfer inappropriately.",,,,,,,,,,,,,,,,,,,
Not possible to call FTPClient.abort() method correctly,NET-419,12518580,Bug,Open,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,,,tmysik,tmysik,11/Aug/11 11:25,23/Apr/12 12:26,28/Mar/20 23:25,,3.0,,,,FTP,,0,"Unfortunately, it seems that there are difficulties of using FTPClient.abort()
method [1][2]. Also, it is really not clear how the abort() method should be
called/used at all - if from another thread (as I would expect) then there is a problem with
thread-safety: FTPClient itself is not thread-safe so it means that some
custom lock/monitor must be used; but this lock will prevent calling abort() on
the FTPClient while it is downloading/uploading file since file upload/download
itself is blocking...

If I'm wrong and the abort() method works then an example in Javadoc would be more than welcome.

Thanks a lot.
[1] http://apache-commons.680414.n4.nabble.com/Net-FTPClient-abort-problem-td739542.html
[2] http://www.tikalk.com/java/forums/apache-ftp-client-abort-transfer
","java version ""1.6.0_26""
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)

Linux cattie 2.6.38-10-generic #46-Ubuntu SMP Tue Jun 28 15:07:17 UTC 2011 x86_64 x86_64 x86_64 GNU/Linux
",,,,,,,,,,"18/Sep/11 10:34;bogdro;ftp-synchro.diff;https://issues.apache.org/jira/secure/attachment/12494968/ftp-synchro.diff",,,,,,1.0,,,,,,,,,,,,,,,,,,,,2011-09-03 15:44:56.453,,,false,,,,,,,,,,,,,,,,,60282,,,Sun Sep 18 10:34:57 UTC 2011,,,,,,,"0|i1a46f:",267143,,,,,,,,,,,,,,,,"31/Aug/11 14:10;tmysik;ping","03/Sep/11 15:44;bogdro; No need to ping us. We see your message. We may not reply immediately, but your issue is still open.
 The problem is that it's not that easy just to provide thread-safety. If the methods are synchronized, you won't be able to call abort() when another method is executing (like retrieveFile()).
 Perhaps just command sending should be synchronized (to synchronize the input/output buffers), but that won't always solve the problem, because some commands (like file send/retrieve) have two replies and the client needs to wait for the second one, so it needs to be in the synchronized block while the operation you want to abort is being performed. Right now we dont' have synchronized blocks, so you can call abort() at any time (and mostly it will work). If we had everything synchronized, you wouldn't be able to call abort() during the operation at all. So even if the current solution is not perfect, the synchronized solution is even worse. This needs a re-think of what should be done.","05/Sep/11 07:33;tmysik;> No need to ping us. We see your message. We may not reply immediately, but your issue is still open.

Sorry, I did it since the issue is still unassigned (in NetBeans, this means that the issue is not yet evaluated).

> The problem is [...]

Yes, exactly as I wrote it in my initial description. That's the reason why I have reported this issue and I'm glad that I'm not the only one who doesn't know how to use this method properly.

> you can call abort() at any time (and mostly it will work)

Unfortunately, this is likely not acceptable for us, I'm afraid. In such case, sooner or later I would get a bug report and I won't be able to fix it so I prefer not to provide this functionality at all.

> This needs a re-think of what should be done.

I don't know your code but have seen that you are able to keep-alive during file transfer via repeatedly sending NOOP command after reading some chunk of data, right? As a quick, not-so-great fix - what about to add a volatile [1] boolean field transferAborted and check this field during file transfer as well?

Thanks a lot.
[1] Yes, I know that ""sudden"" use of volatile in not thread-safe code can be confusing; but, with a proper comment (with reference to this bug perhaps) added to such field, I think that it would be acceptable.
","06/Sep/11 16:24;bogdro;Checking if the abort command was issued could be implemented the same way as the current NOOP sending, but it has a flow (just ilke the NOOP sending) - the listener classes that are registered on the transfers are called when bytes are transferred. This means that if we wait with sending the ABOR command until some bytes are received, we're defeating the purpose of the ABOR command itself. And if we send it immediately, we have synchronization problems. If we receive data often, then the ABOR will be sent not very long after calling the abort() method. If not (including slow or already disconnected servers), the method won't do nothing. So, sure, we may try it, but this fix won't be perfect.
Maybe we could stop waiting for additional replies, so that each method that sends a command could have a synchronized block within which the command would be sent and one reply read. This way the BufferredReaders/Writers would be synchronized and other threads could send commands. This won't make the whole FTPClient thread-safe, but perhaps this would be enough for both the NOOP and ABOR to work properly during transfers. The drawback is that we're changing the behavious of some methods in an incompatible way.
I'd look for synchronized line-wise readers and writers (probably outside of the Java core classes, perhaps even somewhere in Apache) and make command sending and reply parsing synchronized methods, this could fix our problems. Finding such classes is one thing. The FTP, FTPClient, FTPSClient and maybe other classes would have to be changed. Unfortunately, currently I don't have the time to look at this closer, but I'll look into the problem later. If you have any other ideas, share them!","07/Sep/11 10:13;tmysik;Thanks a lot for the analysis; frankly, I do not understand everything but if there is a solution which is not perfect but which would work in most cases, I would give it a try. But the final decision is up to you, of course.

Thanks again.
","18/Sep/11 10:34;bogdro;The attached file, ftp-synchro.diff, synchronizes all the uses of the control socket (and its associated readers and writers). This should help in avoiding the incorrect replies to commands.
It also introduces a boolean that tells if the user has called abort(). Currently all it does is skipping the now-perhaps-unnecessary replies on the control channel after aborting a transfer.
This patch works for me: the FTP client does not lock because of synchronization and calling abor() on a separate Thread returns ""226 Abort successful"" and the file is not totally transferred. It needs a re-think, though: do we need to skip the additional answers, so the user can read them? Perhaps something else should be done?
To abort a transfer as soon as possible, abor() should be called, followed by closing the Input/OutputStream connected to the transfer. One may call interrupt() on the transfer Thread (after this, read()/write() should throw an InterruptedException, which should propagate all the way up to the code calling the FTP client), but someone noticed that it may not always work. On the other hand, closing the stream should always work.",,,,,,,,,,,,,,,,,,
Apache Commons TFTP does not handle RFC 783 retransmits.,NET-410,12508380,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,chuckwolber,chuckwolber,26/May/11 00:47,29/Feb/12 20:35,28/Mar/20 23:25,10/Jan/12 19:27,2.2,3.0,,3.1,TFTP,,0,"org.apache.commons.net.tftp.TFTPClient

When a packet fails to be received, the looping logic in TFTPClient contains an unlabeled ""continue"" in the TFTPTimeout blocks. This causes TFTPClient to go back to the listening state in the innermost loop, rather than the _sendPacket label in the outermost loop (which will cause a resend of the missing packet).

This issue should be resolved before implementing NET-412.",Sun/Oracle JRE 6 update 20,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,154629,,,2011-05-26 00:47:20.0,,,,,,,"0|i0j0pr:",109044,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
FTPClient.storeFile transfers zero bytes,NET-411,12508551,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Duplicate,,jaro_chmurny,jaro_chmurny,27/May/11 13:51,29/Feb/12 20:33,28/Mar/20 23:25,27/May/11 14:26,3.0,,,,FTP,,0,"When I try to upload a file to an FTP server via org.apache.commons.net.ftp.FTPClient.storeFile(String, ImputStream), everything seems to work well. The method returns true, the reply string seems to be OK, I also see in the FTP server that there was a successful transfer. However, zero bytes are transfered, although the ByteArrayInputStream used as the second argument has some data (some hundreds of bytes). When I capture the network traffic with Wireshark, I also see that everything seems to be OK, but the data connection actually transfers no data. Immediately after the TCP handshake, the client closes the connection with FIN. I tried to use a CopyStreamListener to see what's going on - it reports successful transfer of the expected number of bytes. When I perform the same test with Commons Net 2.2 instead of Commons Net 3.0, it works properly - my data gets uploaded, and I get the same OK responses as with 3.0. When switching between 2.2 and 3.0, I do not compile anything.","Java 6, it behaves the same way on Windows and on Solaris.",,,,,,,,,NET-409,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,154630,,,2011-05-27 13:51:02.0,,,,,,,"0|i0ybh3:",198328,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
"FtpClient.storeFile(), last packet data loss bug",NET-413,12508786,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Duplicate,,junho76,junho76,31/May/11 03:25,29/Feb/12 20:33,28/Mar/20 23:25,04/Jun/11 15:02,3.0,,,,FTP,,0,"When I upload some jpeg files to FTP server, a few files have smaller size than original files.

In the server, uploaded files size are 1024 * n

So I changed org.apache.commons.net.ftp.FTPClient.java (line number 570, parameter flush), 'false' to 'true'

And it solved...

Please check it...","Client : Windows XP, Eclipse3.5, JVM 1.6
Server : Sun Sparc, Pro FTPD",,,,,,,,,NET-409,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2011-05-31 10:50:35.581,,,false,,,,,,,,,,,,,,,,,72110,,,Tue May 31 10:50:35 UTC 2011,,,,,,,"0|i0yblr:",198349,,,,,,,,,,,,,,,,"31/May/11 10:50;sebb;Duplicate of NET-409",,,,,,,,,,,,,,,,,,,,,,,
"org.apache.commons.net.ftpFTPClient, file will not be totally transferred.",NET-417,12510275,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Duplicate,,pilgrim_yang,pilgrim_yang,14/Jun/11 06:39,15/Jun/11 08:17,28/Mar/20 23:25,15/Jun/11 08:17,3.0,,,,FTP,,0,"If I use this ftp.storeFile(f.getName(), stream)  to transfer file to the FTP Server. After the function returned the file will be partially sent. 
E.g. If the file has 1025 bytes, only 1024 bytes will be sent while if the file has 2050 bytes, only 2048 bytes will be sent.
That's because the default buffer size is 1024, each time 1024 bytes of file content will be sent to the FTP server. But stream.flush() is not called at the end of each transfer. Finally, socket stream to FTP server will be closed before the 
last transmission and the last frame of data, which may be less than 1024, will be left unsent.

My way of fixing this BUG: Change the content of method FtpClient.__storeFile(), change the last parameter for calling Util.copyStream() to 'true'.
",Windows XP FTPClient program sending file to Windows 2003 IIS FTP Server,3600,3600,,0%,3600,3600,,,NET-409,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2011-06-14 15:35:13.04,,,false,,,,,,,,,,,,,,,,,71219,,,Wed Jun 15 01:06:40 UTC 2011,,,,,,,"0|i0ybmv:",198354,,,,,,,,,,,,,,,,"14/Jun/11 15:35;sebb;Are you sure you are using version 3.0.1?

The problem you describe was present in 3.0, but was fixed in 3.0.1, see NET-409.","15/Jun/11 00:20;pilgrim_yang;Confirmed. Sorry, I've made a mistake. My version is 3.0 but not 3.0.1. ","15/Jun/11 01:06;pilgrim_yang;My newest test proves that this problem has been fixed in 3.0.1. Thanks",,,,,,,,,,,,,,,,,,,,,
Apache Commons TFTP does not reject request replies that originate from a control port.,NET-414,12509021,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Minor,Fixed,,chuckwolber,chuckwolber,01/Jun/11 20:47,14/Feb/17 22:22,28/Mar/20 23:25,09/Feb/17 16:11,2.2,3.0,,3.6,TFTP,,0,"When a TFTP request response arrives that incorrectly specifies its source port as the control port, the request should be rejected with an error code 5 (TFTPErrorPacket.UNKNOWN_TID) and suggested text ""INCORRECT SOURCE PORT"". 

This can happen when an incorrectly written TFTP server replies to a request from a control socket instead of building a new socket that attaches to an ephemeral port.

Note 1: The expected response from a read request is a DATA packet. The expected response from a write request is an ACK packet.

Note 2: The control port is implementation specific and not always port 69 (as defined by IANA).",Java 1.6 Patch 20,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2012-01-10 19:33:28.681,,,false,,,,,,,,,,,,,,,,,72295,,,Thu Feb 09 16:11:15 UTC 2017,,,,,,,"0|i1a45r:",267140,,,,,,,,,,,,,,,,"10/Jan/12 19:33;sebb;I'm not quite clear what code changes are needed here - have you a suggested patch?","10/Jan/12 21:11;chuckwolber;I have made a vast number of changes to the TFTPClient class we used in our project, thus a proper patch against any Apache Commons released version is no longer possible. However, in rough qualitative form, after the initial try/catch block that surrounds ""received = bufferedReceive()"" we are using the following code to detect the condition (note that the ""port"" variable is defined in the method arguments and is not always port 69 as defined in the IANA port reservation).

{code:title=TFTPClient.java}
                
                // The first time we receive we get the port number and
                // answering host address (for hosts with multiple IPs)
                if (justStarted)
                {
                    justStarted = false;
                    hostPort = received.getPort();

                    if (hostPort == port)
                    {
                        error = new TFTPErrorPacket(received.getAddress(),
                                received.getPort(), TFTPErrorPacket.UNKNOWN_TID,
                                ""INCORRECT SOURCE PORT"");
                        bufferedSend(error);
                        endBufferedOps();
                        throw new TFTPTransferErrorException(
                                ""Incorrect source port in request reply."");
                    }

                    data.setPort(hostPort);
                    if(!host.equals(received.getAddress()))
                    {
                        host = received.getAddress();
                        data.setAddress(host);
                        sent.setAddress(host);
                    }
                }
{code}

And then later we attempt to detect if a packet has been sent by someone other than the host that we initiated the conversation with:

{code:title=TFTPClient.java}
                
                // Comply with RFC 783 indication that an error acknowledgement
                // should be sent to originator if unexpected TID or host.
                if (host.equals(received.getAddress()) &&
                        received.getPort() == hostPort)
                {
                    [...]
                }
                else
                {
                    /* Hmmm, someone else is bugging us. Go away please :) */
                    error = new TFTPErrorPacket(received.getAddress(),
                                                received.getPort(),
                                                TFTPErrorPacket.UNKNOWN_TID,
                                                ""Unexpected host or port."");
                    bufferedSend(error);
                    continue _sendPacket;
                }
{code}
","11/Jan/12 02:25;sebb;OK, we're getting closer.

As far as I can tell, the current TFTPClient code already implements the second code block above in both send and receive methods.

As to the first code block above, only the sendFile method has a justStarted variable - receiveFile seems to use lastBlock == 0 to detect the condition. Both methods already get the port from a parameter.

I'm wondering if we are looking at the same code base - are you looking at the trunk version, i.e:

https://svn.apache.org/repos/asf/commons/proper/net/trunk/src/main/java/org/apache/commons/net/tftp/TFTPClient.java","09/Feb/17 16:11;sebb;URL: http://svn.apache.org/viewvc?rev=1782356&view=rev
Log:
NET-414 Apache Commons TFTP does not reject request replies that originate from a control port.

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/tftp/TFTPClient.java
",,,,,,,,,,,,,,,,,,,,

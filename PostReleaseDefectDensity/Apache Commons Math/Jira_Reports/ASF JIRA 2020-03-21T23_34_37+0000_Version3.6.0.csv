Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Due Date,Votes,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocker),Outward issue link (Duplicate),Outward issue link (Reference),Attachment,Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Review Date),Custom field (Reviewer),Custom field (Severity),Custom field (Severity),Custom field (Skill Level),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Tags),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
SimplexOptimizer returns wrong values,MATH-1321,12937840,Bug,Resolved,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Blocker,Not A Problem,,pavol.loffay,pavol.loffay,09/Feb/16 11:36,09/Feb/16 15:57,21/Mar/20 23:34,09/Feb/16 15:57,3.6,,,,,,,0,,"Hello I'm trying to minimize MSE of double exponential smoothing and get optimal parameters alpha and beta. 
https://www.otexts.org/fpp/7/2

During the minimization the output shows values of alpha and beta which differs from alpha, and beta returned from SimplexOptimizer.optimize().

{code:title=output|borderStyle=solid}
...
Nelder MSE = 0.007226473669598979, alpha=0.896283, beta=0.228161
Nelder MSE = 0.0069843320509952005, alpha=0.913694, beta=0.190210 # returned minimum
Nelder MSE = 0.008577342645261695, alpha=0.931617, beta=0.131448
Nelder MSE = 0.00743296945818598, alpha=0.918018, beta=0.166808
Nelder MSE = 0.007818891499431175, alpha=0.936768, beta=0.136053
Nelder MSE = 0.007293932014855209, alpha=0.927010, beta=0.155973
Nelder MSE = 0.007319455298330941, alpha=0.923120, beta=0.178180
Nelder MSE = 0.007110221641945739, alpha=0.921873, beta=0.175281
Nelder MSE = 0.007271067724068611, alpha=0.907713, beta=0.212689
Nelder MSE = 0.007084561548618076, alpha=0.912928, beta=0.197226
Nelder MSE = 0.007072487763137581, alpha=0.903911, beta=0.213540

Nelder -> key = [2.3595947265625, -1.44864501953125], fce minimum= 0.00698433205099520050
{code}

{code:title=Test.java|borderStyle=solid}

@Test
    public void testOptimization() throws IOException {

        int maxEval = 1000;
        int maxIter = 1000;

        // Nelder-Mead Simplex
        SimplexOptimizer nelderSimplexOptimizer = new SimplexOptimizer(0.0001, 0.0001);
        PointValuePair nelderResult = nelderSimplexOptimizer.optimize(
                GoalType.MINIMIZE, new MaxIter(maxIter), new MaxEval(maxEval),
                new InitialGuess(new double[]{0.4, 0.1}), new ObjectiveFunction(optimizationFn(""Nelder"")),
                new NelderMeadSimplex(2));

 System.out.format(""\nNelder (%d eval) -> key = %s, fce minimum= %.20f"", nelderSimplexOptimizer.getEvaluations(),
                Arrays.toString(nelderResult.getKey()), nelderResult.getValue());
}

private MultivariateFunction optimizationFn(String algorithm) {

        final List<DataPoint> testData = metricData.subList(0, 50);
        // func for minimization
        MultivariateFunction multivariateFunction = point -> {

            double alpha = point[0];
            double beta = point[1];

            DoubleExponentialSmoothing doubleExponentialSmoothing = new DoubleExponentialSmoothing(alpha, beta);
            AccuracyStatistics accuracyStatistics = doubleExponentialSmoothing.init(testData);

            System.out.format(""%s MSE = %s, alpha=%f, beta=%f\n"", algorithm, accuracyStatistics.getMse(), alpha, beta);
            return accuracyStatistics.getMse();
        };
        MultivariateFunctionMappingAdapter multivariateFunctionMappingAdapter =
                new MultivariateFunctionMappingAdapter(multivariateFunction,
                        new double[]{0.0, 0.0}, new double[]{1, 1});

        return multivariateFunctionMappingAdapter;
    }
{code}



","Fedora 23,
java version ""1.8.0_51""
Java(TM) SE Runtime Environment (build 1.8.0_51-b16)
Java HotSpot(TM) 64-Bit Server VM (build 25.51-b03, mixed mode)",,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2016-02-09 12:17:16.474,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 09 15:57:37 UTC 2016,,,,,,,"0|i2slvr:",9223372036854775807,,,,,,,,,,,,,,,,"09/Feb/16 12:06;pavol.loffay;[~tn] Could you please look at it? ","09/Feb/16 12:17;erans;In the table above, you refer to the ""returned minimum"".  Do I understand correctly that you imply that *that* value is not correct?  If so, how does one know that it is wrong?","09/Feb/16 12:27;pavol.loffay;Should *SimplexOptimizer.optimize() *return the optimal parameters alpha and beta which are passed as arguments to *MultivariateFunction.value(double[] point)*? 

In my example method *optimize* returns optimal MSE which is  *0.00698433205099520050*  but *key = \[2.3595947265625, -1.44864501953125\]* is not equal to alpha/beta from the debug output of MultivariateFunction.

Then what does the key returned from *optimize* mean ?","09/Feb/16 13:24;erans;bq. \[2.3595947265625, -1.44864501953125\] is not equal to alpha/beta from the debug output

I had missed the point, sorry.

The ""getKey()"", or preferrably ""getPoint()"" since it is more to the point :), should indeed  return the optimal value.

But as you use a {{MultivariateFunctionMappingAdapter}} wrapper, it is expected that the debug output, which shows values of the original function, is not the same as the values of the function that is actually being optimized.
In order to retrieve the values in the original range, you must perform the [inverse transformation|http://commons.apache.org/proper/commons-math/javadocs/api-3.6/org/apache/commons/math3/optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.html]:
{code}
double[] actual = optimizationFn.unboundedToBounded(nelderResult.getKey());
{code}
which hopefully will return the values shown in the output (modulo the possible loss of accuracy that could result from the conversions).","09/Feb/16 15:52;pavol.loffay;Thanks, this is the right solution.","09/Feb/16 15:57;erans;Thanks for the feedback.",,,,,
Percentile computational accuracy issue,MATH-1490,13239825,Bug,Reopened,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,,chtompki,lingchao,lingchao,16/Jun/19 20:17,08/Feb/20 18:01,21/Mar/20 23:34,,3.4,3.4.1,3.5,3.6,3.6.1,,,0,performance,"The percentile method works well on the older versions, e.g., the version before 3.4. However, when I update commons-math to the newer version, there produces a computational accuracy issue. There is a backward compatibility bug behind it.","System: Linux testinglab 4.4.0-131-generic #157~14.04.1-Ubuntu


Java version ""1.8.0_191""
Java(TM) SE Runtime Environment (build 1.8.0_191-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)

 

 ",,,,,,,,,STATISTICS-18,,,"16/Jun/19 20:16;lingchao;BugDemo.java;https://issues.apache.org/jira/secure/attachment/12971913/BugDemo.java",,,1.0,,,,,,,,,,,,,,,,,,,,2019-06-19 18:03:21.356,,,false,,,,,,,,,,Important,,,,,,,,9223372036854775807,,,Sat Aug 24 12:37:09 UTC 2019,,,,,,,"0|z03st4:",9223372036854775807,,,,,,,,,,,,,,,,"19/Jun/19 18:03;virendrasinghrp;The Test case given by you in *#MATH-1491* can be resolved  using delta value *1e-15* but, it is not working in this case!

This is the error I found:

{color:#ff0000}_java.lang.AssertionError: expected:<68.95> but was:<68.94999999999999>_{color}

{color:#333333}*1e-14* should work in this case, but it's not working. While *1e-13* is working{color}","20/Jun/19 17:12;chtompki;I think [~erans] wanted to link this over to STATISTICS-7 too.","20/Jun/19 17:24;chtompki;Test case is different.","22/Jun/19 00:56;erans;bq. There is a backward compatibility bug behind it.

Could you please be more explicit?
What is the expected output?","24/Jun/19 17:33;lingchao;Hi Gilles,

For this test cast, my expected output is 68.95. It works well on the version before 3.4. When I updated the commons-math version to 3.5 or newer version. The output changed to 68.94999999999999.","25/Jun/19 00:24;erans;bq. my expected output is 68.95.

With what precision?","23/Aug/19 16:38;lingchao;Hi Gilles,

 

The output is different when I update it, and it breaks my existing code. I got an incompatible error.

 

Thanks.","23/Aug/19 23:38;erans;Did the CM code change (from when it produced your expected to when it doesn't anymore)?","23/Aug/19 23:44;lingchao;No. I didn't change any code. I just upgrade the commons-math. ","24/Aug/19 00:12;erans;I'm asking that you please check whether the _Commons_ _Math_ (CM) code was modified by the developers team, i.e. the code which you _call_ (to get the number ""68.95"").
","24/Aug/19 12:37;erans;I've done it. So:
{noformat}
$ git diff MATH_3_3 MATH_3_4 -- src/main/java/org/apache/commons/math3/stat/descriptive/rank/Percentile.java
{noformat}
displays a large number of changes between v3.3 and v3.4 (in order to add new features).
 I'm not too surprised that this could entail a 1e-15 relative change of the output. Moreover, the unit tests show an expected level of precision much lower than that (although I admit that it's not clear why).
{quote}it breaks my existing code. I got an incompatible error.
{quote}
Could you elaborate a little?"
Percentile computational accuracy issue,MATH-1491,13239826,Bug,Open,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,,,lingchao,lingchao,16/Jun/19 20:31,20/Jun/19 19:33,21/Mar/20 23:34,,3.4,3.4.1,3.5,3.6,3.6.1,,,0,performance,"Hi, 

The percentile method works well on the older versions, e.g., the version before 3.4. However, when I update commons-math to the newer version, there produces a computational accuracy issue. There is a backward compatibility bug behind it.
","System: Linux testinglab 4.4.0-131-generic #157~14.04.1-Ubuntu


Java version ""1.8.0_191""
Java(TM) SE Runtime Environment (build 1.8.0_191-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)

 

 ",,,,,,,,,STATISTICS-18,,MATH-1490,"16/Jun/19 20:31;lingchao;BugDemo.java;https://issues.apache.org/jira/secure/attachment/12971914/BugDemo.java",,,1.0,,,,,,,,,,,,,,,,,,,,2019-06-19 17:47:09.355,,,false,,,,,,,,,,Important,,,,,,,,9223372036854775807,,,Thu Jun 20 17:13:38 UTC 2019,,,,,,,"0|z03stc:",9223372036854775807,,,,,,,,,,,,,,,,"19/Jun/19 17:47;virendrasinghrp;Hi [~lingchao], I looked into your issue, I checked it on version 2.2 & 3.6 with your Test case. I found that version 2.2 gives the Percentile value = *7.55* while the version 3.6 gives the Percentile value = *7.550000000000001*(for this particular test case).

It can be solved if you add delta/tolerance *1e-15* in assertEquals(expected,actual,delta) method.","20/Jun/19 17:13;chtompki;I meant to link this one [~erans], to STATISTICS-7",,,,,,,,,
"RealVector.Entry is private, cannot be used outside class",MATH-1329,12944700,Bug,Open,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,,,ziqizhang,ziqizhang,25/Feb/16 23:02,01/Jun/18 10:39,21/Mar/20 23:34,,3.6,,,,,4.0,,3,,"RealVector class has two methods that return an iterator to allow iterating through the entries in the vector:

RealVector.sparseIterator()
RealVector.iterator()

Both return Iterator<RealVector.Entry>

However, RealVector.Entry is a private class defined within RealVector. As a result, it is not possible to use the returned iterator to go through the values outside the class RealVector.


",Any,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2018-06-01 10:39:31.132,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jun 01 10:39:31 UTC 2018,,,,,,,"0|i2ts67:",9223372036854775807,,,,,,,,,,,,,,,,"01/Jun/18 10:39;MightyDash;Same problem for OpenMapRealVector",,,,,,,,,,
PolygonsSet sets incorrect value for last vertex in open loops,MATH-1450,13137673,Bug,Resolved,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,,mattjuntunen,mattjuntunen,11/Feb/18 04:41,15/Feb/18 18:57,21/Mar/20 23:34,15/Feb/18 18:57,3.5,3.6,4.0,,,4.0,,0,,"According to the documentation, for open infinite vertex loops returned by the PolygonsSet.getVertices() method, the last two points can be used to determine the direction of the last edge in the loop. However, the current code returns a point from the second-to-last edge. For example, the code below builds a box open on the top. It currently returns the vertex loop [null, \{0; 1}, \{0; 0}, \{1; 0}, \{1; 0}], where the last two vertices are the same point and cannot be used to determine the direction of the last edge. The returned vertex loop should be [null, \{0; 1}, \{0; 0}, \{1; 0}, \{1; 1}].
{code:java}
Cartesian2D v0 = new Cartesian2D(0, 1);
        Cartesian2D v1 = new Cartesian2D(0, 0);
        Cartesian2D v2 = new Cartesian2D(1, 0);
        Cartesian2D v3 = new Cartesian2D(1, 1);

        Line left = new Line(v0, v1, 1e-10);
        Line bottom = new Line(v1, v2, 1e-10);
        Line right = new Line(v2, v3, 1e-10);

        List<SubHyperplane<Euclidean2D>> boundaries = new ArrayList<>();
        boundaries.add(new SubLine(left, new IntervalsSet(left.toSubSpace(v0).getX(), left.toSubSpace(v1).getX(), 1e-10)));
        boundaries.add(new SubLine(bottom, new IntervalsSet(bottom.toSubSpace(v1).getX(), bottom.toSubSpace(v2).getX(), 1e-10)));
        boundaries.add(new SubLine(right, new IntervalsSet(right.toSubSpace(v2).getX(), right.toSubSpace(v3).getX(), 1e-10)));

        PolygonsSet polygon = new PolygonsSet(boundaries, 1e-10);

        polygon.getVertices();{code}
      

 

Pull Request: [https://github.com/apache/commons-math/pull/81]",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2018-02-14 09:14:41.776,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Feb 15 18:57:58 UTC 2018,,,,,,,"0|i3q1ev:",9223372036854775807,,,,,,,,,,,,,,,,"11/Feb/18 04:55;mattjuntunen;The pull request for this is very small. I have more tests around this issue in a branch for MATH-1437 but they all use some new test convenience methods I made. So, I thought I'd just submit the bare minimum here and then include the other tests separately to help with traceability and to avoid overly noisy commits.","14/Feb/18 00:59;mattjuntunen;I have the extra tests for this ready to go on my MATH-1437 branch. Would it be better to submit a single pull request for both of these together?","14/Feb/18 09:14;erans;Fine.  While at it, please add braces to enclose the {{else}} branch. :)
Thanks.","15/Feb/18 01:53;mattjuntunen;I've updated the pull request listed above with the extra tests. I'm not sure what ""else"" branch you're referring to, though.","15/Feb/18 10:15;erans;Merged in ""master"".

bq. I'm not sure what ""else""

Nevermind, there are several other instances of
{code}
if (...) {
    ...
} else if (...) {
    ...
} else {
    ...
}
{code}
which I find difficult to read. I prefer pairs of {{if}} and {{else}}:
{code}
if (...) {
    ...
} else {
    if (...) {
        ...
    } else {
        ...
    }
}
{code}","15/Feb/18 18:57;erans;commit c965f1c7fca41baf313e2234c6328f4082fe9ab2",,,,,
PolygonsSet.getBarycenter() returns incorrect value for empty region,MATH-1449,13136155,Bug,Resolved,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,,mattjuntunen,mattjuntunen,04/Feb/18 19:13,07/Feb/18 00:01,21/Mar/20 23:34,07/Feb/18 00:01,3.6,4.0,,,,4.0,,0,,"The o.a.c.m.geometry.euclidean.twod.PolygonsSet.getBarycenter() method returns the point (0, 0) when the region is empty. It should return (NaN, NaN) since the barycenter does not exist. This is the behavior of IntervalsSet and PolyhedronsSet.

 

Pull request: https://github.com/apache/commons-math/pull/80",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2018-02-04 23:51:46.647,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 07 00:01:15 UTC 2018,,,,,,,"0|i3ps27:",9223372036854775807,,,,,,,,,,,,,,,,"04/Feb/18 23:51;erans;In the check
{code:java}
Assert.assertEquals(Double.POSITIVE_INFINITY, poly.getSize(), 1e-10);
{code}
using a tolerance looks a bit strange.  Shouldn't it rather be
{code:java}
Assert.assertTrue(Double.isInfinite(poly.getSize()));
{code}
?

Also, statements such as
{code:java}
Assert.assertEquals(false, poly.isEmpty());
Assert.assertEquals(true, poly.isFull());
{code}
would read better as
{code:java}
Assert.assertFalse(poly.isEmpty());
Assert.assertTrue(poly.isFull());
{code}","05/Feb/18 01:43;mattjuntunen;Yes, I suppose it does look kind of strange with the tolerance. I didn't use Double.isInfinite() because I wanted to distinguish between positive and negative infinity. The tolerance value is just there to keep Assert happy. I could rewrite it as 

 
{code:java}
Assert.assertTrue(Double.POSITIVE_INFINITY == poly.getSize());
{code}
to make it clearer if needed.

Also, I disagree that the boolean statements read better with the assertTrue/False methods in this case. When asserting a method return value, I prefer to have the expected return value listed explicitly rather than encoded in the name of the assertion method. I think it stands out better that way. But, this is just a preference thing and really makes no difference otherwise.

Let me know if you'd like me to make either of these changes. Note that I'm pretty sure I used both of the syntaxes you mentioned above all over my last batch of unit test changes, so, if I do change these, I should probably update the other tests as well to match.","05/Feb/18 10:59;erans;bq. I didn't use Double.isInfinite() because I wanted to distinguish between positive and negative infinity.

I thought so.
Since these are unit tests, performance is not paramount, so I'd suggest to use 2 assertions:
{code}
Assert.assertTrue(poly.getSize() > 0);
Assert.assertTrue(Double.isInfinite(poly.getSize()));
{code}
as they state different kinds of expectations.

bq. I disagree that the boolean statements read better

I guess that it's a matter of taste.
But if there is a shorter method, if it is customarily used and there is nothing against it (except taste), it is better to follow the same convention everywhere. And change what does not, when spotted.

I agree that these are nit-picks but they are in order to avoid subsequent ""flip-flop"" changes by people with different tastes. ;) Thanks for your understanding.","06/Feb/18 02:04;mattjuntunen;Sounds good. I just updated the pull request with those changes. I'll include updates to other tests in future commits on MATH-1437.","07/Feb/18 00:01;erans;Merged in commit cfe0502990a1e61d5ae7c744b119e8c330c37c0c (""master"" branch).",,,,,,
PolygonsSet does not handle intersecting infinite lines,MATH-1447,13135675,Bug,Resolved,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,,mattjuntunen,mattjuntunen,02/Feb/18 03:55,02/Feb/18 16:54,21/Mar/20 23:34,02/Feb/18 16:54,3.5,3.6,4.0,,,4.0,,0,,"When created from boundaries consisting of two intersecting infinite lines, PolygonsSet.getVertices() throws an IndexOutOfBoundsException.

{{Ex:}}
 {{Line line1 = new Line(new Cartesian2D(0, 0), new Cartesian2D(1, 1), 1e-10);}}
 {{Line line2 = new Line(new Cartesian2D(1, -1), new Cartesian2D(0, 0), 1e-10);}}

{{List<SubHyperplane<Euclidean2D>> boundaries = new ArrayList<>();}}
 {{boundaries.add(line1.wholeHyperplane());}}
 {{boundaries.add(line2.wholeHyperplane());}}

{{PolygonsSet poly = new PolygonsSet(boundaries, 1e-10);}}

{{poly.getVertices(); // throws exception}}

 

Pull request: https://github.com/apache/commons-math/pull/78",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2018-02-02 16:54:36.056,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Feb 02 16:54:36 UTC 2018,,,,,,,"0|i3pp3j:",9223372036854775807,,,,,,,,,,,,,,,,"02/Feb/18 16:54;erans;commit a37dcb93bed20ee302526473a9653f6cb5ae51a1",,,,,,,,,,
PolyhedronsSet.getSize() is incorrect for full space,MATH-1442,13133256,Bug,Resolved,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,,mattjuntunen,mattjuntunen,24/Jan/18 02:54,26/Jan/18 00:04,21/Mar/20 23:34,26/Jan/18 00:04,3.5,3.6,4.0,,,4.0,,0,,"The getSize() method in PolyhedronsSet returns 0 for instances representing the full space. It should return Double.POSITIVE_INFINITY.

{{Ex:}}

{{PolyhedronsSet poly = new PolyhedronsSet(1e-10);}}

{{poly.isFull(); // returns true}}

{{poly.getSize(); // returns 0.0}}

 

Pull request: https://github.com/apache/commons-math/pull/75",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2018-01-24 13:56:03.179,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Jan 26 00:04:17 UTC 2018,,,,,,,"0|i3pa7j:",9223372036854775807,,,,,,,,,,,,,,,,"24/Jan/18 13:56;erans;Thanks for the improvements.

Could you please add Javadoc to all fields and methods?  Thanks.
","25/Jan/18 03:15;mattjuntunen;No problem. I added them on the same pull request.","26/Jan/18 00:04;erans;commit 3ea45970dbe94643fb57ce7713dc1c624526853b",,,,,,,,
PolygonsSet Infinite Lines and SubOrientedPoint Tolerance Issues,MATH-1436,13126131,Bug,Resolved,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,,mattjuntunen,mattjuntunen,20/Dec/17 03:26,10/Jan/18 14:23,21/Mar/20 23:34,25/Dec/17 09:52,3.5,3.6,3.6.1,4.0,,4.0,,0,,"These are two separate issues that I found while using the partitioning code from 3.5 to work with complex solid models. The issues are:
1. org.apache.commons.math[34].geometry.euclidean.oned.SubOrientedPoint uses a hardcoded tolerance of 1.0e-10 instead of the tolerance from the parent hyperplane. This causes issues when working with a tolerance other than the default.
2. org.apache.commons.math[34].geometry.euclidean.twod.PolygonsSet fails on infinite line segments. An IndexOutOfBoundsException is thrown when a PolygonsSet is created with a single infinite SubLine as a boundary and a NullPointerException is thrown when one is created with a mix of finite and finite boundaries.
I will be attaching a pull request shortly with fixes and unit tests.

UPDATE:
-Pull request for v4.0: [https://github.com/apache/commons-math/pull/70]-
-Pull request for v3.6.x: [https://github.com/apache/commons-math/pull/71]- (removed; no future releases planned for v3.x)

UPDATE [2017-12-23]:
Split initial pull request into two separate ones:
- SubOrientedPoint changes: [https://github.com/apache/commons-math/pull/72]
- PolygonsSet changes: [https://github.com/apache/commons-math/pull/73 ]",,,,,,,,,,,MATH-1432,,,,,0.0,,,,,,,,,,,,,,,,,,,,2017-12-21 15:15:43.926,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Dec 25 09:52:20 UTC 2017,,,,,,,"0|i3o3sn:",9223372036854775807,,,,,,,,,,,,,,,,"21/Dec/17 15:15;erans;Hello.

Thank you for the report and fixes.

bq. These are two separate issues

Would you mind making two separate patches to help tracking of the changes? Thanks.
Also, as I'm not knowledgeable in this part of the codebase, could you perhaps write a more elaborate comment to describe the new statements (e.g. around line 850 in ""PolygonsSet.java"").

bq. Pull request for v3.6.x

No release based on the 3.x branch is planned anymore.
A few weeks ago, there was a discussion (on the ""dev"" ML, see [archive|http://markmail.org/message/75vuyhzblfadc5op]) to move the contents of package {{org.apache.commons.math4.geometry}} into a component of its own (i.e. ""Commons Geometry"") as part of a major overhaul towards modularizing ""Commons Math"" which, in the current circumstances, is not maintainable as a monolithic library.
Work is underway: components [""Commons RNG""|https://commons.apache.org/rng] and [""Commons Numbers""|https://commons.apache.org/numbers] have already been created.
As a user, your input is important; and you are most welcome to help getting there.","22/Dec/17 03:26;mattjuntunen;Hi. Thanks for the feedback. When you say to create two separate patches, do you mean to close this issue and create two new ones with separate pull requests or just to create two pull requests for this one issue?

That's good to know about the 3.x branch. I'll remove that pull request.

Reading the mailing list thread you posted was quite informative. That gave me a much better picture for the current state of the project. I'm using the geometry code from v3.6.1 quite a bit in my current project and I keep running up against issues and things I'd like to update (specifically in the partitioning package). So, I'd be very interested in helping out if this code is going to be refactored at all.","22/Dec/17 11:03;erans;bq. do you mean to close this issue and create two new ones with separate pull requests

For future work, one report per issue is the best option.

bq. just to create two pull requests for this one issue

That'll be fine but please make the log message (for each issue) a little more explicit than ""adding fixes"". ;)

bq. I'm using the geometry code from v3.6.1 quite a bit in my current project \[...\] So, I'd be very interested in helping out

Currently, you're probably the one with the most expertise with this part of the library; thanks a lot for the offer.","23/Dec/17 19:28;mattjuntunen;I split the pull request in two and added the new links in the issue description. There's also a few more unit tests and more comments. And better commit messages, too :-)

Let me know if this will work or not. Thanks.","25/Dec/17 09:52;erans;Merged in ""master"" (with tabs removed).",,,,,,
BaseMultiStartMultivariateOptimizer.doOptimize() swallows exceptions,MATH-1433,13106975,Bug,Open,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,,,crowlogic,crowlogic,04/Oct/17 15:49,04/Oct/17 18:11,21/Mar/20 23:34,,3.6,,,,,,,0,easyfix,"it took me a while to figure out that the random vector generator was throwing an exception that was being swallowed. that should never happen
","        // Multi-start loop.
        for (int i = 0; i < starts; i++) {
            // CHECKSTYLE: stop IllegalCatch
            try {
                // Decrease number of allowed evaluations.
                optimData[maxEvalIndex] = new MaxEval(maxEval - totalEvaluations);
                // New start value.
                double[] s = null;
                if (i == 0) {
                    s = startPoint;
                } else {
                    int attempts = 0;
                    while (s == null) {
                        if (attempts++ >= getMaxEvaluations()) {
                            throw new TooManyEvaluationsException(getMaxEvaluations());
                        }
                        s = generator.nextVector();
                        for (int k = 0; s != null && k < s.length; ++k) {
                            if ((min != null && s[k] < min[k]) || (max != null && s[k] > max[k])) {
                                // reject the vector
                                s = null;
                            }
                        }
                    }
                }
                optimData[initialGuessIndex] = new InitialGuess(s);
                // Optimize.
                final PAIR result = optimizer.optimize(optimData);
                store(result);
            } catch (RuntimeException mue) {
                lastException = mue;
            }
            // CHECKSTYLE: resume IllegalCatch

            totalEvaluations += optimizer.getEvaluations();
        }",,,,,,,,,,,,"04/Oct/17 18:11;crowlogic;BaseMultiStartMultivariateOptimizerTest.java;https://issues.apache.org/jira/secure/attachment/12890405/BaseMultiStartMultivariateOptimizerTest.java",,,1.0,,,,,,,,,,,,,,,,,,,,2017-10-04 16:05:34.982,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Oct 04 18:11:16 UTC 2017,,,,,,,"0|i3kvfb:",9223372036854775807,,,,,,,,,,,,,,,,"04/Oct/17 16:05;erans;Could you provide a fully working code that illustrates the issue (e.g. a ""Junit"" test)?

The exceptions are swallowed on the assumption that they could only be raised by a bad starting point.  You are right that it was sloppy to catch {{RuntimeException}} rather than more specific types.

But why is the RNG throwing an exception?  I'd guess that it should not happen...
","04/Oct/17 16:10;crowlogic;Sure thing.. I'll try to get to it soon. It was a bug in my random 
vector guess generating code that just took a while to track down. The 
code as is, just ignores it as a ""bad guess"" and ends up returning the

initial starting point results and only throws the exception if the 
initial starting point isn't there. I'm thinking something like an 
exception in the initial guess should go ahead and cause the entire 
optimize() call to fail since

one would think that the caller always wants to know something is messed 
up first.


","04/Oct/17 18:11;crowlogic;test case",,,,,,,,
OLS/GLS Regression sufficient data test is overly aggressive when there is no intercept term,MATH-1392,13020308,Bug,Open,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,,,psteitz,psteitz,12/Nov/16 22:05,12/Apr/17 00:01,21/Mar/20 23:34,,3.6,3.6.1,,,,4.0,,0,,"See https://github.com/Hipparchus-Math/hipparchus/issues/13
for full description and patch.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,2016-11-12 22:05:08.0,,,,,,,"0|i3699b:",9223372036854775807,,,,,,,,,,,,,,,,,,,,,,,,,,
MullerSolver returns value that is out of bounds,MATH-1333,12947879,Bug,Open,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,,,cpmeister,cpmeister,08/Mar/16 01:43,12/Apr/17 00:00,21/Mar/20 23:34,,3.6,,,,,4.0,,0,,"Not sure what went wrong here but in a bracket of [20,100] I got back -19.9!",,,,,,,,,,,,,"08/Mar/16 02:08;cpmeister;BrokenMuller.java;https://issues.apache.org/jira/secure/attachment/12791897/BrokenMuller.java","09/Mar/16 19:23;cpmeister;BrokenMuller2.java;https://issues.apache.org/jira/secure/attachment/12792321/BrokenMuller2.java",,2.0,,,,,,,,,,,,,,,,,,,,2016-03-09 15:59:53.269,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Fri Mar 11 23:12:00 UTC 2016,,,,,,,"0|i2ub8f:",9223372036854775807,,,,,,,,,,,,,,,,"09/Mar/16 15:59;erans;Confirmed.
Thanks for the report.

I've created a branch ""feature-MATH-1333"" on the repository with your example as a unit test (that is currently failing).

The problem is already present at line 161, where a comment indicates that ""x"" will be between ""x0"" and ""x2"" but a print shows that it is not:
{noformat}
x=64.25602375943637 x0=66.68753568924203 x2=100.04173804515072
{noformat}

Class {{MullerSolver2}} produces the expected answer.
 
The documentation (of these two classes) is unclear as to whether the code is strictly implementing the algorithm from the mentioned reference or if there is an adaptation.  The latter seems plausible from the comment:
{noformat}
Muller's original method would have function evaluation at complex point.
Since our f(x) is real, we have to find ways to avoid that.
{noformat}

In {{MullerSolver}}:
{noformat}
            // Muller's method employs quadratic interpolation through
            // x0, x1, x2 and x is the zero of the interpolating parabola.
{noformat}
In {{MullerSolver2}}:
{noformat}
            // quadratic interpolation through x0, x1, x2
{noformat}

Hence, at first sight, the interpolation step seems to be the same.
If the code duplication is confirmed, we should fix that first (and it will probably also fix the original problem).
","09/Mar/16 18:36;cpmeister;I would like to note that I have found the exact same out of bounds issue with MullerSolver2, but with a different test case than the one I provided. I'll see if I can provide a failing test case for MullerSover2 so you can add it to your unit tests as well.","09/Mar/16 19:23;cpmeister;I just attached BrokenMuller2.java which shows the same out of bounds issue in MullerSolver2.","09/Mar/16 22:21;erans;Thanks.  Unit test added to the ""feature-MATH-1333"" branch"".","10/Mar/16 17:57;erans;Hi Connor.

You are most welcome to provide a patch for fixing the issue.
I'd suggest to first create a class (and unit tests) for performing the quadratic interpolation step involved in both classes.

Thanks in advance for your help. :)

And you are welcome to ask questions here or on the ML if you are unsure of how to proceed...
","11/Mar/16 03:10;cpmeister;So it looks like MullerSolver was failing due to the solution being right next to one of the the bracketing values.
The strict test for sequential ordering of x0,x1, and x2 causes problems when x1==x2.
I have a fix for that particular problem in MullerSolver but the bounds issue for MullerSolver2 is an entirely different issue.
After analysis it looks like MullerSolver2's lack of bracketing backfires on it spectacularly as shown in BrokenMuller2.java.
According to the documentation: 
{noformat}
Because the interval may not be bracketing, the bisection alternative is 
not applicable here. However in practice our treatment usually works 
well, especially near real zeroes where the imaginary part of the complex 
approximation is often negligible.
{noformat}
The keywords are _usually works well_. It seems that MullerSolver2 has known limitations to it's algorithm and IMO it looks like a bunch of bandaids applied to a flawed design. I have no problems with adding yet another bandaid but I just want to know your opinion on the subject and the history behind that class.

PS. I'm not trying to come off as rude I am just deeply concerned.","11/Mar/16 11:36;erans;bq.  usually works well

;)
It can happen that an algorithm is not appropriate for certain cases.
MATH-631 might be an interesting (but long!) read, as this could be a similar issue: an implementation's weakness is not detected at the right place, leading to a result that is in blatant contradiction with the documentation.

bq. I have no problems with adding yet another bandaid

A relatively important point is to be clear about whether the classes implement a *reference algorithm*. The more so if an ""accommodation"" is sometimes the cause for failing in totally unexpected ways.

Whether the implementations are ""standard"" or not, if it is possible to detect the root cause of the problem (and prevent such silly behaviour as you have reported), then IMO it should be appropriately dealt with (raising an exception that states the limitation of the algorithm, or put the search back on track).

bq. I'm not trying to come off as rude I am just deeply concerned.

You can be, I agree.  But hopefully, there will be a lesson drawn from MATH-631...
Could you please post a message to the ""dev"" ML?
","11/Mar/16 23:12;cpmeister;Well MATH-163 was certainly an interesting read. :)
I posted to the ML as you requested hopefully that should allow more people to be part of the discussion.",,,
Negative integer seed for MersenneTwister is not working.,MATH-1322,12937857,Bug,Resolved,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,,kawajoe,kawajoe,09/Feb/16 13:13,23/Apr/16 01:01,21/Mar/20 23:34,23/Apr/16 01:01,3.6,,,,,,,0,patch,"MersenneTwister.setSeed(int seed) has a bug.

If seed is negative, longMT also becomes negative.
First 32 bits are filled by 0xFFFFFFFF.
But it should be positive. First 32 bits should be filled by 0x00000000.

Ex) Integer -1 is 0xffffffff. 
Long -1 is 0xffffffffffffffff.
Long 0xffffffff is 4294967295.

I created simple patch. 



",,,,,,,,,,,,,"09/Feb/16 13:13;kawajoe;MersenneTwister.patch;https://issues.apache.org/jira/secure/attachment/12787064/MersenneTwister.patch",,,1.0,,,,,,,,,,,,,,,,,,,,2016-02-09 13:45:26.292,,,false,,,,,,,,,,Patch,,,,,,,,9223372036854775807,,,Sat Apr 23 01:01:23 UTC 2016,,,,,,,"0|i2slzj:",9223372036854775807,,,,,,,,,,,,,,,,"09/Feb/16 13:13;kawajoe;Patch to fix bug.","09/Feb/16 13:45;erans;bq. If seed is negative, longMT also becomes negative.

I'd rather expect that both types result in the same value.
Why is it a problem?

The documentation does not seem to imply any constraint on the argument.

Do I understand correctly that if your patch were applied, each of the following calls would result in the generator being in a different state:
{code}
rng.setSeed(-1);
rng.setSeed((long) -1);
{code}
?","09/Feb/16 16:03;kawajoe;My patch is for setSeed(int seed), there is no problem in setSeed(long seed).
Actually, I compared apache MersenneTwiter with C++ mt19937 which is included in random.
And apache MersenneTwister generated different random value from C++ mt19937 only if seed is negative.

The reason for the difference is that longMT is 0xffffffffffffffff.

{code:title=MersenneTwister.java|borderStyle=solid}
    public void setSeed(int seed) {
        // we use a long masked by 0xffffffffL as a poor man unsigned int
        long longMT = seed;

// longMT is 0xffffffffffffffff, but it is 0x00000000ffffffff in C++ or other language implementation.

        // NB: unlike original C code, we are working with java longs, the cast below makes masking unnecessary
        mt[0]= (int) longMT;
        for (mti = 1; mti < N; ++mti) {
            // See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier.
            // initializer from the 2002-01-09 C version by Makoto Matsumoto
            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;
            mt[mti]= (int) longMT;
        }

        clear(); // Clear normal deviate cache
    }
{code}




Followings are the samples.

{code:title=Sample.java|borderStyle=solid}
MersenneTwister rng = new MersenneTwister();
rng.setSeed((int) -1);
// Without patch, ""-931718226"" is output.
// After applying patch, ""419326371"" is output.
System.out.println(rng.nextInt());
{code}


{code:title=CppSample.cpp|borderStyle=solid}
#include <iostream>
#include <random>

int main()
{
  std::mt19937 mt(0xFFFFFFFF);
  // 419326371 is displayed
  std::cout << mt() << std::endl;

  std::mt19937 mt1(-1);
  // 419326371 is displayed
  std::cout << mt() << std::endl;
}
{code}
","09/Feb/16 16:21;erans;With the code you wrote above:
{code}
MersenneTwister rng = new MersenneTwister();
rng.setSeed((int) -1);
// Without patch, ""-931718226"" is output.
// After applying patch, ""419326371"" is output.
System.out.println(rng.nextInt());
{code}
what is the output of
{code}
rng.setSeed((long) -1);
{code}
# in the current  code and
# with the patch applied

?
","09/Feb/16 16:33;kawajoe;There is no impact to setSeed(long seed).

{code:borderStyle=solid}
MersenneTwister rng = new MersenneTwister();
rng.setSeed((long) -1);
// 1. Without patch, ""93740670"" is displayed.
// 2. After applying patch, ""93740670"" is displayed. Same value.
System.out.println(rng.nextInt());
{code}

","09/Feb/16 17:36;erans;bq. After applying patch, ""93740670"" is displayed. Same value.

What worries me (even as your patch is applied) is that the same seed (namely -1) results in different states, whether it happens to be cast to an ""int"":
{code}
rng.setSeed((int) -1);
int n = rng.nextInt(); // n == 419326371
{code}
or cast to a ""long"":
{code}
rng.setSeed((long) -1);
int n = rng.nextInt(); // n == 93740670
{code}

Do you see what I mean?
This is one of the (IMO) deficiencies which issue MATH-1319 aims at making disappear (by defining a _unique_ way to set the seed).
In this case, IIUC, the problem is having overloaded {{setSeed}} to take an {{int}} argument although to be faithful to the original code, it must be interpreted as the low-order bits of a {{long}}.

Since the principle of specifying a seed is intended for reproducing a sequence, bluntly changing the code is not an option.

I'd rather imagine that {{setSeed(int)}} must be deprecated, and a conversion method must be provided so that {{setSeed(convertToLong((int) seed))}} results in the same state as the current {{setSeed((int) seed)}}.","09/Feb/16 21:41;tn;+1 for the patch. It does the same as the stdc++11 impl, boost and the original c version of Mersenne Twister.","23/Apr/16 01:01;erans;This class is superseded by the new API provided in package {{o.a.c.m.rng}} which you are welcome to test.  See MATH-1335.",,,
ODE failure with close events,MATH-1342,12950877,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,,evanward1,evanward1,16/Mar/16 15:42,23/Apr/16 00:32,21/Mar/20 23:34,23/Apr/16 00:31,3.6,,,,,3.6.1,,0,,ODE integration crashes if two events are closer to each other than the root finder's tolerance.,,7200,7200,,0%,7200,7200,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2016-04-23 00:32:32.907,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Apr 23 00:32:32 UTC 2016,,,,,,,"0|i2urs7:",9223372036854775807,,,,,,,,,,,,,,,,"16/Mar/16 20:23;evanward1;fixed in 7a8dc00","17/Mar/16 12:59;evanward1;fixed in 5238b00 on 3.X","23/Apr/16 00:32;erans;Code was released in CM v3.6.1.",,,,,,,,
IRR NaN When it should give back a value,MATH-1514,13284658,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Minor,Invalid,,Fawaz,Fawaz,11/Feb/20 19:45,11/Feb/20 21:27,21/Mar/20 23:34,11/Feb/20 21:27,3.6,,,,,,,0,,"I have created a sample of when the issue occurs. IRR in apache documentation says that covers ""20 tries"" as shown here [https://poi.apache.org/apidocs/dev/org/apache/poi/ss/formula/functions/Irr.html] 

which is identical to Microsoft Excel [https://support.office.com/en-us/article/irr-function-64925eaa-9988-495b-b290-3ad0c163c1bc]

This indicate that the result is the same between the two; however, in the case of apache poi, it seems that the result is returned as NaN (while excel returns the actual result).",,,,,,,,,,,,,"11/Feb/20 20:15;Fawaz;TestIrr.java;https://issues.apache.org/jira/secure/attachment/12993183/TestIrr.java",,,1.0,,,,,,,,,,,,,,,,,,,,2020-02-11 20:03:14.459,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 11 21:27:41 UTC 2020,,,,,,,"0|z0bdw8:",9223372036854775807,,,,,,,,,,,,,,,,"11/Feb/20 20:03;erans;I'm not sure I undrestand: Do you report an issue with code from
https://poi.apache.org/
?
If so, this is not the appropriate issue-tracking project.

 ","11/Feb/20 21:27;Fawaz;Wrong forum.",,,,,,,,,
"Wrong equation in Javadoc of Percentile.EstimationType, LEGACY, variable estimation",MATH-1347,12951984,Bug,Open,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Trivial,,,richard.brunauer@salzburgresearch.at,richard.brunauer@salzburgresearch.at,21/Mar/16 10:16,19/Jun/19 14:16,21/Mar/20 23:34,,3.6,,,,,4.0,,0,documentation,"The Javadoc entry for Enum Percentile.EstimationType LAGACY uses a wrong equation for variable estimate. 

Explaination in version 3.0, 3.6 source code and 3.6 semantics do an interpolation between two values. The quation for variable estimation has only a ceiling function. This does not match. ",Windows 7,3600,3600,,0%,3600,3600,,,STATISTICS-18,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2016-03-21 10:43:35.053,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Mar 21 11:59:28 UTC 2016,,,,,,,"0|i2uy5b:",9223372036854775807,,,,,,,,,,,,,,,,"21/Mar/16 10:43;erans;Could you please provide a unit test in order to clarify the issue?","21/Mar/16 11:59;richard.brunauer@salzburgresearch.at;No, I can’t provide a junit test. The mistake is in Javadoc and not in Java code. The results are, for my opinion, correct. 

I guess that the explanation is correct but the equation does not represent the explanation’s semantics. Explanation and expression are semantically not equal! 

Explaination in Percentile for the default/legacy case: “Else let lower be the element in position floor(pos) in the array and let upper be the next element in the array. Return lower + d * (upper - lower)”

Equation in Percentile.EstimationType: x[ceil(h - 1/2)]

I would expect the same equation for variable “estimate” as in R_6. Furthermore, the Percentile.EstimationType “R_6” and “LAGACY” is almost a code copy (compare method index()).Is this intended? 

To see the mistake:
https://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math3/stat/descriptive/rank/Percentile.EstimationType.html
section: Enum Constant Detail
enum: LEGACY 
",,,,,,,,,

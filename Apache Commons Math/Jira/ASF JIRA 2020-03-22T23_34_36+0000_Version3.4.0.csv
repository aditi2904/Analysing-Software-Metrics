Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Fix Version/s,Due Date,Votes,Labels,Description,Environment,Watchers,Watchers,Watchers,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Blocker),Outward issue link (Duplicate),Outward issue link (Reference),Attachment,Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Flags),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Review Date),Custom field (Reviewer),Custom field (Severity),Custom field (Severity),Custom field (Skill Level),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Tags),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
Percentile computational accuracy issue,MATH-1490,13239825,Bug,Reopened,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,,chtompki,lingchao,lingchao,16/Jun/19 20:17,08/Feb/20 18:01,22/Mar/20 23:34,,3.4,3.4.1,3.5,3.6,3.6.1,,,,0,performance,"The percentile method works well on the older versions, e.g., the version before 3.4. However, when I update commons-math to the newer version, there produces a computational accuracy issue. There is a backward compatibility bug behind it.","System: Linux testinglab 4.4.0-131-generic #157~14.04.1-Ubuntu


Java version ""1.8.0_191""
Java(TM) SE Runtime Environment (build 1.8.0_191-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)

 

 ",chtompki,lingchao,virendrasinghrp,,,,,,,,,STATISTICS-18,,,"16/Jun/19 20:16;lingchao;BugDemo.java;https://issues.apache.org/jira/secure/attachment/12971913/BugDemo.java",,,1.0,,,,,,,,,,,,,,,,,,,,2019-06-19 18:03:21.356,,,false,,,,,,,,,,Important,,,,,,,,9223372036854775807,,,Sat Aug 24 12:37:09 UTC 2019,,,,,,,"0|z03st4:",9223372036854775807,,,,,,,,,,,,,,,,"19/Jun/19 18:03;virendrasinghrp;The Test case given by you in *#MATH-1491* can be resolved  using delta value *1e-15* but, it is not working in this case!

This is the error I found:

{color:#ff0000}_java.lang.AssertionError: expected:<68.95> but was:<68.94999999999999>_{color}

{color:#333333}*1e-14* should work in this case, but it's not working. While *1e-13* is working{color}","20/Jun/19 17:12;chtompki;I think [~erans] wanted to link this over to STATISTICS-7 too.","20/Jun/19 17:24;chtompki;Test case is different.","22/Jun/19 00:56;erans;bq. There is a backward compatibility bug behind it.

Could you please be more explicit?
What is the expected output?","24/Jun/19 17:33;lingchao;Hi Gilles,

For this test cast, my expected output is 68.95. It works well on the version before 3.4. When I updated the commons-math version to 3.5 or newer version. The output changed to 68.94999999999999.","25/Jun/19 00:24;erans;bq. my expected output is 68.95.

With what precision?","23/Aug/19 16:38;lingchao;Hi Gilles,

 

The output is different when I update it, and it breaks my existing code. I got an incompatible error.

 

Thanks.","23/Aug/19 23:38;erans;Did the CM code change (from when it produced your expected to when it doesn't anymore)?","23/Aug/19 23:44;lingchao;No. I didn't change any code. I just upgrade the commons-math. ","24/Aug/19 00:12;erans;I'm asking that you please check whether the _Commons_ _Math_ (CM) code was modified by the developers team, i.e. the code which you _call_ (to get the number ""68.95"").
","24/Aug/19 12:37;erans;I've done it. So:
{noformat}
$ git diff MATH_3_3 MATH_3_4 -- src/main/java/org/apache/commons/math3/stat/descriptive/rank/Percentile.java
{noformat}
displays a large number of changes between v3.3 and v3.4 (in order to add new features).
 I'm not too surprised that this could entail a 1e-15 relative change of the output. Moreover, the unit tests show an expected level of precision much lower than that (although I admit that it's not clear why).
{quote}it breaks my existing code. I got an incompatible error.
{quote}
Could you elaborate a little?"
Percentile computational accuracy issue,MATH-1491,13239826,Bug,Open,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,,,lingchao,lingchao,16/Jun/19 20:31,20/Jun/19 19:33,22/Mar/20 23:34,,3.4,3.4.1,3.5,3.6,3.6.1,,,,0,performance,"Hi, 

The percentile method works well on the older versions, e.g., the version before 3.4. However, when I update commons-math to the newer version, there produces a computational accuracy issue. There is a backward compatibility bug behind it.
","System: Linux testinglab 4.4.0-131-generic #157~14.04.1-Ubuntu


Java version ""1.8.0_191""
Java(TM) SE Runtime Environment (build 1.8.0_191-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)

 

 ",chtompki,lingchao,virendrasinghrp,,,,,,,,,STATISTICS-18,,MATH-1490,"16/Jun/19 20:31;lingchao;BugDemo.java;https://issues.apache.org/jira/secure/attachment/12971914/BugDemo.java",,,1.0,,,,,,,,,,,,,,,,,,,,2019-06-19 17:47:09.355,,,false,,,,,,,,,,Important,,,,,,,,9223372036854775807,,,Thu Jun 20 17:13:38 UTC 2019,,,,,,,"0|z03stc:",9223372036854775807,,,,,,,,,,,,,,,,"19/Jun/19 17:47;virendrasinghrp;Hi [~lingchao], I looked into your issue, I checked it on version 2.2 & 3.6 with your Test case. I found that version 2.2 gives the Percentile value = *7.55* while the version 3.6 gives the Percentile value = *7.550000000000001*(for this particular test case).

It can be solved if you add delta/tolerance *1e-15* in assertEquals(expected,actual,delta) method.","20/Jun/19 17:13;chtompki;I meant to link this one [~erans], to STATISTICS-7",,,,,,,,,
ResizableDoubleArray does not work with double array of size 1,MATH-1252,12848722,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,,johnbay,johnbay,23/Jul/15 22:24,25/Jan/16 20:28,22/Mar/20 23:34,24/Jul/15 00:38,3.4,3.4.1,3.5,,,3.6,4.0,,0,,"When attempting to create a ResizableDoubleArray with an array of a single value (e.g. {4.0}), the constructor creates an internal array with 16 entries that are all 0.0

Bug looks like it might be on line 414 of ResizableDoubleArray.java:

        if (data != null && data.length > 1) {
",,johnbay,luc,psteitz,600,600,,0%,600,600,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2015-07-24 00:38:29.22,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 25 20:28:02 UTC 2016,,,,,,,"0|i2hv7j:",9223372036854775807,,,,,,,,,,,,,,,,"24/Jul/15 00:38;psteitz;Many thanks for reporting this and pinpointing the cause.

Fixed in 
3.x:  9f148d41e0cb5839e8680bd3b4c4bc21510e444b
master: 09fe956a62e19c160d0093f8fecf254c2bb6f0cb","25/Jan/16 20:28;luc;Closing all resolved issues that were included in 3.6 release.",,,,,,,,,
DescriptiveStatistics methods return NaN for operations on arrays with single items,MATH-1280,12903012,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Duplicate,,mgaspar,mgaspar,07/Oct/15 14:29,25/Jan/16 20:27,22/Mar/20 23:34,07/Oct/15 19:31,3.4,,,,,3.6,4.0,,0,,"1. Create a DescriptiveStatistics object passing an array with only one value
2. Call getMean() method
3. Call getStandardDeviation() method
4. Both return NaN",,erans,luc,mgaspar,,,,,,,,,,MATH-1252,,,,,0.0,,,,,,,,,,,,,,,,,,,,2015-10-07 15:26:45.047,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 25 20:27:54 UTC 2016,,,,,,,"0|i2moxz:",9223372036854775807,,,,,,,,,,,,,,,,"07/Oct/15 15:26;erans;I cannot reproduce this behaviour on the development code (for upcoming versions 3.6 and 4.0).

Please let us know whether the bug exists on version 3.5 (current supported version):
  http://commons.apache.org/proper/commons-math/download_math.cgi
","07/Oct/15 15:56;mgaspar;Version 3.5 is also affected. I will download version 3.6 and test it.","07/Oct/15 19:31;tn;This is a duplicate of the referenced issue and has already been fixed.","07/Oct/15 19:37;mgaspar;Thanks, Thomas. ","25/Jan/16 20:27;luc;Closing all resolved issues that were included in 3.6 release.",,,,,,
getKernel fails for buckets with only multiple instances of the same value in random.EmpiricalDistribution,MATH-1203,12776213,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,,kdkavanagh,kdkavanagh,19/Feb/15 17:46,19/Jun/15 08:21,22/Mar/20 23:34,14/Apr/15 12:18,3.4,3.4.1,,,,3.5,4.0,,0,,"After loading a set of values into an EmpericalDistribution, assume that there's a case where a single bin ONLY contains multiple instances of the same value.  In this case the standard deviation will equal zero.  This will fail when getKernel attempts to create a NormalDistribution.  The other case where stddev=0 is when there is only a single value in the bin, and this is handled by returning a ConstantRealDistribution rather than a NormalDistrbution.

See: https://issues.apache.org/jira/browse/MATH-984",,kdkavanagh,luc,psteitz,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2015-03-08 21:28:14.734,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Apr 18 09:28:24 UTC 2015,,,,,,,"0|i25th3:",9223372036854775807,,,,,,,,,,,,,,,,"08/Mar/15 21:28;tn;I have seen that Phil fixed this issue, but there is still something wrong in case a bin has a constant real distribution as kernel:

{code}
        final double[] data = {0, 0, 1, 1};
        EmpiricalDistribution dist = new EmpiricalDistribution(2);
        dist.load(data);

        System.out.println(dist.cumulativeProbability(0));
{code}

Will output NaN. I have seen this while taking a look, but did not yet have the time to further dig into it.","08/Mar/15 22:21;psteitz;Thanks, Thomas!  That looks like a different problem.  Looking into it...  Leaving this open for now.","09/Mar/15 00:06;psteitz;Fixed in 59912a0724200beef63df2d74497165c3d1081bf for 3.x
4aa4c6d31f98d8cd80ccbcf99ded77bfc6de25c5 for 4.0","10/Mar/15 08:23;tn;Sorry to bugger again, but there is something with the fix that should at least be documented.
The getKernel method is protected, thus users may override it to return a different distribution, but the cumulativeProbability method now explicitly checks if the bin kernel is of type ConstantRealDistribution. Either we document this explicitly in the javadoc as a requirements when overriding the method, or we do a check on the variance of the kernel to decide if we have to do interpolation or not.","10/Mar/15 13:36;psteitz;Thanks for reviewing, Thomas.  I did think about checking variance = 0 instead and probably should have done that.  In fact, since it is possible that a non-constant user-supplied kernel can have no support in a bin, the 0/0 computation that led to MATH-1208 could happen even without variance == 0.  So I guess a more robust test is first check if the distribution variance is 0, then check kB > 0.  Thanks again for reviewing.  ","18/Apr/15 09:28;luc;Closing resolved issue as 3.5 has been released.",,,,,
Cost in least-squares fitting,MATH-1206,12777885,Bug,Resolved,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,erans,erans,erans,26/Feb/15 13:55,09/Apr/15 12:39,22/Mar/20 23:34,09/Apr/15 12:39,3.3,3.4,3.4.1,,,4.0,,,0,,"In {{org.apache.commons.math4.fitting.leastsquares.AbstractEvaluation}}, the value returned by the ""getCost"" method is not consistent with the definition of ""cost"" in a least-squares problem: It is the sum of the squares of the residuals, but the method returns the square-root of that quantity.",,erans,,,,,,,,,,,,,,"26/Feb/15 15:47;erans;MATH-1206.patch;https://issues.apache.org/jira/secure/attachment/12701100/MATH-1206.patch","26/Feb/15 14:52;erans;MATH-1206.patch;https://issues.apache.org/jira/secure/attachment/12701078/MATH-1206.patch",,2.0,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Apr 09 12:39:52 UTC 2015,,,,,,,"0|i263fj:",9223372036854775807,,,,,,,,,,,,,,,,"26/Feb/15 14:52;erans;The (attached) patch causes many tests to now fail:

{noformat}
Failed tests: 
  GaussianCurveFitterTest.testFit01:188 expected:<3496978.1837704973> but was:<3496976.3496594895>
  GaussianCurveFitterTest.testFit04:262 expected:<233003.2967252038> but was:<233002.8643516898>
  GaussianCurveFitterTest.testFit05:275 expected:<283863.81929180305> but was:<283863.7943168686>
  GaussianCurveFitterTest.testFit06:288 expected:<285250.66754309234> but was:<285250.6769121677>
  GaussianCurveFitterTest.testFit07:301 expected:<3514384.729342235> but was:<3514384.6669300473>
  GaussianCurveFitterTest.testMath519:347 expected:<53.1572792> but was:<26.0>
  GaussianCurveFitterTest.testMath798:375 expected:<420.8397296167364> but was:<420.8397358396097>
  GaussianCurveFitterTest.testWithMaxIterations1:204 expected:<3496978.1837704973> but was:<3496978.800406003>
  GaussianCurveFitterTest.testWithStartPoint:229 expected:<3496978.1837704973> but was:<3496978.800406003>
  HarmonicCurveFitterTest.testNoError:57 expected:<0.2> but was:<0.1999955548978442>
  PolynomialCurveFitterTest.testFit:56 best != coeff
 Elements at index 0 differ.  expected = 12.9 observed = -1.0E-20
 Elements at index 1 differ.  expected = -3.4 observed = 3.0E15
 Elements at index 2 differ.  expected = 2.1 observed = -5.0E25
  SimpleCurveFitterTest.testPolynomialFit:57 best != coeff
 Elements at index 0 differ.  expected = 12.9 observed = -1.0E20
 Elements at index 1 differ.  expected = -3.4 observed = 3.0E15
 Elements at index 2 differ.  expected = 2.1 observed = -5.0E25
  EvaluationTest.testComputeCost:175 Kirby2 expected:<3.9050739624> but was:<15.249602651743004>
  EvaluationTest.testComputeSigma:206 Kirby2, parameter #0 expected:<0.087989634338> but was:<0.17387860547376632>
  LevenbergMarquardtOptimizerTest.testControlParameters:116->checkEstimate:155 null
  MinpackTest.testMinpackBard:180->minpackTest:524 expected:<-1.58848033259565E8> but was:<-2.281145030247444E16>
  MinpackTest.testMinpackBox3Dimensional:327->minpackTest:523 expected:<0.0> but was:<0.0030343448521943407>
  MinpackTest.testMinpackBrownAlmostLinear:407->minpackTest:523 expected:<0.0> but was:<0.003621421870604769>
  MinpackTest.testMinpackBrownDennis:343->minpackTest:523 expected:<292.954288244866> but was:<292.9544389375816>
  MinpackTest.testMinpackChebyquad:374->minpackTest:523 expected:<1.88424820499347> but was:<1.18088726698391731E18>
  MinpackTest.testMinpackFreudensteinRoth:152->minpackTest:524 expected:<11.4124844654993> but was:<11.412121480926384>
  MinpackTest.testMinpackHelicalValley:132->minpackTest:523 expected:<0.0> but was:<6.274776288270002E-4>
  MinpackTest.testMinpackKowalikOsborne:196->minpackTest:523 expected:<0.017535837721129> but was:<0.03846867874661756>
  MinpackTest.testMinpackOsborne1:476->minpackTest:523 expected:<0.00739249260904843> but was:<0.007723842649443106>
  MinpackTest.testMinpackOsborne2:487->minpackTest:523 expected:<0.20034404483314> but was:<0.23226823584082015>
  MinpackTest.testMinpackPowellSingular:142->minpackTest:523 expected:<0.0> but was:<0.003097797251086307>
  MinpackTest.testMinpackRosenbrok:122->minpackTest:523 expected:<0.0> but was:<0.1732616669375091>
  MinpackTest.testMinpackWatson:266->minpackTest:523 expected:<0.0011831145921242> but was:<0.0033222964745821893>
{noformat}
","26/Feb/15 15:20;erans;That was to be expected, since the ""cost"" is used to control parts of the the Levenberg-Marquardt algorithm.
Now, we must determine _what_ quantity is used inside the algorithm. Was the implementation correct in using the square-root of the chi-square?
If so we can solve the issue by adding a new method ""getChiSquare()"" rather than change the meaning of ""getCost()"" (even though it can be confusing to use ""cost"" to mean the _square-root_ of the objective function).
","26/Feb/15 15:47;erans;This patch does not modify the semantics of the current code, it only adds a new ""getChiSquare()"" method that returns the value of the objective functon (defined as ""the sum of the squares of the residuals"").

OK to apply?
","26/Feb/15 18:00;erans;I also suggest that we add a
{code}
double getReducedChiSquare(int numFittedParameters);
{code}
method to the {{Evaluation}} interface.
","09/Apr/15 12:39;erans;Methods added in commit 0a499402d707bc8cf775d7f9b3840780a7401f7d",,,,,,
BesselJ java contains non-Java5 code.,MATH-1188,12765784,Bug,Resolved,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,,luc,luc,08/Jan/15 16:12,08/Jan/15 16:13,22/Mar/20 23:34,08/Jan/15 16:13,3.4,,,,,3.4.1,,,0,,"The class uses Arrays.copyOf, which is only available in Java 1.6+.

Apache Commons Math currently targets 1.5, so this method should not be used. MathArrays.copyOf should be used instead.",,luc,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Thu Jan 08 16:13:54 UTC 2015,,,,,,,"0|i242zj:",9223372036854775807,,,,,,,,,,,,,,,,"08/Jan/15 16:13;luc;Issue has been identified and fixed by Sebb.

The fix is on commit 6a82f92.",,,,,,,,,,
Integer overflows MannWhitneyUTest#mannWhitneyU,MATH-1145,12733315,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,,aconbere,aconbere,11/Aug/14 18:33,26/Dec/14 19:50,22/Mar/20 23:34,13/Sep/14 15:47,3.3,3.4,,,,3.4,,,0,,"In the calculation of MannWhitneyUTest#mannWhitneyU there are two instances where the lengths of the input arrays are multiplied together. Because Array#length is an integer this means that the effective maximum size of your dataset until reaching overflow is Math.sqrt(Integer.MAX_VALUE).

The following is a link to a diff, with a test the exposes the issue, and a fix (casting lengths up into doubles before multiplying).

https://gist.github.com/aconbere/4fef56e5182e510aceb3",,aconbere,,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2014-09-13 15:47:12.764,,,false,,,,,,,,,,,,,,,,,,411343,,,Sat Sep 13 15:47:12 UTC 2014,,,,,,,"0|i1yro7:",411335,,,,,,,,,,,,,,,,"13/Sep/14 15:47;tn;Fixed in r1624756.

Changed the calculation to long as this should be sufficient and is already done like this in other places.

Thanks for the report and patch!",,,,,,,,,,
SolutionCallback has incorrect class javadoc,MATH-1214,12819893,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Minor,Fixed,,psteitz,psteitz,10/Apr/15 00:09,18/Apr/15 09:28,22/Mar/20 23:34,10/Apr/15 01:32,3.3,3.4,3.4.1,,,3.5,4.0,,0,,The class javadoc for o.a.c.m.optim.linear.SolutionCallback does not describe the class.,,luc,psteitz,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2015-04-18 09:28:25.105,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Sat Apr 18 09:28:25 UTC 2015,,,,,,,"0|i2d2lz:",9223372036854775807,,,,,,,,,,,,,,,,"10/Apr/15 01:32;psteitz;Fixed in
Branch: refs/heads/master
Commit: 6cd693a42256186fb3fd394ab040fa2132fac8d1
Branch: refs/heads/MATH_3_X
Commit: 6a24cf473c12dde2eeb584803d9e0f15ad061b00","18/Apr/15 09:28;luc;Closing resolved issue as 3.5 has been released.",,,,,,,,,
Missing documentation for ParameterValidator,MATH-1184,12764211,Bug,Resolved,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Minor,Fixed,,bjohnson,bjohnson,30/Dec/14 15:07,26/Jan/15 21:17,22/Mar/20 23:34,26/Jan/15 21:17,3.4,,,,,,,,0,,"When I click on the documentation link for ParameterValidator in the fitting.leastsquares package  I get:

The requested URL /proper/commons-math/javadocs/api-3.4/org/apache/commons/math3/fitting/leastsquares/ParameterValidator.html was not found on this server.
",,bjohnson,erans,,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2014-12-30 17:06:10.996,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Jan 26 21:17:17 UTC 2015,,,,,,,"0|i23un3:",9223372036854775807,,,,,,,,,,,,,,,,"30/Dec/14 17:06;erans;The file exists in the RM's (Luc) RC3 copy of the site.
But the file is missing in https://svn.apache.org/repos/infra/websites/production/commons/content/proper/commons-math
I guess that the problem is that we forgot to commit ithe new files under svn.
Many others are missing: it looks like all the new classes/interfaces are missing.
We should add an ""svn status"" check in the release howto.
","30/Dec/14 17:30;erans;Added missing files.  I guess we'll have to wait a certain time before they appear on the site.
","30/Dec/14 18:34;erans;It's not fixed :(
The files are not in the doc for release 3.4.","26/Jan/15 21:17;tn;The files are now there for the latest 3.4.1 release, so closing this bug as resolved.

No fix version as there was no software change involved.",,,,,,,
Fix typo in changes.xml,MATH-1150,12738738,Bug,Resolved,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Minor,Fixed,,taueres,taueres,03/Sep/14 08:12,03/Sep/14 10:11,22/Mar/20 23:34,03/Sep/14 10:11,3.4,,,,,,,,0,,"There is an error in changes.xml. ""ation"" tag has been opened instead of ""action"".",,erans,taueres,,,,,,,,,,,,,"03/Sep/14 08:16;taueres;patch;https://issues.apache.org/jira/secure/attachment/12666179/patch",,,1.0,,,,,,,,,,,,,,,,,,,,2014-09-03 10:11:31.051,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Sep 03 10:11:31 UTC 2014,,,,,,,"0|i1zm93:",9223372036854775807,,,,,,,,,,,,,,,,"03/Sep/14 08:16;taueres;Proposed patch","03/Sep/14 10:11;erans;Fixed in r1622206.
Thanks.",,,,,,,,,
"""Descriptive statistics"" has a non-final protected field",MATH-1192,12767527,Bug,Resolved,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Trivial,Duplicate,,erans,erans,14/Jan/15 19:23,16/Feb/15 22:51,22/Mar/20 23:34,16/Feb/15 22:51,3.4,,,,,4.0,,,0,APIBug,"Field ""windowSize"" should be private (there is setter method).

",,erans,,,,,,,,,,,,MATH-760,,,,,0.0,,,,,,,,,,,,,,,,,,,,2015-02-16 22:51:39.028,,,false,,,,,,,,,,,,,,,,,,9223372036854775807,,,Mon Feb 16 22:51:39 UTC 2015,,,,,,,"0|i24dkf:",9223372036854775807,,,,,,,,,,,,,,,,"16/Feb/15 22:51;tn;Closed as duplicate.",,,,,,,,,,

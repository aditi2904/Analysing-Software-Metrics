Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Due Date,Votes,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Attachment,Attachment,Attachment,Attachment,Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Review Date),Custom field (Reviewer),Custom field (Severity),Custom field (Severity),Custom field (Skill Level),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Tags),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
NPE when calling SubLine.intersection() with non-intersecting lines,MATH-988,12650507,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,,andreashuber,andreashuber,02/Jun/13 13:06,19/May/14 15:13,20/Mar/20 23:14,03/Jun/13 07:17,3.0,3.1,3.1.1,3.2,3.3,,0,,,,"When calling SubLine.intersection() with two lines that not intersect, then a NullPointerException is thrown in Line.toSubSpace(). This bug is in the twod and threed implementations.

The attached patch fixes both implementations and adds the required test cases.

",,,,,,,,,,"02/Jun/13 13:07;andreashuber;SubLineIntersection.patch;https://issues.apache.org/jira/secure/attachment/12585757/SubLineIntersection.patch",,,,,,1.0,,,,,,,,,,,,,,,,,,,,2013-06-03 07:17:01.331,,,false,,,,,,,,,,,,,,,,,330834,,,Mon May 19 15:13:20 UTC 2014,,,,,,,"0|i1l2qf:",331167,,,,,,,,,,,,,,,,"02/Jun/13 13:07;andreashuber;This patch fixes both implementations and adds test cases.","03/Jun/13 07:17;luc;Fixed in subversion repository as of r1488866.
Patch applied with minor whitespace changes.

Thanks for the report and for the patch.","19/May/14 15:13;luc;Closing all resolved issue now available in released 3.3 version.",,,,,,,,,
RandomDataGenerator#nextLong violates bounds,MATH-936,12632812,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,,rw7,rw7,18/Feb/13 10:49,07/Apr/13 09:19,20/Mar/20 23:14,10/Mar/13 19:29,3.1,,,,3.2,,0,random,,,"I attached a test.

If the underlying RandomGenerator returns 0.0, then nextLong returns Long.MIN_VALUE, although the lower bound is Long.MIN_VALUE+1.

The javadoc of RandomGenerator#nextDouble does not clearly define, whether the result includes the lower border of 0.0 or not.

In java.util.Random it clearly defined as included: ""uniformly from the range 0.0d (inclusive) to 1.0d (exclusive)"". And the existence of JDKRandomGenerator suggests, that RandomGenerator should have the same contract.

I tested with version 3.1.1 from mvnrepository

",,,,,,,,,,"09/Mar/13 15:35;tn;MATH-936.patch;https://issues.apache.org/jira/secure/attachment/12572917/MATH-936.patch","18/Feb/13 10:50;rw7;RandomGeneratorLongTest.java;https://issues.apache.org/jira/secure/attachment/12569794/RandomGeneratorLongTest.java",,,,,2.0,,,,,,,,,,,,,,,,,,,,2013-03-09 15:35:11.963,,,false,,,,,,,,,,,,,,,,,313308,,,Sun Apr 07 09:19:40 UTC 2013,,,,,,,"0|i1i2fj:",313653,,,,,,,,,,,,,,,,"09/Mar/13 15:35;tn;We can not ensure that the resulting value of nextLong will really be uniformly distributed within the given bounds due to limited precision of the calculation (we would need to do the scaling calculation with a Dfp field for example, but this would be very slow).

The attached patch at least ensures that the resulting value will be strictly inside the given bounds.","09/Mar/13 15:53;luc;Shouldn't we completely avoid using nexDouble() here?
The underlying RandomGenerator does provide nextBytes(). Looking at BitsStreamGenerator, we see how the stream of bytes is used to implement nextInt(int) with a rejection method. The same could be done for a long.

As a side note, it would even be worth (for 4.0) to add nextLong(long) in the RandomGenerator interface too.","09/Mar/13 16:07;tn;If this can be adapted to uniformly provide numbers in the range of [lower, upper], also taking into account that lower can be negative, than this would be a better solution.","10/Mar/13 19:29;luc;Fixed in subversion repository as of r1454897.

We now use discrete raw elements to build the int/long rather than relying on floating point arithmetic.

Thanks for the report.","07/Apr/13 09:19;luc;Closing issue as version 3.2 has been released on 2013-04-06.",,,,,,,
SimplexSolver - InfeasibleSolution when feasible,MATH-819,12598390,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Implemented,tn,vidyaraghu,vidyaraghu,11/Jul/12 15:21,07/Apr/13 09:16,20/Mar/20 23:14,10/Mar/13 17:29,3.1,,,,3.2,,0,,,,"I am seeing an odd behavior with the latest code in the main trunk (Directory revision: 1358535). The solver throws ""NoFeasibleSolutionException"" for a problem which has a feasible solution. Just by commenting out the last constraint, we get a feasible solution. And for that solution, the constraint in question does not seem to be playing a role. ","Windows 7, JDK 1.7.0_03",,,,,,,,,"11/Jul/12 15:21;vidyaraghu;CommonsSolver2.java;https://issues.apache.org/jira/secure/attachment/12536042/CommonsSolver2.java","12/Jul/12 20:13;tn;lp-octave.txt;https://issues.apache.org/jira/secure/attachment/12536273/lp-octave.txt","13/Jul/12 10:34;vidyaraghu;test.log;https://issues.apache.org/jira/secure/attachment/12536366/test.log","13/Jul/12 10:34;vidyaraghu;test.mod;https://issues.apache.org/jira/secure/attachment/12536367/test.mod","13/Jul/12 10:34;vidyaraghu;test.out;https://issues.apache.org/jira/secure/attachment/12536368/test.out",,5.0,,,,,,,,,,,,,,,,,,,,2012-07-11 19:03:45.659,,,false,,,,,,,,,,,,,,,,,241589,,,Sun Apr 07 09:16:12 UTC 2013,,,,,,,"0|i028tz:",11032,,,,,,,,,,,,,,,,"11/Jul/12 19:03;tn;Hi Raghu,

thanks for the report and the test case. There seems to be a bug in case the solver is not restricted to negative values. So when you call it the following way you get correct results:

{noformat}
    PointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);
{noformat}

I will dig further into it, and solve it asap.

Thomas","12/Jul/12 19:32;tn;I looked further into it, and I am not sure anymore that it is related to unrestricted variables. In fact the defined problem is over-constrained with constraints containing very large coefficients / values. If you disable them you will get a valid solution.

Now, the solver should find a solution anyway, but I guess the large coefficients lead to numerical stability problems, which would also explain the odd behavior when disabling the last constraint: disabling the constraint alters the tableau which changes the selection of pivot columns/rows.

I need to do more research on such cases where there are very large coefficients.","12/Jul/12 20:13;tn;an octave version of the same problem.

Octave uses glpk which does not find a solution either. glpk does a scaling of the coefficient matrix by default, which would be a nice addition to commons-math too imho.","13/Jul/12 10:37;vidyaraghu;Hi Thomas,

I will check out Octave. But glpk is able to solve this problem with those large coeffs. I used the standalone solver (glpsol) that comes with glpk. I have attached the input, output and solution files (test.*) for the same problem. Please look into it. 

I guess I can skip specifying such wide bounds when we don't really know the bounds. I will try it out and get back if I see any more problems. 

Again, thanks for looking into this issue.

--
Raghu","14/Jul/12 21:09;tn;Hi Raghu,

I tried to check if glpk would be able to solve the very same problem that you formulated using commons-math. This seems to fail too. I think the additional bounds are not necessary and lead to the problems that we have seen. By default, the variables may take values in the range [0, infinity), or better: number which can be represented as double, and you only need such bounds if you want to limit this to smaller numbers. Such high bounds seem to lead to numerical problems (especially when setting the restrictToNonNegative to false) which need to be further investigated, but may not be solved easily.

Now, I do not know what glpsol does internally and which problem it formulates based on your input, but my guess would be that the bounds are treated differently (not as explicit constraints).

Thomas","15/Jul/12 12:24;vidyaraghu;Hi Thomas,

I will try to skip adding such constraints as much as possible. 

You mention that variables without any specified bounds may take values in the range [0, infinity]. Am I correct to assume that such variables could take values from -infinity to infinity if I call the SimplexSolver.optimize method with restrictToNonNegative set to false? Sorry if I am asking for clarification on something that is obvious. Thanks.

--
Raghu","15/Jul/12 15:52;tn;Hi Raghu,

the short answer is yes. In theory it will be in the range [Double.MIN_VALUE, Double.MAX_VALUE], but in practice it will be limited by many more things and depend on your problem definition of course.

Thomas","15/Jul/12 16:29;vidyaraghu;Hi Thomas,

OK. I will try few more test cases and open a new defect if I see more issues. I will leave it to you if you want to keep this defect open until it gets fixed. Thanks.

--
Raghu","10/Mar/13 17:29;tn;In MATH-930, an additional cutOff parameter has been added to the SimplexSolver constructor in the reorganized optim package, allowing to zero-out very small numbers.

With the following values, the problem can be reliably solved:

{noformat}
new SimplexSolver(1e-6, 10, 1e-5)
{noformat}

By default the cutoff is set to 1e-12, but to get valid solutions in this case, a larger value is needed.","10/Mar/13 23:29;vidyaraghu;Hi Thomas,

Thanks. I will try it when I find some time.


 
--
Raghu


","11/Mar/13 09:11;tn;Ok, but keep in mind that you have to use the SimplexSolver in the new optim package. The whole optimization package has been refactored so a few things have changed, but the principle is the same of course.

Also this change will only be available from the 3.2 release, or you can test with the latest trunk of course.","07/Apr/13 09:16;luc;Closing issue as version 3.2 has been released on 2013-04-06."
GammaDistribution cloning broken,MATH-927,12626005,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,,dhendriks,dhendriks,04/Jan/13 11:36,04/Mar/13 18:53,20/Mar/20 23:14,13/Jan/13 18:02,3.1,,,,3.1.1,,0,,,,"Serializing a GammaDistribution and deserializing it, does not result in a cloned distribution that produces the same samples.

Cause: GammaDistribution inherits from AbstractRealDistribution, which implements Serializable. AbstractRealDistribution has random, in which we have a Well19937c instance, which inherits from AbstractWell. AbstractWell implements Serializable. AbstractWell inherits from BitsStreamGenerator, which is not Serializable, but does have a private field 'nextGaussian'.

Solution: Make BitStreamGenerator implement Serializable as well.

This probably affects other distributions as well.",,,,,,,,,,"04/Jan/13 11:38;dhendriks;DistributionCloneTests.java;https://issues.apache.org/jira/secure/attachment/12563281/DistributionCloneTests.java","04/Jan/13 11:40;dhendriks;bits-stream-generator-serializable.patch;https://issues.apache.org/jira/secure/attachment/12563282/bits-stream-generator-serializable.patch",,,,,2.0,,,,,,,,,,,,,,,,,,,,2013-01-04 12:31:57.347,,,false,,,,,,,,,,,,,,,,,302587,,,Fri Jan 04 12:31:57 UTC 2013,,,,,,,"0|i1744n:",249636,,,,,,,,,,,,,,,,"04/Jan/13 11:38;dhendriks;Unit test to show the problem.","04/Jan/13 11:40;dhendriks;Proposed patch.","04/Jan/13 12:31;erans;Fixed in revision 1428822.

I've slightly modified the unit test and included it in ""RealDistributionAbstractTest"" so that all current, and future, distribution implementations are automatically checked.

Thanks for the report and fix.
",,,,,,,,,
EigenDecomposition fails for certain matrices,MATH-848,12603779,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,tn,tn,tn,16/Aug/12 20:09,04/Mar/13 18:53,20/Mar/20 23:14,23/Sep/12 19:35,3.1,,,,3.1,,0,,,,"The Schurtransformation of the following matrix fails, which is a preliminary step for the Eigendecomposition:

RealMatrix m = MatrixUtils.DEFAULT_FORMAT.parse(""{{0.184944928,-0.0646971046,0.0774755812,-0.0969651755,-0.0692648806,0.3282344352,-0.0177423074,0.206313634},{-0.0742700134,-0.028906303,-0.001726946,-0.0375550146,-0.0487737922,-0.2616837868,-0.0821201295,-0.2530000167},{0.2549910127,0.0995733692,-0.0009718388,0.0149282808,0.1791878897,-0.0823182816,0.0582629256,0.3219545182},{-0.0694747557,-0.1880649148,-0.2740630911,0.0720096468,-0.1800836914,-0.3518996425,0.2486747833,0.6257938167},{0.0536360918,-0.1339297778,0.2241579764,-0.0195327484,-0.0054103808,0.0347564518,0.5120802482,-0.0329902864},{-0.5933332356,-0.2488721082,0.2357173629,0.0177285473,0.0856630593,-0.35671263,-0.1600668126,-0.1010899621},{-0.0514349819,-0.0854319435,0.1125050061,0.006345356,-0.2250000688,-0.220934309,0.1964623477,-0.1512329924},{0.0197395947,-0.1997170581,-0.1425959019,-0.274947791,-0.0969467073,0.060368852,-0.2826905192,0.1794315473}}"");
",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,292275,,,Sun Sep 23 19:35:20 UTC 2012,,,,,,,"0|i0rszb:",160339,,,,,,,,,,,,,,,,"23/Sep/12 19:35;tn;Fixed in revision 1389129.",,,,,,,,,,,
Tridiagonal QR decomposition has a faulty test for zero... ,MATH-652,12520042,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,,gsteri1,gsteri1,25/Aug/11 02:17,24/Mar/12 16:17,20/Mar/20 23:14,22/Jan/12 11:20,3.1,,,,3.0,,0,TriDiagonalTransformer,,,"In the method getQT() of TriDiagonalTransformer we have:

    public RealMatrix getQT() {
        if (cachedQt == null) {
            final int m = householderVectors.length;
            cachedQt = MatrixUtils.createRealMatrix(m, m);

            // build up first part of the matrix by applying Householder transforms
            for (int k = m - 1; k >= 1; --k) {
                final double[] hK = householderVectors[k - 1];
                cachedQt.setEntry(k, k, 1);
                final double inv = 1.0 / (secondary[k - 1] * hK[k]);
                if (hK[k] != 0.0) {
                    double beta = 1.0 / secondary[k - 1];

The faulty line is : final double inv = 1.0 / (secondary[k - 1] * hK[k]);
It should be put after the test for the zero, eg:

    public RealMatrix getQT() {
        if (cachedQt == null) {
            final int m = householderVectors.length;
            cachedQt = MatrixUtils.createRealMatrix(m, m);

            // build up first part of the matrix by applying Householder transforms
            for (int k = m - 1; k >= 1; --k) {
                final double[] hK = householderVectors[k - 1];
                cachedQt.setEntry(k, k, 1);
                if (hK[k] != 0.0) {
                    final double inv = 1.0 / (secondary[k - 1] * hK[k]);
                    double beta = 1.0 / secondary[k - 1];


",JAVA,3600,3600,,0%,3600,3600,,,"25/Aug/11 02:17;gsteri1;tridiagonal;https://issues.apache.org/jira/secure/attachment/12491580/tridiagonal",,,,,,1.0,,,,,,,,,,,,,,,,,,,,2012-01-22 11:19:51.246,,,false,,,,,,,,,,,,,,,,,2192,,,Sun Jan 22 11:19:51 UTC 2012,,,,,,,"0|i0ap0v:",60327,,,,,,,,,,,,,,,,"22/Jan/12 11:19;tn;Patched in r1234486.",,,,,,,,,,,
SymmLQ not tested in SymmLQTest,MATH-770,12547758,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Major,Fixed,celestin,celestin,celestin,23/Mar/12 07:24,24/Mar/12 16:16,20/Mar/20 23:14,23/Mar/12 08:14,3.0,3.1,,,3.1,,0,linear,solver,,"In {{SymmLQTest}}, two test actually create instances of {{ConjugateGradient}} instead of {{SymmLQ}}. These tests are
* {{testUnpreconditionedNormOfResidual()}}
* {{testPreconditionedNormOfResidual()}}.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,232855,,,Fri Mar 23 08:14:24 UTC 2012,,,,,,,"0|i0rtav:",160391,,,,,,,,,,,,,,,,"23/Mar/12 07:26;celestin;Typos corrected in {{r1304215}}; {{testPreconditionedNormOfResidual()}} now fails.","23/Mar/12 07:53;celestin;Test corrected in {{r1304216}}. Failure was due to the fact that in {{SymmLQ}}, the residual for the preconditioned system is really {{P * r}}, where {{r = b - A * x}}, and {{P}} is the square root of the preconditioner.","23/Mar/12 08:14;celestin;There is a follow-up to this ticket in MATH-771.",,,,,,,,,
Inconsistent multi-start randomization (optimizers),MATH-914,12623747,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Minor,Fixed,,erans,erans,13/Dec/12 13:28,07/Apr/13 09:17,20/Mar/20 23:14,09/Mar/13 17:38,3.0,3.1,,,3.2,,0,,,,"In class ""o.a.c.m.optim.BaseMultiStartMultivariateOptimizer"", the ""starting points"" generator is passed at construction. But random initial guesses must fulfill the bound constraint and be somehow related to the user-supplied initial guess; and those are passed to the ""optimize"" method and thus can change from one call to the other, leading to inconsistent (and probably useless) multi-starts.
",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2013-03-09 17:38:35.575,,,false,,,,,,,,,,,,,,,,,297446,,,Sun Apr 07 09:17:22 UTC 2013,,,,,,,"0|i14oqn:",235473,,,,,,,,,,,,,,,,"13/Dec/12 13:33;erans;In revision 1421287, I've marked (with ""XXX"") the code that should be revised.
I don't think that it is a blocking issue (it is also present in the ""optimization"" package), but anyone is welcome to provide a patch if a fix is quickly found.
","09/Mar/13 17:38;luc;Fixed in subversion repository as of r1454746.","07/Apr/13 09:17;luc;Closing issue as version 3.2 has been released on 2013-04-06.",,,,,,,,,
eigendecompimpl allocates space for array imagEigenvalues when it is not needed,MATH-651,12520041,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Minor,Won't Fix,tn,gsteri1,gsteri1,25/Aug/11 01:59,04/Mar/13 18:57,20/Mar/20 23:14,23/Jul/12 20:21,3.1,,,,,,0,EIGENDECOMPOSITIONIMPL,,,The class variable imagEigenvalues is allocated even there is no use for it. I propose leaving the reference null. Patch will follow. ,JAVA,,,,,,,,,"25/Aug/11 02:08;gsteri1;eigendecompimpl;https://issues.apache.org/jira/secure/attachment/12491579/eigendecompimpl",,,,,,1.0,,,,,,,,,,,,,,,,,,,,2012-01-22 11:34:05.479,,,false,,,,,,,,,,,,,,,,,2193,,,Mon Jul 23 20:21:42 UTC 2012,,,,,,,"0|i0rthj:",160421,,,,,,,,,,,,,,,,"25/Aug/11 02:08;gsteri1;The patch with proposed changes... ","22/Jan/12 11:34;tn;The current version of EigenDecomposition only works for symmetric matrices which always results in real eigenvalues.

For non-symmetric matrices, there can also be complex eigenvalues, which is currently developed for issue MATH-235.

It is to be discussed how one can identify the result as real or complex:

 - test for null vector
 - test for zero vector
","18/Jul/12 21:01;tn;pushing to 4.0 as it would change the current behavior. As of version 3.1, also general asymmetric matrices are supported, thus there may be complex eigen values.

So the variable imagEigenvalues has some use now: it is used to distinguish between real and complex eigenvalues. In case of real eigenvalues, all entries are 0.","18/Jul/12 22:42;erans;bq. pushing to 4.0 [...]

Can't we resolve the issue instead?
The ""lost"" memory will be quite small compared to the other data stored.
","19/Jul/12 06:26;tn;That's right indeed. The reason I'd like to keep it open is to discuss how we want to distinguish the case of real / complex eigenvalues. Right now, a user has to make a zero check on the imagEigenvalues array to see if the result is maybe complex.

We could also solve it by adding a new method like ""hasComplexEigenvalues"" that does the trick.","21/Jul/12 01:27;erans;That might a useful addition. Maybe ask for confirmation on the ML.

We can nevertheless resolve this issue, since it was about allocation of an unused array that is now used (IIUC).
","23/Jul/12 20:21;tn;With the addition of support for general asymmetric matrices in EigenDecomposition, the field imagEigenvalues is actually used, thus the issue is obsolete.",,,,,
UTF-8 extended characters are not rendered correctly in the javadoc,MATH-903,12616687,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Minor,Fixed,celestin,celestin,celestin,19/Nov/12 06:39,04/Mar/13 18:53,20/Mar/20 23:14,19/Nov/12 07:00,3.1,,,,3.1,,0,Javadocs,pom,UTF-8,"It was recently agreed on the [mailing list|http://markmail.org/thread/bnnjyakdhx7icsj7] that UTF-8 extended characters should be allowed in the Javadoc comments (in place of {{&...;}} HTML special characters), in order to increase readability.

The {{pom.xml}} states
{code:xml}
  <properties>
    ...
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    ...
  </properties> 
{code}

which, according to [this FAQ|http://maven.apache.org/plugins/maven-javadoc-plugin/faq.html#What_are_the_values_of_encoding_docencoding_and_charset_parameters], should be enough to accept UTF-8 encoding in the Javadoc. However, UTF-8 extended characters are not rendered correctly.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,258544,,,Mon Nov 19 07:00:28 UTC 2012,,,,,,,"0|i0kuh3:",119755,,,,,,,,,,,,,,,,"19/Nov/12 06:47;celestin;The problem seems to come from the parent {{pom}}, where two properties are defined
{code:xml}
  <properties>
    ...
    <commons.encoding>iso-8859-1</commons.encoding>
    <commons.docEncoding>${commons.encoding}</commons.docEncoding>
    ...
{code}
which are then used
{code:xml}
  <build>
    ...
    <pluginManagement>
      <plugins>
        ...
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>${commons.javadoc.version}</version>
          <configuration>
            <!-- keep only errors and warnings -->
            <quiet>true</quiet>
            <encoding>${commons.encoding}</encoding>
            <docEncoding>${commons.docEncoding}</docEncoding>
            ...
{code}
Therefore, to fix this bug, it should be sufficient to override {{commons.encoding}} in our {{pom}}, and remove the following lines
{code:xml}
<properties>
    ...
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    ...
</properties>
{code}","19/Nov/12 07:00;celestin;Changes committed in {{r1411084}}.",,,,,,,,,,
Font problem in LocalizedFormatsTest.java header,MATH-900,12616427,Bug,Closed,MATH,Commons Math,software,issues@commons.apache.org,,http://commons.apache.org/math/,Minor,Fixed,,kberlin,kberlin,16/Nov/12 16:16,04/Mar/13 18:53,20/Mar/20 23:14,17/Nov/12 00:22,3.1,,,,3.1,,0,,,,"Non-standard charecters in the comment header of the file prevents compiling of the class with error
    [javac] /Users/kberlin/Dropbox/Projects/math/src/test/java/org/apache/commons/math3/exception/util/LocalizedFormatsTest.java:21: error: unmappable character for encoding ASCII
    [javac]  * Copyright 2010 CS Communication & Syst??mes","OS X 10.8.2, Java 7",,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2012-11-16 16:24:57.33,,,false,,,,,,,,,,,,,,,,,258268,,,Fri Nov 16 17:16:50 UTC 2012,,,,,,,"0|i0kr0v:",119195,,,,,,,,,,,,,,,,"16/Nov/12 16:24;erans;This license text has been moved out of the way in revision 1410433.
Please check that it solves your problem.
","16/Nov/12 16:31;kberlin;Issue also present in HermiteInterpolator.java. The other file is now fixed.

  [javac] /Users/kberlin/Dropbox/Projects/math/src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java:48: warning: unmappable character for encoding ASCII
    [javac]  * is: Copyright 2002-2012 CS Syst??mes d'Information.
    [javac]                                   ^","16/Nov/12 16:50;erans;Text removed in revision 1410460.
","16/Nov/12 17:16;kberlin;Fixed now. Thanks!",,,,,,,,

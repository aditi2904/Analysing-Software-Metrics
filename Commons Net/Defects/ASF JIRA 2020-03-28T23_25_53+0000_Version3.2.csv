Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Due Date,Votes,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Cloners),Outward issue link (Duplicate),Outward issue link (Duplicate),Attachment,Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Review Date),Custom field (Reviewer),Custom field (Severity),Custom field (Severity),Custom field (Skill Level),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Tags),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
TFTP sendFile retry broken,NET-477,12604125,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,jkwalnut,jkwalnut,20/Aug/12 21:17,14/Feb/17 22:22,28/Mar/20 23:25,09/Feb/17 15:57,3.1,3.2,,3.6,TFTP,,0,,"TFTPClient.java sendFile() method does not retry after initial timeout.

Between revisons 1088720 & 1229692 the 'continue' statements were changed to 'continue _sendPacket'. After the initial timeout of bufferedReceive() these cause the control to flow to the outer loop and never retry. If the control did flow accordingly, the retry would loop indefinitely since the timeouts variable is reset to zero each time as well.

I am using a workaround by calling bufferedSend(sent) just before continue, in place of the 'continue _sendPacket' statement.

It looks as if similar logic was applied to the receiveFile() method as well.

Revision:1229692
Time:01/10/2012 01:14 PM
Author:sebb
Path:http://svn.apache.org/repos/asf/commons/proper/net/trunk/src/main/java/org/apache/commons/net/tftp/TFTPClient.java
Message:NET-410 Apache Commons TFTP does not handle RFC 783 retransmits
","Linux **** 3.2.0-29-generic #46-Ubuntu SMP Fri Jul 27 17:03:23 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux
java version ""1.6.0_26""
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)",,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2016-09-09 10:09:05.629,,,false,,,,,,,,,,,,,,,,,307050,,,Mon Feb 13 13:09:14 UTC 2017,,,,,,,"0|i1a487:",267151,,,,,,,,,,,,,,,,"09/Sep/16 10:09;v.dlugopolskaya;I have the same problem with receiveFile() method.
When TFTP-server is not running and timeout is more than 1, receiveFile() method doesn't throw an error, it returns an empty file.","02/Dec/16 08:57;niranjanam;I have similar issue. TFTP sendFile does not throw exception if an invalid/ not reachable IP address is given in the place of host name.
The ""timeouts"" variable is getting reset to 0 each time continue _sendPacket; is called from exception, so SocketException / IOException Connection timed out. is never thrown.","09/Feb/17 15:57;sebb;The TFTP send/receive logic has been completely rewritten and now appears to handle retries properly.

URL: http://svn.apache.org/viewvc?rev=1782352&view=rev
Log:
NET-477 TFTP sendFile retry broken

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/tftp/TFTPClient.java

","13/Feb/17 07:15;niranjanam;Thank you, is there a tentative release date/month for the new 3.6 jar release","13/Feb/17 13:09;sebb;yes, see the dev list",,,,,,,,,
Apache Commons Net 3.3 has a performance issue,NET-519,12680654,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,Bambmam2,Bambmam2,22/Nov/13 00:58,26/Nov/15 16:34,28/Mar/20 23:25,06/Dec/13 22:21,3.2,3.3,,3.4,FTP,,0,,"We use Apache Commons Net FTP 3.1. That version had a bug for transferring files with size 0 that was resolved in Apache Commons 3.2.
Apache Commons 3.2 and 3.3 however both have a performance problem for files that do not have a size of 0.

For example a 30MB file using 3.1 takes approximately 40 seconds on our system from point A to point B. 
Using Apache 3.3, the same file takes 2 minutes and 5 seconds. 
Using Apache 3.2, the same file took over 4 minutes. 
This is not acceptable. 

If there are any workarounds, we would like to know. If not this is a major bug. ",Windows 7,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2013-11-22 01:23:25.028,,,false,,,,,,,,,,,,,,,,,359919,,,Tue Mar 17 16:32:38 UTC 2015,,,,,,,"0|i1q1nb:",360218,,,,,,,,,,,,,,,,"22/Nov/13 01:23;ggregory;Hello,

Your report is pretty vague. Can you provide a test case to show us how you use the API? This would let us all run the same code and see how performance differs from version to version. Are you sure network latency is not an issue? A good test would be to have it all running on the same machine or on machines ""next"" to each other on the same LAN.

Gary","22/Nov/13 07:32;tn;This is most likely related to this issue.
There reports on the user ml that there is still a slowdown in 3.3 compared to the 3.1 version.","06/Dec/13 15:39;Bambmam2;The commons-net-3.4-20130923.012224-9.jar located under the https://repository.apache.org/content/groups/snapshots/commons-net/commons-net/3.4-SNAPSHOT/
directoy seems to resolve the performance problem. Rebuilding our application with the 3.4 snapshot the download time is the same as it was in 3.1 version. 
Is there a planned date when will the 3.4 version be released?","06/Dec/13 17:20;sebb;Thanks!
This is very useful to know, and was one of the issues that needed to be resolved for the next release.","17/Mar/15 16:32;Bambmam2;Has there been any progress on when the next release will be?
",,,,,,,,,
User specified bufferSize reset to default when FTPClient is disconnected or reinitialized resulting in performance degradation,NET-505,12637192,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,keriisan,keriisan,15/Mar/13 13:07,12/Jun/13 21:09,28/Mar/20 23:25,06/Jun/13 09:04,3.2,,,3.3,FTP,,0,,"The __bufferSize member variable is reset in the __initDefaults() method. This method is called from the FTPClient's constructor, _connectAction_, reinitialize, and disconnect. This can happen when the FTPClient is re-used after the remote server closes a session due to a timeout, for example. 

If the bufferSize is set by the user via the setBufferSize() method, the value is lost when the buffer size is reset. Since the default buffer size controls the amount read from the input stream and written to the output stream, and is so low by default (1024B as defined by Util.DEFAULT_BUFFER_SIZE) the performance of FTPClient drops dramatically.

The recommendation would be to initialize __bufferSize to zero when it is declared and then remove the assignment in __initDefaults().",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2013-06-06 09:04:17.7,,,false,,,,,,,,,,,,,,,,,317684,,,Thu Jun 06 09:04:17 UTC 2013,,,,,,,"0|i1iten:",318025,,,,,,,,,,,,,,,,"06/Jun/13 09:04;sebb;URL: http://svn.apache.org/r1490203
Log:
NET-505 User specified bufferSize reset to default when FTPClient is disconnected or reinitialized resulting in performance degradation.

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/ftp/FTPClient.java",,,,,,,,,,,,,
FTPClient.CSL.cleanUp() fails to restore timeout value on exception,NET-494,12626759,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,sebb,sebb,09/Jan/13 12:35,12/Jun/13 21:09,28/Mar/20 23:25,09/Jan/13 13:05,3.2,,,3.3,FTP,,0,,"The CSL class temporarily resets the socket timeout.

The cleanUp() method restores the original setting, however this may be skipped if an exception occurs.

The code should ensure that the original setting is always restored.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2013-06-03 09:50:16.469,,,false,,,,,,,,,,,,,,,,,303376,,,Tue Jun 04 10:10:51 UTC 2013,,,,,,,"0|i17asn:",250717,,,,,,,,,,,,,,,,"09/Jan/13 13:05;sebb;URL: http://svn.apache.org/viewvc?rev=1430831&view=rev
Log:
NET-494 FTPClient.CSL.cleanUp() fails to restore timeout value on exception

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/ftp/FTPClient.java
","03/Jun/13 09:50;rbaeumler;Is it possible to create a commons-net-3.2.1 version and apply this fix to this version?
I'm using this library in a JDK 1.5 based project.
","04/Jun/13 10:10;sebb;I took a look at why the current code needs Java 1.6, and concluded that it was not essential to use Java 1.6.
The code has therefore been reverted to require a minimum of Java 1.5, so the next release (3.3) should be suitable.

In the meantime, if you are able to test with a snapshot you can find one at

https://repository.apache.org/content/groups/snapshots/commons-net/commons-net/3.3-SNAPSHOT/

Note that these automated snapshots have not been reviewed and are not formal releases; use at your own risk and do not use in production.",,,,,,,,,,,
AuthenticatingSMTPClient does not support non-default encoding,NET-503,12633163,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,oregev,oregev,20/Feb/13 10:16,12/Jun/13 21:09,28/Mar/20 23:25,20/Feb/13 11:07,3.2,,,3.3,SMTP,,0,,"The AuthenticatingSMTPClient and SMTPSClient do not support any encoding aside from the default encoding of ISO-8859-1 defined in SMTP.
This is because the encoding field is final and can only be set in the constructor, but there is not constructor in these classes that allows specifying the encoding. There is one in the base SMTPClient class, but not in the super classes.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2013-02-20 11:07:27.344,,,false,,,,,,,,,,,,,,,,,313659,,,Wed Feb 20 11:07:27 UTC 2013,,,,,,,"0|i1i4lj:",314004,,,,,,,,,,,,,,,,"20/Feb/13 11:07;sebb;URL: http://svn.apache.org/r1448074
Log:
NET-503 AuthenticatingSMTPClient does not support non-default encoding

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/smtp/AuthenticatingSMTPClient.java
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/smtp/SMTPSClient.java",,,,,,,,,,,,,
Wrong passivHost when using FTPHTTPClient with EPSV,NET-480,12607037,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,triumvir,triumvir,11/Sep/12 11:08,12/Jun/13 21:09,28/Mar/20 23:25,23/Jan/13 00:36,3.1,3.2,,3.3,FTP,,0,,"At the FTPHTTPClient Class in line 99 the Answer from the EPSV Command will parse to receive the Data port and the passiv Host.
\_parsePassiveModeReply(\_replyLines.get(0))
In this function the \_\_passivHost is set to the remoteAddress, but this address is determine by ""this.\_socket\_.getInetAddress();"" and the socket is the socket of the proxy Server and NOT of the ftp Server.


",All Systems with ftp Access over http,,,,,,,,,,,,"13/Sep/12 11:13;triumvir;FTPSquidProxyClient.java;https://issues.apache.org/jira/secure/attachment/12544970/FTPSquidProxyClient.java",,,1.0,,,,,,,,,,,,,,,,,,,,2012-09-12 01:32:00.168,,,false,,,,,,,,,,,,,,,,,244049,,,Wed Jan 23 00:36:07 UTC 2013,,,,,,,"0|i05fjj:",29615,,,,,,,,,,,,,,,,"12/Sep/12 01:32;sebb;Are you referring to the condition in the \_parsePassiveModeReply() method where the response is overwritten if the parsed reply is a siteLocalAddress but the target address is not? i.e. where a NAT box has changed the PASV reply?

Have you got a (tested) patch you can provide?","12/Sep/12 08:11;triumvir;Oh sorry, it's my mistake.
I mean the methode _parseExtendedPassiveModeReply() (EPSV not PASV).
No, I haven't a patch for it, only a dirty workaround for me :-)
I will look today, if I found a clean solution for it.","12/Sep/12 10:17;sebb;Can you attach a copy of the work-round?
That would at least show what works for you.","13/Sep/12 11:13;triumvir;Own testet SquidProxy Class with working EPSV Protocol.
A new class variable is add : host
This variable contain the original destination Address.
At _openDataConnection_ the variable __passivHost will set to the destination address.
By using PASV the variable is set to ""this.getPassiveHost()"", by using EPSV to this.host","23/Jan/13 00:36;sebb;Finally got around to looking at this again.
It looks like the work-round you used is necessary, so committed it:

URL: http://svn.apache.org/viewvc?rev=1437243&view=rev
Log:
NET-480 Wrong passivHost when using FTPHTTPClient with EPSV

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java
",,,,,,,,,
FTP transfer to mainframe extremely slow,NET-499,12630506,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,dmolony,dmolony,02/Feb/13 05:54,17/Apr/13 20:05,28/Mar/20 23:25,17/Apr/13 20:05,3.2,,,3.3,FTP,,0,,"FTPClient.storeFile() is incredibly slow. I have two example files, one FB (4MB) and one in ravel VB (94K) format. Under 3.1 both files transfer in less than a second (FB:328ms, VB:112ms). Under 3.2 the VB transfer takes 30,000ms, and the FB transfer takes too long to find out (> 15 minutes).

I have checked the FB file on the mainframe after cancelling the transfer and it is always partly there. But the length varies, suggesting that it hasn't hit the same error each time.

I have built two jar files, one with 3.1 and the other with 3.2. These jars are available. The code is as follows:

{code}
public class FTPTransfer
{
  public static void transfer (String name, FTPClient ftp, File file) throws IOException
  {
    FileInputStream fis = new FileInputStream (file);
    long start = System.currentTimeMillis ();

    if (ftp.storeFile (name, fis))
      System.out.print (""File transferred"");
    else
      System.out.print (""Transfer failed"");

    System.out.printf ("" in %d ms%n"", (System.currentTimeMillis () - start));
    fis.close ();
  }

  public static void main (String[] args)
  {
    File file1 = null;
    File file2 = null;

    if (System.getProperty (""os.name"").toLowerCase ().startsWith (""mac""))
    {
      file1 = new File (""/Users/Denis/comtest/DENIS-018.SRC"");   // ravel file format
      file2 = new File (""/Users/Denis/comtest/MOLONYD.NCD"");     // FB252 format
    }
    else
    {
      file1 = new File (""D:/comtest/DENIS-018.SRC"");   // ravel file format
      file2 = new File (""D:/comtest/MOLONYD.NCD"");     // FB252 format
    }

    FTPClient ftp = new FTPClient ();
    ftp.addProtocolCommandListener (new PrintCommandListener (new PrintWriter (System.out), true));

    try
    {
      ftp.connect (""server"");

      int reply = ftp.getReplyCode ();

      if (!FTPReply.isPositiveCompletion (reply))
      {
        ftp.disconnect ();
        System.err.println (""FTP server refused connection."");
        System.exit (1);
      }

      ftp.login (""user"", ""pw"");
      FTPFile[] files = ftp.listFiles ();
      System.out.printf (""%nListing contains %d files%n%n"", files.length);

      ftp.setFileType (FTP.BINARY_FILE_TYPE);

      ftp.setFileStructure (FTP.RECORD_STRUCTURE);
      transfer (""TEST.VB"", ftp, file1);

      ftp.setFileStructure (FTP.FILE_STRUCTURE);
      transfer (""TEST.FB"", ftp, file2);

      ftp.logout ();
    }
    catch (IOException e)
    {
      e.printStackTrace ();
    }
    finally
    {
      if (ftp.isConnected ())
      {
        try
        {
          ftp.disconnect ();
        }
        catch (IOException ioe)
        {
        }
      }
    }
  }
}
{code}",Windows and OSX,,,,,,,,,,NET-465,NET-493,,,,0.0,,,,,,,,,,,,,,,,,,,,2013-02-02 09:44:21.412,,,false,,,,,,,,,,,,,,,,,311000,,,Sat Feb 02 11:09:34 UTC 2013,,,,,,,"0|i1ho6n:",311345,,,,,,,,,,,,,,,,"02/Feb/13 09:44;sebb;This sounds like the same issue as NET-465 and NET-493 which has been fixed in the current code.
If you are prepared to try a snapshot that would establish it.

There's also a code work-round: set the socket size to zero before opening the connection (see NET-493).","02/Feb/13 10:04;dmolony;I tried this, but it didn't help.

{code}

    FTPClient ftp = new FTPClient ();
    ftp.addProtocolCommandListener (new PrintCommandListener (new PrintWriter (System.out), true));
    ftp.setBufferSize (0);

{code}

Is that what you meant?

I'm happy to try a snapshot if you can point me to one.","02/Feb/13 10:23;sebb;I meant

setSendBufferSize(int)
setReceiveBufferSize(int)

The ASF snapshot repo is at

http://repository.apache.org/snapshots/","02/Feb/13 10:34;dmolony;I tried those two calls, but I get an IllegalArgumentException - invalid receive size. But the 30/1 snapshot works fine, thanks.","02/Feb/13 10:43;sebb;Just curious - what sizes did you use?","02/Feb/13 10:48;dmolony;Zero. Isn't that what you asked me to do?




","02/Feb/13 11:09;sebb;Yes. 
But that was wrong, sorry. 

setSendBufferSize(int) and setReceiveBufferSize(int) aren't the problem in 3.2.
The problem was that ftp.setBufferSize() was overriding the socket buffer sizes if > 0.

The fix was supposed to be as you originally had it, i.e. ftp.setBufferSize(0);
I don't understand why that did not fix it for you.

Anyway, glad the snapshot works.",,,,,,,
FTPClient: Slow data transfer rate if __bufferSize != 0,NET-493,12623546,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Duplicate,,mic_mim,mic_mim,12/Dec/12 13:20,17/Apr/13 20:05,28/Mar/20 23:25,24/Jan/13 00:36,3.2,,,,FTP,,4,ftpclient,"The patch applied in [NET-465|https://issues.apache.org/jira/browse/NET-465] causes a very slow data transfer rate. The line {code}850: socket.setSendBufferSize(__bufferSize){code} in {code}_openDataConnection_{code} sets the buffer size to 1024  by default. With this size I had a very bad transfer rate on windows 7 and XP. The wireshark log shows that each FTP-DATA packet is exactly 1024 bytes long and has to be acknowledged on the TCP layer before the next one is sent. I don't know why, but when I set the buffer size to 0 (FTPClient.setBufferSize) the transfer rate is fine. ",Windows 7 32bit / Windows XP 32bit,,,,,,,,,,NET-465,,"12/Dec/12 13:23;mic_mim;screenshot-1.jpg;https://issues.apache.org/jira/secure/attachment/12560564/screenshot-1.jpg","12/Dec/12 13:24;mic_mim;screenshot-2.jpg;https://issues.apache.org/jira/secure/attachment/12560565/screenshot-2.jpg",,2.0,,,,,,,,,,,,,,,,,,,,2012-12-23 06:12:06.476,,,false,,,,,,,,,,,,,,,,,297256,,,Thu Jan 24 00:36:10 UTC 2013,,,,,,,"0|i14nev:",235258,,,,,,,,,,,,,,,,"12/Dec/12 13:23;mic_mim;Screenshot-1: __bufferSize > 0","12/Dec/12 13:24;mic_mim;Screenshot-2: __bufferSize == 0","23/Dec/12 06:12;lca;I've come across this as well. It might be a deeper underlying issue with Java 7 (or, worst case, my issue differs from yours). Are you using Java 7? My FTP code functions just fine in Java 6 whether I use the Apache Commons Net or Sun Net libraries, but when I switch to Java 7, both slow down dramatically (about 100 times slower, e.g. 800Kb/s in J6 becomes 8.0KB/s in J7). As you've already done, setting the buffer state to 0 returned things to normal for the Apache library. Unfortunately, for the Java 7 Sun lib, there was no similar setting. Profiling my program I detect that it spent an inordinate amount of time executing within the Sun RMI-TCP section; perhaps that's where the underlying problem lies.

Thanks for putting this on watch!","23/Dec/12 13:07;mic_mim;I'm not sure with which version of Java I have tested it because I switched to 7 and back to 6... Currently I am out of the office and will be back on Monday, 7th of January 2013. I'll report back...","07/Jan/13 08:34;erik.wramner;I don't know if this is the root cause, but we have had severe performance issues with FTP using commons-net 3.2. A file that normally takes seconds to transfer may take more than an hour. We have observed that often the file is transferred relatively quickly, but then it can take a very long time before the response from the remote server that the file has been successfully received reaches our code (and the logs in commons-net). Reverting to 3.1 solves the performance issues. We are using JDK 1.7_09 on Windows Server 2003.","08/Jan/13 06:58;mic_mim;@[~lca]: I have Java 6 (Build 1.6.0 37)
@[~ewrdk]: Have you tried to set the buffer size to 0?","08/Jan/13 09:32;erik.wramner;No, we have only observed that the application transfers files with FTP much faster (seconds/minutes rather than hours) with 3.1 than with 3.2. The application code is unchanged. It doesn't set the buffer size, using the default. Files are sent with client.storeFile(fileName, inputStream). We can't experiment in production, this is an important system, but if I can find time I will try to run some tests. Not sure how easy it is to reproduce in the test environment, though.","23/Jan/13 09:56;chadwilson;We've also had severe performance issues with 3.2. We have this problem on Java 1.6.0u37 on Red Hat 4.5, Windows 7 64-bit and Windows XP 32-bit so don't see that it is either JRE or TCP stack related. All have similarly massive slowdowns. In our environment FTPing ~20MB in 3 files went from taking 3 seconds to over 9 minutes.","23/Jan/13 19:10;sebb;Since the socket size is currently only set when the socket is created, a (messy) work-round with the existing code is to set the desired socket size (or set it to zero), create the socket, and then immediately reset the size to a value more suitable for the buffered streams if desired.","24/Jan/13 00:36;sebb;NET-465 has been re-opened to deal with this.",,,,
Binary store to mainframe hangs under 3.2,NET-490,12618820,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Cannot Reproduce,,dmolony,dmolony,05/Dec/12 03:17,08/Dec/12 02:16,28/Mar/20 23:25,08/Dec/12 02:16,3.2,,,,FTP,,0,,"When storing a large binary file (almost 4MB) the STOR command hangs. It works fine with commons-net-3.2-20120413.112211-57.jar, but since changing to the 3.2 release it no longer works. Reverting to the previous jar file works again.

It is a ravel file, file type Image, data structure Record.

I have verbose mode set, the last message shown is the '125 Storing data set xxx.yyy' After that, nothing more.

If I use ftp directly (without java), the same file transfers successfully.",Windows 7.,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2012-12-05 14:15:19.9,,,false,,,,,,,,,,,,,,,,,296068,,,Sat Dec 08 02:16:34 UTC 2012,,,,,,,"0|i14513:",232278,,,,,,,,,,,,,,,,"05/Dec/12 14:15;sebb;Can you do a thread dump when the application hangs?

There have been quite a few changes since 2012-04-13 and it would help narrow down the problem.","05/Dec/12 21:33;dmolony;Hi Sebb

How would I do that?

Denis





","05/Dec/12 23:07;sebb;http://www.crazysquirrel.com/computing/java/basics/java-thread-dump.jspx","08/Dec/12 02:03;dmolony;I have been running the application from within Eclipse and it is dependent on several other jar files. Today I have managed to build everything into a single jar and transfer it to the Windows machine. Aaaand it works.

I can only assume that the 3.2 jar file that I had downloaded to the Windows machine is corrupt. My apologies for this bug report, please close it.


 


","08/Dec/12 02:16;ggregory;The user cannot reproduce the report after downloading a fresh copy of our jar.",,,,,,,,,
TelnetInputStream blocks ReaderThread while trying to notify TelnetInputListner,NET-506,12640739,Bug,Resolved,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Minor,Cannot Reproduce,,edenevair,edenevair,04/Apr/13 10:24,09/Feb/17 23:39,28/Mar/20 23:25,09/Feb/17 23:39,3.2,,,,Telnet,,0,,"As it's said in javadoc for the method registerInputListener of the class TelnetClient, ""incoming bytes are being added to the internal buffer asynchronously"". But it seems to be not so. In reality, the call of the method telnetInputAvailable of TelnetInputListner in ReaderThread blocks it and we are always able to read just 1 byte of data from stream.

I'm not pretty sure, whether it's a bug or I have to do something by my self in my implementation of TelnetInputLister in case I want to get more then 1 byte at one read from stream?",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,321198,,,2013-04-04 10:24:11.0,,,,,,,"0|i1jf4f:",321543,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
CLONE - Retrieving files from AS400 FTP systems returns null timestamps in FTPFile.getTimestamp,NET-573,12831590,Bug,Resolved,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Minor,Cannot Reproduce,,dalapple,dalapple,21/May/15 03:03,08/Feb/17 00:25,28/Mar/20 23:25,08/Feb/17 00:25,2.2,3.2,3.3,,FTP,,0,,"We are trying to list files from AS400 systems and retrieve the timestamps from these files using the following code:

{code}
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.UnknownHostException;

import org.apache.commons.net.PrintCommandListener;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPHTTPClient;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.FTPConnectionClosedException;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPReply;
import org.apache.commons.net.ftp.FTPSClient;
import org.apache.commons.net.io.CopyStreamEvent;
import org.apache.commons.net.io.CopyStreamListener;
import org.apache.commons.net.util.TrustManagerUtils;

public final class FTPAccess {
	private String server;
	private String username;
	private String password;
	private String path ;

	public String getPath() {
		return path;
	}
	public void setPath(String path) {
		this.path = path;
	}
	public static void main(String[] args) throws UnknownHostException {
		FTPAccess ftpAccess = new FTPAccess();
		ftpAccess.setServer(""X.X.X.X"");
		ftpAccess.setUsername(""XXXXXX"");
		ftpAccess.setPassword(XXXXXXX"");
		ftpAccess.setPath(""/reports"");
		ftpAccess.getFile();
	}
	public void getFile() throws UnknownHostException {
		
		FTPClient ftpClient = new FTPClient();
		
		try {
			InetAddress serveIPAddress = InetAddress.getByName(server);
			ftpClient.setPassiveLocalIPAddress(serveIPAddress);
			ftpClient.connect(serveIPAddress);
			System.out.println(""Connected to "" + server + ""."");

			int reply = ftpClient.getReplyCode();
			if (!FTPReply.isPositiveCompletion(reply)) {
				System.err.println(""FTP server refused connection."");
				System.err.println(ftpClient.getReplyString());
				ftpClient.disconnect();
			} else {
			}

			if (!ftpClient.login(username, password)) {
				System.out.println(ftpClient.getReplyString());
				ftpClient.logout();
			} else{
				diplayContent(ftpClient, path);

			}

		} catch (IOException e) {
			if (ftpClient.isConnected()) {
				try {
					ftpClient.disconnect();
				} catch (IOException ioException) {
					// do nothing
				}
			}
			System.err.println(""Could not connect to server."");
			// e.printStackTrace();
			System.exit(1);
		}

		// } catch (FTPConnectionClosedException e) {
		// error = true;
		// System.err.println(""Server closed connection."");
		// e.printStackTrace();
		// } catch (IOException e) {
		// error = true;
		// e.printStackTrace();
		// } finally {
		// if (ftp.isConnected()) {
		// try {
		// ftp.disconnect();
		// } catch (IOException f) {
		// // do nothing
		// }
		// }
		// }

	} // end main

	public String getServer() {
		return server;
	}

	public void setServer(String server) {
		this.server = server;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}
	
	public void diplayContent(FTPClient ftpClient, String path) throws IOException {
		System.out.println(path);
		for (FTPFile ftpFile : ftpClient.listFiles(path)) {
			if(ftpFile.isDirectory() ){
				diplayContent(ftpClient, path+""/""+ftpFile.getName());
			} else{
				System.out.println(path+""/""+ftpFile.getName());
				System.out.println(ftpFile.getTimestamp());
			}
		}
		
	}

}
{code}

The LIST command which is used internally in the FTPClient retrieves the timestamps successfully. However after parsing the FTPFile has a null value for the timestamp field.

The null value is returned just when a user place the file in the AS400 usint the NetServer Servivice. This is used to share foldes between windows network and the AS/400

Please help us fix this problem. It is not critical to us.
","Commons Net 3.2
FTP System: AS400 systems
I5/OS Version 5 Release 4 Modification 0
",,,,,,,,,NET-498,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2015-06-18 22:07:04.773,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,Wed Feb 08 00:25:14 UTC 2017,,,,,,,"0|i2f0vj:",9223372036854775807,,,,,,,,,,,,,,,,"21/May/15 03:10;dalapple;Am getting the same issue as the original cloned ticket. I have tried using both commons-net-2.2.jar and commons-net-3.3.jar with AS400 ftp.

When I use the command java -jar commons-net-examples-3.3.jar FTPClientExample -l X.X.X.X <username> <password> /reports
Below is what I get:
ZFTPDEV          9069 05/20/15 15:36:52 *STMF

I do see the timestamp value when using FTPFile.getRawListing() and FTPFile.toString(). But when I use FTPFile.getTimestamp(), the timestamp returns null. 

Is this an known issue with AS400 server? I have validated the timestamp configured matches the time listed in rawlisting.","21/May/15 03:13;dalapple;Here is snippet of the code:
{code} 
        FTPClient ftpClient = new FTPClient();
        FTPClientConfig conf = new FTPClientConfig(FTPClientConfig.SYST_AS400);
        conf.setDefaultDateFormatStr(""MM/dd/yy HH:mm:ss"");
        
        ftpClient.configure(conf);
        System.out.println(conf.getDefaultDateFormatStr());
        
        try {
            ftpClient.connect(server, port);
            ftpClient.login(user, pass);
 
            // use local passive mode to pass firewall
            ftpClient.enterLocalPassiveMode();
 
            // get details of a file or directory
            String remoteFilePath = ""/DRV/AUDWRKSHET"";
            System.out.println(""Num of files: "" + ftpClient.listFiles(remoteFilePath).length);
            FTPFile ftpFile = ftpClient.listFiles(remoteFilePath)[0];
            if (ftpFile != null) {
                String name = ftpFile.getName();
                long size = ftpFile.getSize();
               // String timestamp = ftpFile.getTimestamp().getTime().toString();
                String type = ftpFile.isDirectory() ? ""Directory"" : ""File"";
				System.out.println(ftpFile.getRawListing());
				System.out.println(ftpFile.toString());
                System.out.println(""Name: "" + name);
                System.out.println(""Size: "" + size);
                System.out.println(""Type: "" + type);
                //System.out.println(""Timestamp: "" + timestamp);
                System.out.println(""Time: "" + ftpFile.getTimestamp());
            } else {
                System.out.println(""The specified file/directory may not exist!"");
            }
 
            ftpClient.logout();
            ftpClient.disconnect();
 
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (ftpClient.isConnected()) {
                try {
                    ftpClient.disconnect();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
{code}

Here is output:
MM/dd/yy HH:mm:ss
Num of files: 1
ZFTPDEV          9069 05/20/15 15:36:52 *STMF      /DRV/AUDWRKSHET/AUDWRK0204232015114625.PDF
ZFTPDEV          9069 05/20/15 15:36:52 *STMF      /DRV/AUDWRKSHET/AUDWRK0204232015114625.PDF
Name: AUDWRK0204232015114625.PDF
Size: 9069
Type: File
Time: null
","18/Jun/15 22:07;sebb;There  are a couple of issues here.

1) FTPClientExample in 3.3 does not allow the server type or the default date format string to be defined. The server type is determined from the response to the SYST command. However the default date format for AS/400 is ""yy/MM/dd HH:mm:ss"", which cannot be used to parse the date as MM cannot be 20. So the example is bound to fail.

2) I have tried to reproduce the problem with the code snippet. However that works fine when tried with a dummy server using the StubFtpServer [1]. So long as the code sets the default date string correctly, the timestamp is parsed correctly. 

3) The code snippet calls ftpClient.listFiles twice; this does not seem to affect the result, but should be avoided.

My plan of action is to update the FTPClientExample so that the default date format can be specified. Hopefully the 3.4-SNAPSHOT code can then be used to help debug the problem.

Is there a publicly accessible server that can be used for testing?

[1] http://mockftpserver.sourceforge.net/stubftpserver-getting-started.html","18/Jun/15 22:53;sebb;URL: http://svn.apache.org/r1686331
Log:
Add test for NET-573

Modified:
    commons/proper/net/trunk/src/test/java/org/apache/commons/net/ftp/parser/OS400FTPEntryParserTest.java
","19/Jun/15 00:18;sebb;Note: the current code is available from the ASF SNAPSHOT repo if you want to test against the AS/400 server.

Use the following FTPClientExample options to set up the correct server type and date format:
{noformat}
-S ""AS/400"" -y ""MM/dd/yy HH:mm:ss""
{noformat}
","22/Jun/15 16:53;dalapple;Thank you, Sebb. I have contacted our data center vendor to see if we can provide a public ftp access to reproduce the issue. Would send through your apache email if I am able to get it. 


","08/Feb/17 00:25;sebb;Not possible to proceed further without access to a suitable server.

If the issue is still present with the current code please re-open with a suitable test case.",,,,,,,
Retrieving files from AS400 FTP systems returns null timestamps in FTPFile.getTimestamp,NET-498,12630432,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Minor,Incomplete,,slehiman,slehiman,01/Feb/13 20:07,21/May/15 03:03,28/Mar/20 23:25,17/Apr/13 22:22,3.2,,,,FTP,,0,,"We are trying to list files from AS400 systems and retrieve the timestamps from these files using the following code:

{code}
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.UnknownHostException;

import org.apache.commons.net.PrintCommandListener;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPHTTPClient;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.FTPConnectionClosedException;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPReply;
import org.apache.commons.net.ftp.FTPSClient;
import org.apache.commons.net.io.CopyStreamEvent;
import org.apache.commons.net.io.CopyStreamListener;
import org.apache.commons.net.util.TrustManagerUtils;

public final class FTPAccess {
	private String server;
	private String username;
	private String password;
	private String path ;

	public String getPath() {
		return path;
	}
	public void setPath(String path) {
		this.path = path;
	}
	public static void main(String[] args) throws UnknownHostException {
		FTPAccess ftpAccess = new FTPAccess();
		ftpAccess.setServer(""X.X.X.X"");
		ftpAccess.setUsername(""XXXXXX"");
		ftpAccess.setPassword(XXXXXXX"");
		ftpAccess.setPath(""/reports"");
		ftpAccess.getFile();
	}
	public void getFile() throws UnknownHostException {
		
		FTPClient ftpClient = new FTPClient();
		
		try {
			InetAddress serveIPAddress = InetAddress.getByName(server);
			ftpClient.setPassiveLocalIPAddress(serveIPAddress);
			ftpClient.connect(serveIPAddress);
			System.out.println(""Connected to "" + server + ""."");

			int reply = ftpClient.getReplyCode();
			if (!FTPReply.isPositiveCompletion(reply)) {
				System.err.println(""FTP server refused connection."");
				System.err.println(ftpClient.getReplyString());
				ftpClient.disconnect();
			} else {
			}

			if (!ftpClient.login(username, password)) {
				System.out.println(ftpClient.getReplyString());
				ftpClient.logout();
			} else{
				diplayContent(ftpClient, path);

			}

		} catch (IOException e) {
			if (ftpClient.isConnected()) {
				try {
					ftpClient.disconnect();
				} catch (IOException ioException) {
					// do nothing
				}
			}
			System.err.println(""Could not connect to server."");
			// e.printStackTrace();
			System.exit(1);
		}

		// } catch (FTPConnectionClosedException e) {
		// error = true;
		// System.err.println(""Server closed connection."");
		// e.printStackTrace();
		// } catch (IOException e) {
		// error = true;
		// e.printStackTrace();
		// } finally {
		// if (ftp.isConnected()) {
		// try {
		// ftp.disconnect();
		// } catch (IOException f) {
		// // do nothing
		// }
		// }
		// }

	} // end main

	public String getServer() {
		return server;
	}

	public void setServer(String server) {
		this.server = server;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}
	
	public void diplayContent(FTPClient ftpClient, String path) throws IOException {
		System.out.println(path);
		for (FTPFile ftpFile : ftpClient.listFiles(path)) {
			if(ftpFile.isDirectory() ){
				diplayContent(ftpClient, path+""/""+ftpFile.getName());
			} else{
				System.out.println(path+""/""+ftpFile.getName());
				System.out.println(ftpFile.getTimestamp());
			}
		}
		
	}

}
{code}

The LIST command which is used internally in the FTPClient retrieves the timestamps successfully. However after parsing the FTPFile has a null value for the timestamp field.

The null value is returned just when a user place the file in the AS400 usint the NetServer Servivice. This is used to share foldes between windows network and the AS/400

Please help us fix this problem. It is not critical to us.
","Commons Net 3.2
FTP System: AS400 systems
I5/OS Version 5 Release 4 Modification 0
",,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2013-02-01 21:22:25.986,,,false,,,,,,,,,,,,,,,,,310926,,,Fri Feb 01 21:22:25 UTC 2013,,,,,,,"0|i1hnq7:",311271,,,,,,,,,,,,,,,,"01/Feb/13 21:22;sebb;What happens if you try using the NET example app below ?

java -jar commons-net-examples-3.2.jar FTPClientExample -l X.X.X.X <username> <password> /reports

This should list the commands followed by the directory listing.

Each file is listed twice, once in raw mode and once as a formatted string derived from the parsed data.

You can also use FTPFile.getRawListing() in your application.",,,,,,,,,,,,,
Apache FTPClient doesn't handle common responses to PWD,NET-502,12631756,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Minor,Duplicate,,barrkel,barrkel,11/Feb/13 17:39,18/Jun/13 16:04,28/Mar/20 23:25,11/Feb/13 19:02,3.2,,,3.3,FTP,,0,,"Common FTP servers (like vsftpd) responses' to PWD don't have a commentary as per RFC959.

vsftpd, MockFtpServer and others respond thusly:

> 257 ""/""

The current handling in FTPClient.__parsePathname simply returns everything after ""257 "". This breaks other code that relies on Apache FTPClient, like the Camel FTP2 component.

I suggest that, for increased resilience, this brief response be special-cased.

vsftpd maintainer has been notified too, but it's just an email address.",,,,,,,,,,,NET-492,,,,,0.0,,,,,,,,,,,,,,,,,,,,2013-02-11 18:05:59.547,,,false,,,,,,,,,,,,,,,,,312252,,,Tue Jun 18 16:04:16 UTC 2013,,,,,,,"0|i1hvwv:",312598,,,,,,,,,,,,,,,,"11/Feb/13 18:05;sebb;As far as I can tell, this was fixed as part of NET-442, which is included in NET 3.2.

There does not seem to be a problem with the current code, see:

URL: http://svn.apache.org/r1444907
Log:
Add test for NET-502

Modified:
    commons/proper/net/trunk/src/test/java/org/apache/commons/net/ftp/FTPClientTest.java


Please provide a test case that shows the problem.
For example, as a patch for FTPClientTest.java.","11/Feb/13 19:00;barrkel;Hmmm; it looks like http://svn.apache.org/r1420655 fixed it, NET-492 rather than NET-442.","18/Jun/13 16:04;cerker;Barry is right, in 
  end = lastIndexOf(""\"" ""), 
there was a space after the double quote, so for a valid response like '257 ""/""', the result was '""/""' instead of '/'.

I stumbled upon this using the current Camel version 2.11.0.",,,,,,,,,,,
Race Condition on TelnetClient.disconnect() and TelnetInputStream.run() . java.lang.IllegalStateException: Queue is full! Cannot process another character.,NET-501,12631346,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Minor,Fixed,,jlastiri,jlastiri,07/Feb/13 22:07,12/Jun/13 21:09,28/Mar/20 23:25,06/Jun/13 11:33,3.2,,,3.3,Telnet,,0,,"I'm getting the following exception while disconnecting a threaded (readerThread=true) TelnetClient connection. 

{code}
Exception in thread ""Thread-160"" java.lang.IllegalStateException: Queue is full! Cannot process another character. 
	at org.apache.commons.net.telnet.TelnetInputStream.__processChar(TelnetInputStream.java:339)
	at org.apache.commons.net.telnet.TelnetInputStream.run(TelnetInputStream.java:647)
	at java.lang.Thread.run(Thread.java:722)
{code}

I noticed that when TelnetClient.disconnect() is called the attribute __threaded is set to false while the thread in the TelnetInputStream.run() method could call TelnetInputStream().__processChar(...) throwing IllegalStateException


This is a test program to reproduce the issue

{code}
public class TestTelnetClient implements Runnable {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		ArrayList<Thread> workers = new ArrayList<Thread>();
		for( int i=0; i<1000; ++i){
			Thread t = new Thread ( new TestTelnetClient() );
			t.start();
			workers.add(t);
		}
		for (Thread t : workers ) {			
			try {
				t.join();			
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}			

	}

	@Override
	public void run() {
		System.out.println(""Starting thread..."");
		TelnetClient tc = new TelnetClient();
//		tc.setReaderThread(false);
		try {
			tc.connect(""localhost"", 23);
			tc.setSoTimeout(1000);
			InputStream in = tc.getInputStream();
			int ch;
			in.read();
		} catch (SocketException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			System.out.println(""Disconnecting..."");
			try {
				tc.disconnect();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
	}

}
{code}

A telnet server (telnetd) is required. I also modified the initial banner ( /etc/issue.net ) with a lot of characters to get a better chance to receive information while calling disconnect.",Ubuntu 12.04 64 bits x86,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2013-06-06 11:33:38.315,,,false,,,,,,,,,,,,,,,,,311842,,,Thu Jun 06 11:33:38 UTC 2013,,,,,,,"0|i1htdz:",312188,,,,,,,,,,,,,,,,"06/Jun/13 11:33;sebb;Thanks for the report; fix applied to SVN:

URL: http://svn.apache.org/r1490241
Log:
NET-501 Race Condition on TelnetClient.disconnect() and TelnetInputStream.run()

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java
",,,,,,,,,,,,,
FTPClient.printWorkingDirectory() incorrectly parses certain valid PWD command results,NET-492,12623503,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Minor,Fixed,,t.jedrzejewski,t.jedrzejewski,12/Dec/12 09:09,12/Jun/13 21:09,28/Mar/20 23:25,23/Jan/13 00:56,3.2,,,3.3,FTP,,0,,"The new implementation of FTPClient.printWorkingDirectory() which tries to follow RFC959 is invalid and can return unescaped or invalid path in certain circumstances. According to the commentary, the author interpreted the RFC that the output is always constructed in the following way:

257<space>""<directory-name>""<space><commentary>
Where any double quotes within the directory name are doubled.

First issue: the RFC does not state that the output for PWD looks exactly like this, but that the reply code is the same, as for MKD. Especially, PWD does not return any commentary, and VSFTPD server (which I'm trying to talk to) does not print out the terminating space, but ends up the output on the last double quote. The algorithm uses the following code to detect the end of the quoted path:

int end = reply.lastIndexOf(""\"" "");

If there is no terminating space, the last double quote cannot be found, and as a result, the method returns the unescaped directory name:

""/foo""

instead of

/foo

Second issue: the current implementation would not work in case of the following directory:

/Foo/Bar"" /Joe

PWD command output:

257 ""/Foo/Bar"""" /Joe""

Value returned by printWorkingDirectory():

/Foo/Bar""

Note to the administrators: the problem has been found in commons-net 3.2 version, but JIRA claims it is unreleased and does not allow me to choose it.",,,,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2012-12-12 10:50:39.268,,,false,,,,,,,,,,,,,,,,,297212,,,Fri May 17 14:47:31 UTC 2013,,,,,,,"0|i14n3b:",235206,,,,,,,,,,,,,,,,"12/Dec/12 10:50;sebb;I see what you mean about the RFC now; pity it does not have any examples for PWD responses...

Looks like the code change was added in the fix for NET-442.

The fix should be simple for conforming servers:

Strip enclosing quotes and de-duplicate any embedded quotes.

If the reply is not enclosed in quotes, then it should probably be returned as is.","12/Dec/12 11:22;sebb;URL: http://svn.apache.org/viewvc?rev=1420619&view=rev
Log:
NET-492 FTPClient.printWorkingDirectory() incorrectly parses certain valid PWD command results

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/ftp/FTPClient.java","12/Dec/12 11:36;t.jedrzejewski;You're right that this RFC lacks examples - I've also spent some time trying to figure out, what's going on :). I found another FTP server, which on the other hand, prints out a commentary string for PWD:

PWD
257 ""/"" is current directory.

So it seems that we should consider both cases: when the commentary is present, and when it is not. Test cases:

257 /path/without/quotes
257 ""/path/with/delimiting/quotes/without/commentary""
257 ""/path/with/quotes"""" /inside/but/without/commentary""
257 ""/path/with/quotes"""" /inside/string"" and with commentary
257 ""/path/with/quotes"""" /inside/string"" and with commentary that also ""contains quotes""","12/Dec/12 11:38;sebb;Unfortunately it seems that several servers do generate comments, for example:

257 ""/"" is the current directory

257 ""DDDD:[PPPP]"" is current directory.","12/Dec/12 12:47;sebb;Hopefully, this now fixes the issue:

URL: http://svn.apache.org/viewvc?rev=1420638&view=rev
Log:
NET-492 FTPClient.printWorkingDirectory() incorrectly parses certain valid PWD command results

Modified:
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/ftp/FTPClient.java

This fix will fail to extract the path correctly if the commentary contains a quote followed by a space.
Just realised it will also fail to detect a comment followed by trailing quote.

Looks like one needs to detect the trailing path quote by looking for the first un-doubled quote. Drat.
","12/Dec/12 13:22;sebb;Hopefully this is now sufficient!

Passes all the test cases (plus a couple of invalid ones).

If you want to try the SNAPSHOT build it should soon be available from the ASF snapshot repo at:

https://repository.apache.org/content/groups/snapshots/

If the jar contains the class FTPClientTest then it includes the fix below.

Note that SNAPSHOT builds have not undergone any QA and are not formal ASF releases, so use at your own risk!

URL: http://svn.apache.org/viewvc?rev=1420655&view=rev
Log:
NET-492 FTPClient.printWorkingDirectory() incorrectly parses certain valid PWD command results
Rework to look for lone trailing quote

Added:
    commons/proper/net/trunk/src/test/java/org/apache/commons/net/ftp/FTPClientTest.java   (with props)
Modified:
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/ftp/FTPClient.java
","12/Dec/12 13:28;t.jedrzejewski;I'll make a test tomorrow with the snapshot to see it, but if it passes all the tests, I think it should work. Hopefully, I can wait for the official 3.3 release, because my home-made workaround is sufficient for me. Thanks for quick response.","23/Jan/13 00:56;sebb;I assume the latest change fixed the problem.
If not, please re-open with full details.","15/May/13 09:41;moberhuber;I just also ran into this:

https://bugs.eclipse.org/bugs/show_bug.cgi?id=408092

Let me state that this is _not_ a minor issue but a severe regression in Commons Net 3.2 , which makes Commons Net 3.2 unusable for us. The effect of this for end users is that some FTP servers just don't work at all. It looks like at Eclipse we'll have to stick to the old Commons Net 2.2 release until a fix for this is officially released -- since Commons Net 3.0 and 3.1 had other severe regressions that made them impossible for us to pick up (deadlocks and threading problems).

Is anybody thinking about releasing Commons Net 3.2.1 or 3.3 ?","15/May/13 10:23;sebb;Are you able to test Eclipse with a SNAPSHOT of the current code?","15/May/13 10:25;moberhuber;I can test with a snapshot, but I won't be able to release with a snapshot due to the Eclipse IP Policies.","15/May/13 10:33;sebb;OK, thanks, please let us know how the test goes.

I did not mean to suggest that Eclipse could release with a snapshot release - we don't do that either.
We only provide snapshots for cases such as these where it helps other developers provide feedback.

As to a release, yes, I guess one is overdue now. We might be able to start one in the next week or so if the testing goes OK.","16/May/13 20:44;moberhuber;Found snapshot from 17-apr-2013 here: http://vmbuild.apache.org/continuum/workingCopy.action?projectId=107&projectName=Commons+Net&userDirectory=target
","17/May/13 14:47;sebb;Snapshots are at

https://repository.apache.org/content/groups/snapshots/

as per my comment dated 12/Dec/12 13:22"

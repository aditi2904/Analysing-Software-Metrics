Summary,Issue key,Issue id,Issue Type,Status,Project key,Project name,Project type,Project lead,Project description,Project url,Priority,Resolution,Assignee,Reporter,Creator,Created,Updated,Last Viewed,Resolved,Affects Version/s,Affects Version/s,Affects Version/s,Fix Version/s,Component/s,Component/s,Due Date,Votes,Labels,Labels,Labels,Labels,Labels,Labels,Description,Environment,Original Estimate,Remaining Estimate,Time Spent,Work Ratio,Σ Original Estimate,Σ Remaining Estimate,Σ Time Spent,Security Level,Outward issue link (Duplicate),Outward issue link (Reference),Attachment,Custom field (Affects version (Component)),Custom field (Attachment count),Custom field (Blog - New Blog Administrators),Custom field (Blog - New Blog PMC),Custom field (Blog - Write access),Custom field (Blog Administrator?),Custom field (Blogs - Admin for blog),Custom field (Blogs - Email Address),Custom field (Blogs - Existing Blog Access Level),Custom field (Blogs - Existing Blog Name),Custom field (Blogs - New Blog Write Access),Custom field (Blogs - Username),Custom field (Bug Category),Custom field (Bugzilla - Email Notification Address),Custom field (Bugzilla - List of usernames),Custom field (Bugzilla - PMC Name),Custom field (Bugzilla - Project Name),Custom field (Bugzilla Id),Custom field (Bugzilla Id),Custom field (Change Category),Custom field (Complexity),Custom field (Date of First Response),Custom field (Discovered By),Custom field (Docs Text),Custom field (Enable Automatic Patch Review),Custom field (Epic Link),Custom field (Estimated Complexity),Custom field (Evidence Of Open Source Adoption),Custom field (Evidence Of Registration),Custom field (Evidence Of Use On World Wide Web),Custom field (Existing GitBox Approval),Custom field (External issue ID),Custom field (External issue URL),Custom field (Fix version (Component)),Custom field (Git Notification Mailing List),Custom field (Git Repository Import Path),Custom field (Git Repository Name),Custom field (Git Repository Type),Custom field (GitHub Options),Custom field (Github Integration),Custom field (Github Integrations - Other),Custom field (Global Rank),Custom field (INFRA - Subversion Repository Path),Custom field (Initial Confluence Contributors),Custom field (Last public comment date),Custom field (Level of effort),Custom field (Machine Readable Info),Custom field (New-TLP-TLPName),Custom field (Priority),Custom field (Project),Custom field (Protected Branch),Custom field (Rank),Custom field (Rank (Obsolete)),Custom field (Review Date),Custom field (Reviewer),Custom field (Severity),Custom field (Severity),Custom field (Skill Level),Custom field (Skill Level),Custom field (Source Control Link),Custom field (Space Description),Custom field (Space Key),Custom field (Space Name),Custom field (Tags),Custom field (Test and Documentation Plan),Custom field (Testcase included),Custom field (Tester),Custom field (Workaround),Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment,Comment
FTPClient corrupts a specific file,NET-489,12616813,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Blocker,Invalid,,corby10,corby10,19/Nov/12 21:03,17/Apr/13 19:55,28/Mar/20 23:23,09/Jan/13 12:50,3.1,,,,FTP,,,0,,,,,,,"This very specific file is corrupted on transfer.
It doesn't work for any other file I've tried (about 100 different files).

Hex dump of source file:
0000000 8b1f 0808 69b3 50aa 0300 6472 5f66 7361
0000010 6f73 6c5f 6e69 2e6b 7874 0074 ce3d 11c9
0000020 30c0 4308 b3d1 8d5d 8b00 ffa5 92c6 26d8
0000030 37d7 0d1f 8d0a da2a 65a0 1608 1ea6 16e1
0000040 6755 0e4b 0647 758b 75c5 8037 62fc b457
0000050 7c77 527d 61ef b0b6 691b 23a9 76e1 7025
0000060 19c4 722d ea9b 627f a72f 7c19 a33e f9a9
0000070 c685 0000 0000
0000075

Hexdump of destination file:
0000000 8b1f 0808 69b3 50aa 0300 6472 5f66 7361
0000010 6f73 6c5f 6e69 2e6b 7874 0074 ce3d 11c9
0000020 30c0 4308 b3d1 8d5d 8b00 ffa5 92c6 26d8
0000030 37d7 0a1f 2a8d a0da 0865 a616 e11e 5516
0000040 4b67 470e 8b06 c575 3775 fc80 5762 77b4
0000050 7d7c ef52 b661 1bb0 a969 e123 2576 c470
0000060 2d19 9b72 7fea 2f62 19a7 3e7c a9a3 85f9
0000070 00c6 0000
0000074
","CentOS 6.3 (Linux 2.6.32-131.17.1.el6.x86_64)
Oracle Java 1.7",,,,,,,,,,,"19/Nov/12 21:06;corby10;test-file.bin;https://issues.apache.org/jira/secure/attachment/12554237/test-file.bin",,1.0,,,,,,,,,,,,,,,,,,,,2013-01-09 12:50:26.583,,,false,,,,,,,,,,,,,,,,,258684,,,Wed Jan 09 12:50:26 UTC 2013,,,,,,,"0|i0l29r:",121018,,,,,,,,,,,,,,,,"19/Nov/12 21:06;corby10;File that causes the corruption.","09/Jan/13 12:50;sebb;The file contains CR and LF which have been mangled.

It was probably transferred using ASCII mode; make sure the file is transferred using BINARY mode.",,,,,,,,,,
Regression: TelnetInputStream#available() blocks,NET-466,12557443,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Critical,Fixed,,moberhuber,moberhuber,24/May/12 13:39,17/Apr/13 19:57,28/Mar/20 23:24,05/Oct/12 18:00,3.1,,,3.2,Telnet,,,0,,,,,,,"When testing with Commons Net 3.1 for Eclipse https://bugs.eclipse.org/bugs/show_bug.cgi?id=194473 , I found that our telnet client blocks when the ReaderThread is running and waiting for new data. Investigation shows that our code blocks on TelnetInputStream#available().

This regression is due to the code introduced for NET-437 ""TelnetInputStream doesn't support non-blocking IO when reader thread is not enabled"":

TelnetInputStream#available() now calls super.available() which is declared as ""synchronized"" on BufferedInputStream in JDK 1.6.0_21 at least. But at the same time, the telnet ReaderThread has already the Monitor on BufferedInputStream and doesn't give it up while sitting in read0().

This seems to be exactly the situation that the comment before TelnetInputStream#close() warns about:
    // Cannot be synchronized.  Will cause deadlock if run() is blocked
    // in read because BufferedInputStream read() is synchronized.

This is a severe issue since it violates the specification and use of available().",,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2012-05-30 02:14:59.693,,,false,,,,,,,,,,,,,,,,,244024,,,Fri Aug 31 10:30:33 UTC 2012,,,,,,,"0|i05aj3:",28803,,,,,,,,,,,,,,,,"30/May/12 02:14;ggregory;Are you saying that all methods in {{BufferedInputStream}} marked with {{synchronized}} should also be marked as such in {{TelnetInputStream}}?

This in TelnetClient is confusing:

{code:java}
protected void _connectAction_() throws IOException
    {
        super._connectAction_();
        TelnetInputStream tmp = new TelnetInputStream(_input_, this, readerThread);
        if(readerThread)
        {
            tmp._start();
        }
        // __input CANNOT refer to the TelnetInputStream.  We run into
        // blocking problems when some classes use TelnetInputStream, so
        // we wrap it with a BufferedInputStream which we know is safe.
        // This blocking behavior requires further investigation, but right
        // now it looks like classes like InputStreamReader are not implemented
        // in a safe manner.
        __input = new BufferedInputStream(tmp);
        __output = new TelnetOutputStream(this);
    }
{code}

{{TelnetInputStream}} subclasses {{BufferedInputStream}} and this method wraps the {{TelnetInputStream}} in a {{BufferedInputStream}}. Is that what is intended here? If so, it needs better docs!","23/Jul/12 17:35;konrad.garus;I have not inspected the source, just wanted to report/confirm that {{TelnetInputStream.available()}} seems to be blocking indefinitely. I noticed this regression after upgrading from 1.4.1 to 3.1.

It's a severe issue for us, blocking update which we direly need for other areas (FTP client).","23/Jul/12 18:06;konrad.garus;The issue disappears as soon as I disable the reader thread.

Here are relevant stacktraces from the lock-up:

{code}""Thread-0"" daemon prio=10 tid=0x00007f721c61a000 nid=0x3dea runnable [0x00007f7218ee7000]
   java.lang.Thread.State: RUNNABLE
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:129)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:256)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:317)
	- locked <0x00000007d70f7510> (a java.io.BufferedInputStream)
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
	- locked <0x00000007d70fbab0> (a org.apache.commons.net.telnet.TelnetInputStream)
	at org.apache.commons.net.telnet.TelnetInputStream.__read(TelnetInputStream.java:140)
	at org.apache.commons.net.telnet.TelnetInputStream.run(TelnetInputStream.java:608)
	at java.lang.Thread.run(Thread.java:662)

   Locked ownable synchronizers:
	- None



""main"" prio=10 tid=0x00007f721c00d000 nid=0x3dd0 waiting for monitor entry [0x00007f7223c29000]
   java.lang.Thread.State: BLOCKED (on object monitor)
	at java.io.BufferedInputStream.available(BufferedInputStream.java:381)
	- waiting to lock <0x00000007d70fbab0> (a org.apache.commons.net.telnet.TelnetInputStream)
	at org.apache.commons.net.telnet.TelnetInputStream.available(TelnetInputStream.java:563)
	- locked <0x00000007d70fe320> (a [I)
	at java.io.BufferedInputStream.available(BufferedInputStream.java:381)
	- locked <0x00000007d7100498> (a java.io.BufferedInputStream)
	at com.example.Main.main(Main.java:95)

   Locked ownable synchronizers:
	- None
{code}","18/Aug/12 10:30;sebb;Applied a fix which should work:

URL: http://svn.apache.org/viewvc?rev=1374548&view=rev
Log:
NET-466 Regression: TelnetInputStream#available() blocks

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java


It might be that synchronizing the methods as per Gary's comment would also fix the issue.

Does anyone have a suitable test case that shows the issue?","31/Aug/12 07:38;posken;We had problems using the Telnet client in 3.1 with the 'available' that blocked (every time again) So we reverted to 3.0.1. I now downloaded the source code from the trunk and tried it again and now it just works. Don't have a real test case because it is rather interwoven in the code. So not a ""scientific"" test, rather a practical one. ","31/Aug/12 10:30;sebb;Thanks, that's very useful to know.",,,,,,
FTPClient.setPassiveNatWorkaround assumes host is outside site local range,NET-588,12945508,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,davenice,davenice,29/Feb/16 16:20,14/Feb/17 22:22,28/Mar/20 23:24,07/Feb/17 20:05,3.1,3.3,3.4,3.6,FTP,,,0,,,,,,,"We have a NAT firewall between two ""site local"" 10.x networks. The effect is that the FTP library tries to make data connections to the wrong host because the passive NAT workaround doesn't operate if the FTP connection is made to a ""site local"" private address and the host returned in the PASV reply is also ""site local"".

I see that Damon Dan references pretty much the exact issue within bug NET-363 when the workaround was originally introduced.

Users with ""site local"" networks would be quite at liberty to subnet within the network, I guess, to suit their administrative needs, so this seems like a valid issue.

Options I can see:
1) Include a way of forcing the workaround in place
2) Remove the selectivity around rewriting the host only if the PASV reply is ""site local"" and original host isn't... Issue here is around a server that has multiple endpoints for data connections?
3) Allow the user to specify their own data host via API
4) Check for whether the PASV reply address is in a different subnet to the original host we connected to and apply the workaround if so

I haven't yet identified a workaround within the current code!",,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2016-12-05 05:09:19.697,,,false,,,,,,,,,,,,,,,,,9223372036854775807,,,Tue Feb 07 20:05:00 UTC 2017,,,,,,,"0|i2tx5z:",9223372036854775807,,,,,,,,,,,,,,,,"05/Dec/16 05:09;nexus7tha;I've just created a pull request at https://github.com/apache/commons-net/pull/5
The change will allow overwriting PASV reply address by implementing method  ""String resolve(String hostname) ""","02/Jan/17 14:34;nexus7tha;Can someone help to review the fix? Thanks.","07/Feb/17 20:05;sebb;Thanks for the report and the PR.
Applied:

URL: http://svn.apache.org/viewvc?rev=1782074&view=rev
Log:
NET-588 FTPClient.setPassiveNatWorkaround assumes host is outside site local range

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/ftp/FTPClient.java
    commons/proper/net/trunk/src/test/java/org/apache/commons/net/ftp/FTPClientTest.java
",,,,,,,,,
TFTP sendFile retry broken,NET-477,12604125,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,jkwalnut,jkwalnut,20/Aug/12 21:17,14/Feb/17 22:22,28/Mar/20 23:24,09/Feb/17 15:57,3.1,3.2,,3.6,TFTP,,,0,,,,,,,"TFTPClient.java sendFile() method does not retry after initial timeout.

Between revisons 1088720 & 1229692 the 'continue' statements were changed to 'continue _sendPacket'. After the initial timeout of bufferedReceive() these cause the control to flow to the outer loop and never retry. If the control did flow accordingly, the retry would loop indefinitely since the timeouts variable is reset to zero each time as well.

I am using a workaround by calling bufferedSend(sent) just before continue, in place of the 'continue _sendPacket' statement.

It looks as if similar logic was applied to the receiveFile() method as well.

Revision:1229692
Time:01/10/2012 01:14 PM
Author:sebb
Path:http://svn.apache.org/repos/asf/commons/proper/net/trunk/src/main/java/org/apache/commons/net/tftp/TFTPClient.java
Message:NET-410 Apache Commons TFTP does not handle RFC 783 retransmits
","Linux **** 3.2.0-29-generic #46-Ubuntu SMP Fri Jul 27 17:03:23 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux
java version ""1.6.0_26""
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)",,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2016-09-09 10:09:05.629,,,false,,,,,,,,,,,,,,,,,307050,,,Mon Feb 13 13:09:14 UTC 2017,,,,,,,"0|i1a487:",267151,,,,,,,,,,,,,,,,"09/Sep/16 10:09;v.dlugopolskaya;I have the same problem with receiveFile() method.
When TFTP-server is not running and timeout is more than 1, receiveFile() method doesn't throw an error, it returns an empty file.","02/Dec/16 08:57;niranjanam;I have similar issue. TFTP sendFile does not throw exception if an invalid/ not reachable IP address is given in the place of host name.
The ""timeouts"" variable is getting reset to 0 each time continue _sendPacket; is called from exception, so SocketException / IOException Connection timed out. is never thrown.","09/Feb/17 15:57;sebb;The TFTP send/receive logic has been completely rewritten and now appears to handle retries properly.

URL: http://svn.apache.org/viewvc?rev=1782352&view=rev
Log:
NET-477 TFTP sendFile retry broken

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/tftp/TFTPClient.java

","13/Feb/17 07:15;niranjanam;Thank you, is there a tentative release date/month for the new 3.6 jar release","13/Feb/17 13:09;sebb;yes, see the dev list",,,,,,,
Unsupported record version Unknown-48.48 - commons-net-3.1.jar,NET-495,12626942,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,pant_deepak,pant_deepak,10/Jan/13 14:04,27/Jul/15 08:24,28/Mar/20 23:24,17/Apr/13 22:16,3.1,,,3.2,FTP,,,2,commons-net-3.1.jar,ftp,ftps,,,,"FTPSClient bundled in ""commons-net-3.1.jar"" returns ""Unsupported record version Unknown-48.48"" error when I try to FTP a zero byte file. This error doesn't come when we use ""commons-net-2.0.jar"" file.

javax.net.ssl.SSLException: Unsupported record version Unknown-48.48
        at com.sun.net.ssl.internal.ssl.InputRecord.readV3Record(InputRecord.java:375)
        at com.sun.net.ssl.internal.ssl.InputRecord.read(InputRecord.java:360)
        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:830)
        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:787)
        at com.sun.net.ssl.internal.ssl.AppInputStream.read(AppInputStream.java:75)
        at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:264)
        at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:306)
        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:158)
        at java.io.InputStreamReader.read(InputStreamReader.java:167)
        at java.io.BufferedReader.fill(BufferedReader.java:136)
        at java.io.BufferedReader.readLine(BufferedReader.java:299)
        at java.io.BufferedReader.readLine(BufferedReader.java:362)
        at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:310)
        at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:290)
        at org.apache.commons.net.ftp.FTP.getReply(FTP.java:637)
        at org.apache.commons.net.ftp.FTPClient.completePendingCommand(FTPClient.java:1637)
        at org.apache.commons.net.ftp.FTPClient._storeFile(FTPClient.java:599)
        at org.apache.commons.net.ftp.FTPClient.__storeFile(FTPClient.java:557)
        at org.apache.commons.net.ftp.FTPClient.storeFile(FTPClient.java:1795)
        at FTPSExample.main(FTPSExample.java:173)
","Windows XP, Windows 7, HP-UX",,,,,,,,,,,"10/Jan/13 14:05;pant_deepak;FTPSClient_Error_Dump.txt;https://issues.apache.org/jira/secure/attachment/12564166/FTPSClient_Error_Dump.txt",,1.0,,,,,,,,,,,,,,,,,,,,2013-03-20 14:59:35.509,,,false,,,,,,,,,,,,,,,,,303634,,,Mon Jul 27 08:24:58 UTC 2015,,,,,,,"0|i17dbj:",251127,,,,,,,,,,,,,,,,"10/Jan/13 14:05;pant_deepak;The Log file containing both the Java stack trace as well as the SSL dump collected using -Djavax.net.debug=all option.","20/Mar/13 14:59;burnyguru;Seems to be fixed in commons-net-3.2.jar.
Although there is no exception thrown, I still see the same error in the log when using -Djavax.net.debug=all.


Log-Output:
=================================
main, called close()
main, called closeInternal(true)
main, SEND TLSv1 ALERT:  warning, description = close_notify
Padded plaintext before ENCRYPTION:  len = 32
0000: 01 00 80 0B 3F A9 CD FD   8A 6A 26 EB 22 96 76 87  ....?....j&."".v.
0010: 7B 85 48 BC 34 9F 09 09   09 09 09 09 09 09 09 09  ..H.4...........
main, WRITE: TLSv1 Alert, length = 32
[Raw write]: length = 37
0000: 15 03 01 00 20 A0 FA 91   F8 3C 60 ED 1F 53 D8 76  .... ....<`..S.v
0010: B9 29 02 B2 1E A9 27 D7   90 F4 C8 41 99 DF C5 D4  .)....'....A....
0020: D6 C1 8F 18 AD                                     .....
main, called closeSocket(selfInitiated)
main, waiting for close_notify or alert: state 5
[Raw read]: length = 5
0000: 35 30 30 20 4F                                     500 O
main, Exception while waiting for close javax.net.ssl.SSLException: Unsupported record version Unknown-48.48","17/Apr/13 22:16;sebb;Comment says fixed in 3.2.

Please re-open if still present in 3.3-SNAPSHOT","27/Jul/15 08:24;hauser@acm.org;maybe it now ignores a missing final answer as in the mail example https://community.oracle.com/thread/1590373 

<< props.put(""mail.smtp.quitwait"", ""false"");
This property means :

If set to false, the QUIT command is sent and the connection is immediately
closed. If set to true (the default), causes the transport to wait for the
response to the QUIT command.>>
",,,,,,,,
DataConnection-Socket hangs on InputStream.read(),NET-470,12560464,Bug,Open,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,,,fenvariel,fenvariel,13/Jun/12 08:45,19/May/14 15:22,28/Mar/20 23:24,,3.0,3.0.1,3.1,,FTP,,,0,,,,,,,"I'm using ftps (SSL/implicit) and passive mode. connect(), login() and cwd() commands work well.

But if I have to open a data connection (for example for LIST) the socket is opened successfully using one of the desired ""dataports"". The underlying InputStream is created as well without any Exception.
But then every attempt to read from the InputStream will eventually time out or hang forever (depending on the DataTimeout-value).

If I use the FileZilla client, everything works successfully and fast. FileZilla issues the following commands:

{color:blue}
{{C: SYST}}
{{A: 215 UNIX Type: L8}}
{{C: FEAT}}
{{A: 211-Extensions supported}}
{{A:  SIZE}}
{{A:  REST}}
{{A:  MDTM}}
{{A:  MFMT YYYYMMDDHHMMSS filename}}
{{A:  MDTM YYYYMMDDHHMMSS filename}}
{{A:  MDTM YYYYMMDDHHMMSS[+-TZ] filename}}
{{A:  XCRC filename}}
{{A:  XMD5 filename}}
{{A:  AUTH TLS}}
{{A:  AUTH SSL}}
{{A:  MODE Z}}
{{A:  PBSZ}}
{{A:  PROT}}
{{A: 211 End of FEAT}}
{{C: USER ********}}
{{A: 331 Password required for ********}}
{{C: PASS ********}}
{{A: 230 User ******** logged in}}
{{C: PBSZ 0}}
{{A: 200 PBSZ 0 successful}}
{{C: PROT P}}
{{A: 200 Data connection set to: Private}}
{{C: TYPE I}}
{{A: 200 TYPE set to BINARY}}
{{C: PASV}}
{{A: 227 Entering passive mode (217,70,161,93,39,15)}}
{{C: LIST}}
{{A: 150 Opening ASCII mode data connection}}
{{A: 226 Directory send OK}}
{color}

Issueing the commands ""PBSZ 0"" and ""PROT P"" before and calling enterLocalPassiveMode() and setFileType(FTP.BINARY_FILE_TYPE) will produce the same commandsequence (without SYST and FEAT), but with the error described above.
              
On top of that: disconnect() will block forever, originating from socket.close() which is blocking. The only way to avoid this is calling logout() (even if login() wasn't issued). Then disconnect will return as expected.


","Windows 7 (x86), Netbeans 7, JDK 1.6 and JDK 1.7",,,,,,,,,,,"13/Jun/12 11:14;fenvariel;examplePatch.diff;https://issues.apache.org/jira/secure/attachment/12531954/examplePatch.diff",,1.0,,,,,,,,,,,,,,,,,,,,2012-06-13 09:38:38.785,,,false,,,,,,,,,,,,,,,,,307045,,,Mon May 19 15:22:23 UTC 2014,,,,,,,"0|i1a46v:",267145,,,,,,,,,,,,,,,,"13/Jun/12 09:38;sebb;We'll need to know how FileZilla differs from NET.
Can you turn on command logging?

For example:
ftpclient.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out), true));
","13/Jun/12 11:12;fenvariel;Here you are:

{color:blue}
{{220 PSFTPd. Secure FTP Server ready}}
{{Connected to ******** on 990}}
{{USER *******}}
{{331 Password required for *******}}
{{PASS *******}}
{{230 User ******* logged in}}
{{SYST}}
{{215 UNIX Type: L8}}
{{Remote system is UNIX Type: L8}}
{{PBSZ 0}}
{{200 PBSZ 0 successful}}
{{PROT P}}
{{200 Data connection set to: Private}}
{{TYPE I}}
{{200 TYPE set to BINARY}}
{{PASV}}
{{227 Entering passive mode (217,70,161,93,39,12)}}
{{LIST}}
{{150 Opening ASCII mode data connection}}
{color}
{color:red}
java.net.SocketTimeoutException: Read timed out
   at java.net.SocketInputStream.socketRead0(Native Method)
   at java.net.SocketInputStream.read(SocketInputStream.java:150)
   at java.net.SocketInputStream.read(SocketInputStream.java:121)
   at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:283)
   at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:325)
   at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:177)
   at java.io.InputStreamReader.read(InputStreamReader.java:184)
   at java.io.BufferedReader.fill(BufferedReader.java:154)
   at java.io.BufferedReader.readLine(BufferedReader.java:317)
   at java.io.BufferedReader.readLine(BufferedReader.java:382)
   at org.apache.commons.net.ftp.FTPFileEntryParserImpl.readNextEntry(FTPFileEntryParserImpl.java:52)
   at org.apache.commons.net.ftp.FTPListParseEngine.readStream(FTPListParseEngine.java:133)
   at org.apache.commons.net.ftp.FTPListParseEngine.readServerList(FTPListParseEngine.java:102)
   at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:3103)
   at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:3072)
   at org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:2731)
   at testapplication.ftp.FTPClientExample.main(FTPClientExample.java:335)
{color}
{color:blue}
QUIT
226 Directory send OK (<-- Received when reading answer for QUIT)
{color}

This was produced using Netbeans 7, JDK 1.7 and a slightly changed version of {http://www.google.de/url?sa=t&rct=j&q=ftpclientexample%20java&source=web&cd=1&ved=0CFIQFjAA&url=http%3A%2F%2Fcommons.apache.org%2Fnet%2Fexamples%2Fftp%2FFTPClientExample.java&ei=83LYT7iSH4TKsgaA_ejjDw&usg=AFQjCNHYEWShtZ-WVhvvFvmnjmsfWanevg&cad=rja]

I'll attach a diff with the modifications. Arguments are ""-l -b -p SSL,true"" and of course the login and server preferences.

I'll try to get more information about the server as well...
","13/Jun/12 11:14;fenvariel;Diff for FTPClienntExample.java that was used to produce the posted output.","13/Jun/12 14:39;fenvariel;I just talked to the FTP-Server admin. He told me that they are using the PSFTP-server v.1.5 Build 199.

Passive ports are between 9990 and 9999.

netstat-result: (xxx.xxx.xxx.xxx = IP in local network; yyy.yyy.yyy.yyy = IP of ftp-server)
{color:blue}
{{TCP xxx.xxx.xxx.xxx:49980  yyy.yyy.yyy.yyy:ftps ESTABLISHED}}
{{TCP xxx.xxx.xxx.xxx:49983  yyy.yyy.yyy.yyy:9999 ESTABLISHED}}
{color}","14/Jun/12 07:15;fenvariel;I just looked around for some other java libraries. ftp4j works fine:
# PBSZ 0 and PROT P are sent automatically after LOGIN and PASS
# LIST is executed without error (so, the DataConnection is established and can be read).
# disconnect() just works as expected, even without sending QUIT.

ftp4j opensource as well, so I guess you may have a look at how they handle the DataSocket.

If you want I can post my sourcecode for ftp4j as well.

{color:blue}
{{A: 220 PSFTPd. Secure FTP Server ready}}
{{C: USER *********}}
{{A: 331 Password required for *********}}
{{C: PASS ********}}
{{A: 230 User ******* logged in}}
{{C: FEAT}}
{{A: 211-Extensions supported}}
{{A:  SIZE}}
{{A:  REST}}
{{A:  MDTM}}
{{A:  MFMT YYYYMMDDHHMMSS filename}}
{{A:  MDTM YYYYMMDDHHMMSS filename}}
{{A:  MDTM YYYYMMDDHHMMSS\[+-TZ\] filename}}
{{A:  XCRC filename}}
{{A:  XMD5 filename}}
{{A:  AUTH TLS}}
{{A:  AUTH SSL}}
{{A:  MODE Z}}
{{A:  PBSZ}}
{{A:  PROT}}
{{A: 211 End of FEAT}}
{{C: PBSZ 0}}
{{A: 200 PBSZ 0 successful}}
{{C: PROT P}}
{{A: 200 Data connection set to: Private}}
{{C: TYPE A}}
{{A: 200 TYPE set to ASCII}}
{{C: PASV}}
{{A: 227 Entering passive mode (217,70,161,93,39,6)}}
{{C: LIST}}
{{A: 150 Opening ASCII mode data connection}}
{{A: 226 Directory send OK}}
{color}

If you need me to do some more tests for you, I'll be glad to help. Unfortunately and needn't provide the ftp-server credentials.","01/Jul/12 13:49;bogdro;Does it work with plaintext (no SSL) connections? Perhaps you have the same problem as in NET-408, but your server doesn't break the connection with an error?","19/May/14 15:22;hauser@acm.org;similar to NET-542 ",,,,,
The call to _storeFileStream method uses the wrong _openDataConnection_ method.,NET-522,12691404,Bug,Resolved,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,kimballgcole,kimballgcole,27/Jan/14 16:10,27/Jan/14 20:55,28/Mar/20 23:24,27/Jan/14 20:55,3.1,,,3.3,,,,0,,,,,,,"An SSL connection between the host and client has been established I try to get an OutputStream for a file the resulting socket (and OutputStream of that socket) is not secured. Further investigation shows that the FTPSClient calls \_storeFileStream which in turn calls the method \_openDataConnection\_(String command, String arg) within the FTPClient class. This method \_openDataConnection\_ does not return a SSL socket. the method should call \_openDataConnection\_(int command, String arg) within the FTPSClient so that the proper SSL Socket is returned.",,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2014-01-27 17:58:50.977,,,false,,,,,,,,,,,,,,,,,370149,,,Mon Jan 27 20:55:05 UTC 2014,,,,,,,"0|i1rso7:",370451,,,,,,,,,,,,,,,,"27/Jan/14 17:58;sebb;The FTPSClient class overrides the \_openDataConnection\_ method to allow for this.
So long as you are using an instance of FTPSClient this will work properly.

The most likely cause is a bug in the calling code.
Please provide sample code which shows the problem.","27/Jan/14 20:55;kimballgcole;Code has been fixed in either release 3.2. or 3.3",,,,,,,,,,
FTPClient setSendBufferSize and setReceiveBufferSize on data socket,NET-465,12556266,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,jimkerwood,jimkerwood,17/May/12 18:09,22/Nov/13 07:32,28/Mar/20 23:24,17/Apr/13 19:48,3.1,,,3.3,FTP,,,0,,,,,,,When sending large files the need to set the send and receive buffer sizes on the data socket is much more important than the command socket.  Please either give 2 more setters or make the setters set the data socket and leave the command socket alone.,All,900,900,,0%,900,900,,,,NET-519,"27/Jun/12 16:18;bogdro;ftp-bufsize.diff;https://issues.apache.org/jira/secure/attachment/12533668/ftp-bufsize.diff",,1.0,,,,,,,,,,,,,,,,,,,,2012-06-27 16:18:28.931,,,false,,,,,,,,,,,,,,,,,259483,,,Wed Apr 17 19:58:44 UTC 2013,,,,,,,"0|i0lpv3:",124841,,,,,,,,,,,,,,,,"27/Jun/12 16:18;bogdro;The buffer size already was for the data connections, but it was set only on the buffered input and output streams, not on the sockets. The attached file, ftp-bufsize.diff, fixes this. Now if the buffer size is greater than zero, it is used both on the streams and the sockets. If the buffer size is set to 0 or less, the defaults are used (nothing is set on the sockets and the buffered streams use the default size).","02/Jul/12 16:50;bogdro;I forgot about one possibility - you can create and install your own SocketFactory that creates Sockets with your own buffer size. Look at the DefaultSocketFactory class in Commons-Net. It is very simple and you can make your own class like this and pass it to the setSocketFactory() method. This will work even with older releases of Commons-Net and you don't have to wait for the next version.","12/Jul/12 23:45;sebb;Thansk for the patch.

I applied it with some minor simplifications.
Also it seemed more sensible to set the socket size where the socket is created.

URL: http://svn.apache.org/viewvc?rev=1361003&view=rev
Log:
NET-465 FTPClient setSendBufferSize and setReceiveBufferSize on data socket

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/ftp/FTPClient.java
","23/Jan/13 09:58;chadwilson;There is some concern this might have caused some rather severe performance issues in some circumstances (including the default configuration) - would one of the submitters/reviewers care to comment on NET-493?","23/Jan/13 10:36;tn;The patch changed the default send/receive buffer size on the socket to 1024 which is pretty low considering the normal default, e.g. on my system

 * sendBuffer: 131072
 * receiveBuffer: 2097152

I can understand that the slow rates are due to starvation of the higher layers based on constant buffer overruns of the underlying socket (and the involved TCP overhead of throttling the datarate). I think the idea outlined by Bogdan, to supply a custom SocketFactory would be a better solution than actually adjusting the socket buffer size in a similar way than the internal buffer.

Another quick fix would be to not to adjust the socket buffers by default, only when the user provides another buffer size. Right now, the socket buffers are always adjusted (to the default, if there is no user-supplied value).","23/Jan/13 18:46;sebb;In retrospect it would have been better to provide additional getters/setters for the Socket size, as the requirements are quite different.

It's unfortunate that the Javadoc suggests that the buffer size applies to the sockets, whereas it was originally applied to the buffered streams.

Since the socket size is currently only set when the socket is created, a (messy) work-round with the existing code is to set the desired socket size, create the socket, and then immediately reset the size to a value more suitable for the buffered streams.","23/Jan/13 21:24;sebb;Reworked the original fix:


URL: http://svn.apache.org/viewvc?rev=1437740&view=rev
Log:
NET-465 FTPClient setSendBufferSize and setReceiveBufferSize on data socket
Reworked the original fix.

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/ftp/FTPClient.java
","23/Jan/13 21:27;sebb;The Apache snapshot repo should now contain the latest 3.3-SNAPSHOT code if anyone wants to give it a try.

Feedback welcome.","23/Jan/13 21:43;tn;I tested to download a large file (~17MB) with the FTPClientExample (default settings) from a remote server with both the 3.2 and the latest version (trunk):

 - 3.2: 2 KB/s
 - trunk: ~700 KB/s

so it seems to work fine again.

Thanks!","23/Jan/13 21:48;sebb;OK, thanks!

Does anyone want to test whether the new settters for SO_SNDBUF and SO_RCVBUF work OK?","17/Apr/13 19:48;sebb;Assume it's OK. If not please re-open with details.","17/Apr/13 19:58;tn;There was a comment from somebody on the user ml with some performance figures.
The conclusion was that 3.3-SNAPSHOT was still slower than 3.1 although better than 3.2."
Wrong passivHost when using FTPHTTPClient with EPSV,NET-480,12607037,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,triumvir,triumvir,11/Sep/12 11:08,12/Jun/13 21:09,28/Mar/20 23:24,23/Jan/13 00:36,3.1,3.2,,3.3,FTP,,,0,,,,,,,"At the FTPHTTPClient Class in line 99 the Answer from the EPSV Command will parse to receive the Data port and the passiv Host.
\_parsePassiveModeReply(\_replyLines.get(0))
In this function the \_\_passivHost is set to the remoteAddress, but this address is determine by ""this.\_socket\_.getInetAddress();"" and the socket is the socket of the proxy Server and NOT of the ftp Server.


",All Systems with ftp Access over http,,,,,,,,,,,"13/Sep/12 11:13;triumvir;FTPSquidProxyClient.java;https://issues.apache.org/jira/secure/attachment/12544970/FTPSquidProxyClient.java",,1.0,,,,,,,,,,,,,,,,,,,,2012-09-12 01:32:00.168,,,false,,,,,,,,,,,,,,,,,244049,,,Wed Jan 23 00:36:07 UTC 2013,,,,,,,"0|i05fjj:",29615,,,,,,,,,,,,,,,,"12/Sep/12 01:32;sebb;Are you referring to the condition in the \_parsePassiveModeReply() method where the response is overwritten if the parsed reply is a siteLocalAddress but the target address is not? i.e. where a NAT box has changed the PASV reply?

Have you got a (tested) patch you can provide?","12/Sep/12 08:11;triumvir;Oh sorry, it's my mistake.
I mean the methode _parseExtendedPassiveModeReply() (EPSV not PASV).
No, I haven't a patch for it, only a dirty workaround for me :-)
I will look today, if I found a clean solution for it.","12/Sep/12 10:17;sebb;Can you attach a copy of the work-round?
That would at least show what works for you.","13/Sep/12 11:13;triumvir;Own testet SquidProxy Class with working EPSV Protocol.
A new class variable is add : host
This variable contain the original destination Address.
At _openDataConnection_ the variable __passivHost will set to the destination address.
By using PASV the variable is set to ""this.getPassiveHost()"", by using EPSV to this.host","23/Jan/13 00:36;sebb;Finally got around to looking at this again.
It looks like the work-round you used is necessary, so committed it:

URL: http://svn.apache.org/viewvc?rev=1437243&view=rev
Log:
NET-480 Wrong passivHost when using FTPHTTPClient with EPSV

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/ftp/FTPHTTPClient.java
",,,,,,,
ftpclient.listfiles return file name as FILE1.236 -rw-rw-r--    1  T0000001 FTP        5242484 Oct 15 18:20 FILE1.237,NET-488,12615359,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Cannot Reproduce,,sumanmehta,sumanmehta,08/Nov/12 18:22,17/Apr/13 22:17,28/Mar/20 23:24,17/Apr/13 22:17,3.1,,,,FTP,,,0,,,,,,,"while listing files from the FTP server ftpclient.listfiles return file name as 
{noformat}
<file name 1> -rw-rw-r--    1  T0000001 FTP        5242484 Oct 15 18:20 <file name 2>.
{noformat}

the single string contains two file name and carriage return character is at end of line.sometimes, second file doesnot come under the list or missing from the list.

However, the list contains all valid file name except the one bad string.It occurs not consistently. 
","FTP SERVER UNIX, FTP CLIENT=windows and connect through Websphere application server version 6.1",,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2013-01-23 00:06:56.863,,,false,,,,,,,,,,,,,,,,,256498,,,Wed Jan 23 00:06:56 UTC 2013,,,,,,,"0|i0hbbb:",99095,,,,,,,,,,,,,,,,"23/Jan/13 00:06;sebb;What are the actual file details on the server that cause the problem?",,,,,,,,,,,
MVSFTPEntryParser.parseSimpleEntry - ArrayIndexOutOfBoundsException,NET-458,12550809,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,dmolony,dmolony,13/Apr/12 10:38,17/Apr/13 19:59,28/Mar/20 23:24,13/Apr/12 11:20,3.0.1,3.1,,3.2,FTP,,,0,,,,,,,"Line 360 in MVSFTPEntryParser.parseSimpleEntry :

    String name = entry.split("" "")[0];

gives an ArrayIndexOutOfBoundsException: 0

It appears to be caused by a partitioned dataset whose members only contain names. No other details (creation date, file type etc).

This is the method, if it helps:

{code}
private boolean parseSimpleEntry(FTPFile file, String entry) {
    if (entry != null && entry.length() > 0) {
        file.setRawListing(entry);
        String name = entry.split("" "")[0];           // <--- error occurs here
        file.setName(name);
        file.setType(FTPFile.FILE_TYPE);
        return true;
    }
    return false;
}
{code}",zOS,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2012-04-13 11:06:56.484,,,false,,,,,,,,,,,,,,,,,235673,,,Fri Apr 13 11:35:09 UTC 2012,,,,,,,"0|i0lpf3:",124769,,,,,,,,,,,,,,,,"13/Apr/12 11:06;sebb;Fix layout","13/Apr/12 11:07;sebb;Looks like the problem is caused by trying to split a string containing only space(s)","13/Apr/12 11:12;dmolony;The PDS contains many members, but all of them appear to have unreadable names (unprintable characters?). There is no other member information available, so that part of the string is definitely blank.","13/Apr/12 11:20;sebb;Thanks for the report. Fixed in SVN, and a new SNAPSHOT has been uploaded to the ASF snapshots repo [1].

[1] http://repository.apache.org/snapshots/","13/Apr/12 11:35;dmolony;Thanks, that fixed it.",,,,,,,
[FTP] retrieveFileStream fails randomly or hangs,NET-46,12342399,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,dennis.meerveld@ubench.com,dennis.meerveld@ubench.com,26/Jul/05 18:59,17/Apr/13 19:57,28/Mar/20 23:24,26/Nov/12 10:35,1.4,3.1,,3.2,FTP,,,0,,,,,,,"For my application I need a way to get the InputStream of a binary file on a
FTPServer. What I did was :

// connect and get ftpFiles as an array
// for each ftpFile ...

InputStream is = ftp.retrieveFileStream(ftpFiles[i].getName());

However, this behaves erratically : sometimes the inputstream is correct and
sometimes it is null (and the ftpFile exists, no weird name or anything odd
about it).

After first blaming my FTPServer (I use GuildFTPd 0.9.9.13) I tried another
FTPServer (Serv-U 6.1), but this also had the same behavior. 

Then I thought I might have to do with timing. So I tried Thread.sleep(xxx) on a
couple of locations but to no avail. In a last attempt (was getting pretty
desperate :) ) I rewrote my original line and replaced it by this :

ByteArrayOutputStream out = new ByteArrayOutputStream();
ftp.retrieveFile(ftpFiles[i].getName(),out);
InputStream is = new ByteArrayInputStream(out.toByteArray());

And much to my surprise, it worked like a charm. Tested it a couple of times (on
both FTPServer products) and works perfectly.

So I'm guessing something is going wrong in your retrieveFileStream
implementation. Maybe something worth looking into ? (easiest fix : use the
ByteArrayOut/InputStream swap :)).

kind regards,

Dennis","Operating System: Windows XP
Platform: PC",,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2005-07-27 02:40:59.0,,,false,,,,,,,,,,,,,,,,,154386,,,Mon Nov 26 10:35:42 UTC 2012,,,,,,,"0|i0rrk7:",160109,,,,,,,,,,,,,,,,"27/Jul/05 02:40;dfs@apache.org;retrieveFileStream has been working essentially unchanged since 1997.  Keep
in mind that retrieveFile performs the exact same operation as retrieveFileStream
to initiate a fiile transfer.  If retrieveFileStream is returning null, then
retrieveFile would return false under the same circumstances.  It's
more likely the issue you've encountered lies elsewhere.  If you
can provide a self-contained program (class with main()) that we can
compile and run, we can better determine if there is something in FTPClient
that requires fixing.  Thanks.","07/Oct/05 19:14;anders@nufort.net;I'm experiencing the same problem as Dennis.

Out of 100 file transfers 2 InputStream's were returned as null.
And, which was my original problem, on one occation the application hung. See
the Java thread below. 

Seems like the FTPClient.retrieveFileStream() call now and then returns a null
InputStream and occationally hangs...

I'm currently using version 1.3.0 so I'll try Dennis fix with the 1.4.0.

Regards,
 Anders M


Current Java thread:
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:429)
	at org.apache.commons.net.telnet.TelnetInputStream.read(TelnetInputStream.java:339)
	- locked <0x447b0098> (a [I)
	at org.apache.commons.net.telnet.TelnetInputStream.read(TelnetInputStream.java:466)
	at java.io.BufferedInputStream.read1(BufferedInputStream.java:220)
	at java.io.BufferedInputStream.read(BufferedInputStream.java:277)
	- locked <0x447b6270> (a java.io.BufferedInputStream)
	at sun.nio.cs.StreamDecoder$CharsetSD.readBytes(StreamDecoder.java:408)
	at sun.nio.cs.StreamDecoder$CharsetSD.implRead(StreamDecoder.java:450)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:182)
	- locked <0x447b60e0> (a java.io.InputStreamReader)
	at java.io.InputStreamReader.read(InputStreamReader.java:167)
	at java.io.BufferedReader.fill(BufferedReader.java:136)
	at java.io.BufferedReader.readLine(BufferedReader.java:299)
	- locked <0x447b60e0> (a java.io.InputStreamReader)
	at java.io.BufferedReader.readLine(BufferedReader.java:362)
	at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:260)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:456)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:484)
	at org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:475)
	at org.apache.commons.net.ftp.FTPClient.retrieveFileStream(FTPClient.java:1327)
	at spar_vo.SparFTPConnectionVO.getFile(SparFTPConnectionVO.java:119)
	at spar_uc.SparGetFileUC.performUseCase(SparGetFileUC.java:63)
	at spar.SparApplication.main(SparApplication.java:97)","04/Apr/11 00:43;sebb;No recent reports.

If this occurs with the NET 2.2 or later, please re-open with details","26/Nov/12 09:25;dheerajvs;I faced a similar hang in retrieveFileStream() when using commons-net-3.1. And the callstack is essentially similar to that posted by [~anders@nufort.net]:

libcore.io.Posix	recvfromBytes	Posix.java	-2	true	
libcore.io.Posix	recvfrom	Posix.java	131	false	
libcore.io.BlockGuardOs	recvfrom	BlockGuardOs.java	164	false	
libcore.io.IoBridge	recvfrom	IoBridge.java	513	false	
java.net.PlainSocketImpl	read	PlainSocketImpl.java	488	false	
java.net.PlainSocketImpl	access$000	PlainSocketImpl.java	46	false	
java.net.PlainSocketImpl$PlainSocketInputStream	read	PlainSocketImpl.java	240	false	
java.io.InputStreamReader	read	InputStreamReader.java	244	false	
java.io.BufferedReader	fillBuf	BufferedReader.java	130	false	
java.io.BufferedReader	read	BufferedReader.java	238	false	
org.apache.commons.net.io.CRLFLineReader	readLine	CRLFLineReader.java	58	false	
org.apache.commons.net.ftp.FTP	__getReply	FTP.java	310	false	
org.apache.commons.net.ftp.FTP	__getReply	FTP.java	290	false	
org.apache.commons.net.ftp.FTP	sendCommand	FTP.java	479	false	
org.apache.commons.net.ftp.FTPClient	_openDataConnection_	FTPClient.java	769	false	
org.apache.commons.net.ftp.FTPClient	_retrieveFileStream	FTPClient.java	1747	false	
org.apache.commons.net.ftp.FTPClient	retrieveFileStream	FTPClient.java	1739	false	

My guess is that in __openDataConnection__(), the following line to set the dataTimeOut should have been set *before* calling sendCommand():
    socket.setSoTimeout(__dataTimeout);

Otherwise, the client would be waiting indefinitely for the server's reply to the RETR command.

FWIW, I'm running it on Android 4.x","26/Nov/12 10:24;sebb;Good catch. 

In the case of ACTIVE_LOCAL_DATA_CONNECTION_MODE, the code uses the __dataTimeout to protect against the server.accept() timing out.

However otherwise (i.e. PASSIVE_LOCAL_DATA_CONNECTION_MODE), the socket timeout is not set until the end of the method, after several commands have been issued.

The code has been changed a bit since 3.1, however there are still some paths where the newly created socket is used before the timeout has been set up.","26/Nov/12 10:35;sebb;URL: http://svn.apache.org/viewvc?rev=1413545&view=rev
Log:
NET-46 retrieveFileStream fails randomly or hangs

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/ftp/FTPClient.java",,,,,,
IMAPClient#fetch() does not handle literal strings,NET-467,12558120,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,sebb,sebb,25/May/12 15:17,17/Apr/13 19:57,28/Mar/20 23:24,26/May/12 12:09,3.1,,,3.2,,,,0,,,,,,,"As reported on the user list, IMAP#fetch(""1"",""body[header]"") fails with an error such as:

org.apache.commons.net.MalformedServerReplyException: Received
unexpected IMAP protocol response from server: 'Return-Path: <snip>'

This is because the code does not currently handle literal strings, i.e.

{nnn}CRLF
textCRLF
...

See http://tools.ietf.org/html/rfc3501#section-4.3",,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,259482,,,2012-05-25 15:17:19.0,,,,,,,"0|i0lpuv:",124840,,,,,,,,,,,,,,,,,,,,,,,,,,,
FTPTimestampParserImpl fails to parse future dates correctly on Feb 28th in a leap year,NET-444,12544538,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,sebb,sebb,29/Feb/12 00:28,17/Apr/13 19:57,28/Mar/20 23:24,29/Feb/12 01:08,3.1,,,3.2,FTP,,,0,,,,,,,"CI tests reported the following test failure on Feb 28th, 2012 (a leap year):

Failed tests:   testParseTimestampWithSlop(org.apache.commons.net.ftp.parser.FTPTimestampParserImplTest): test.slop.roll.back.year expected:<1> but was:<0>

The cause is to do with how lenient future dates are handled.",,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,229724,,,2012-02-29 00:28:16.0,,,,,,,"0|i0lpvz:",124845,,,,,,,,,,,,,,,,,,,,,,,,,,,
FtpClient sends REST when calling listFiles,NET-475,12598668,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,thomasa88,thomasa88,13/Jul/12 07:00,17/Apr/13 19:57,28/Mar/20 23:24,14/Jul/12 11:15,3.0.1,3.1,,3.2,FTP,,,0,LIST,listFiles,offset,REST,restart,setRestartOffset,"First setting a restart offset and then requesting a directory listing makes FtpClient send REST, LIST. The correct behavior should be to send only LIST and send REST on the first file transfer operation.

Versions 3.1 and 3.0.1 of commons-net have shown this behavior in our software.

Following is a minimal sample, tested with version 3.1:

{code}
package test;

import java.io.PrintWriter;

import org.apache.commons.net.PrintCommandListener;
import org.apache.commons.net.ftp.FTPClient;

public class Test {

	public static void main(String[] args) throws Exception {
		FTPClient client = new FTPClient();
		client.addProtocolCommandListener(new PrintCommandListener(
				new PrintWriter(System.out), true));
		
		client.connect(Server.ip);
		client.login(Server.username, Server.password);
		
        client.setRestartOffset(10);
        
        client.listFiles("""");
	}
	
}
{code}

Output:
{code}
220 Welcome to FTP service.
USER *******
331 Please specify the password.
PASS *******
230 Login successful.
SYST
215 UNIX Type: L8
PORT 10,43,92,50,230,56
200 PORT command successful. Consider using PASV.
REST 10
350 Restart position accepted (10).
LIST 
150 Here comes the directory listing.
226 Directory send OK.
{code}","Windows Vista Enterprise SP2
Java SE 1.6",,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2012-07-14 01:29:25.863,,,false,,,,,,,,,,,,,,,,,259480,,,Sat Jul 14 11:15:27 UTC 2012,,,,,,,"0|i0lpuf:",124838,,,,,,,,,,,,,,,,"14/Jul/12 01:29;sebb;The obvious fix is to only set the restart offset immediately before a file transfer.

On further reflection, does it make sense to change NET to delay the sending of REST until the next file transfer?
It seems more natural to me to set the offset immediately before starting the transfer.

So the only change required is to clarify that setRestartOffset() should only be called immediately before a file transfer.","14/Jul/12 11:15;sebb;Clarified Javadoc:

URL: http://svn.apache.org/viewvc?rev=1361522&view=rev
Log:
NET-475 FtpClient sends REST when calling listFiles

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/ftp/FTPClient.java",,,,,,,,,,
TelnetClient InputStream can not read data until timeout!,NET-487,12614470,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,zhaozhihua,zhaozhihua,02/Nov/12 05:40,17/Apr/13 19:57,28/Mar/20 23:24,09/Jan/13 12:40,3.1,,,3.2,Telnet,,,0,commons-net-3.1,,,,,,"After i use telnet clinet connect to a linux server,i get the input stream,but it blocked until timeout after 60 seconds. then i got following message:
login: Login timed out after 60 seconds
When i change commons-net.jar to version 3.0, it works very well!",linux,43200,43200,,0%,43200,43200,,,NET-466,,,,0.0,,,,,,,,,,,,,,,,,,,,2012-11-08 22:19:30.906,,,false,,,,,,,,,,,,,,,,,253940,,,Wed Nov 14 03:26:37 UTC 2012,,,,,,,"0|i0ec8n:",81745,,,,,,,,,,,,,,,,"08/Nov/12 22:19;moberhuber;Sounds like a duplicate of NET-466 which was fixed, could you try a nightly build ?","14/Nov/12 03:26;zhaozhihua;hi,Martin Oberhuber :
Could you give me a url about nightly build? 
I checked out the latest code, builded it and then tested it. It works very well. Thanks!",,,,,,,,,,
"listFiles bug with folder that begins with ""-""",NET-449,12545204,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,sverger,sverger,05/Mar/12 16:50,17/Apr/13 19:57,28/Mar/20 23:24,14/Jul/12 13:23,3.1,,,3.2,FTP,,,0,,,,,,,"FTP Server status:

{code}
root@xxx-srv:/data/Library# tree -A
.
├── -dash
│   ├── -dash.txt
│   ├── file1.txt
│   └── file2.txt
└── test
    ├── file2.txt
    └── file.txt
{code}

Test code:

{code} 
final FTPClient ftp = new FTPClient();
ftp.connect(host, port);
ftp.login(login, pwd);
System.out.println(""PWD: "" + ftp.printWorkingDirectory());
final FTPFile[] listFiles = ftp.listFiles();
for (int i = 0; i < listFiles.length; i++) {
   System.out.println(""["" + i + ""] "" + listFiles[i]);
}

System.out.println(""Files in /-dash"");
final FTPFile[] listFiles2 = ftp.listFiles(""/-dash"");
for (int i = 0; i < listFiles2.length; i++) {
   System.out.println(""["" + i + ""] "" + listFiles2[i]);
}

System.out.println(""Files in -dash"");
final FTPFile[] listFiles3 = ftp.listFiles(""-dash"");
for (int i = 0; i < listFiles3.length; i++) {
   System.out.println(""["" + i + ""] "" + listFiles3[i]);
}
{code} 

results:
{code} 
PWD: /
[0] -dash
[1] test
Files in /-dash
[0] -dash.txt
[1] file1.txt
[2] file2.txt
Files in -dash
[0] -dash
[1] .
[2] ..
[3] test
{code} 
When listing ""-dash"", it list the current directory instead of the destination one.
If I do the same test with the folder test, this time it works as expected.",,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2012-03-05 17:43:12.262,,,false,,,,,,,,,,,,,,,,,230390,,,Sat Jul 14 14:16:41 UTC 2012,,,,,,,"0|i0lpvr:",124844,,,,,,,,,,,,,,,,"05/Mar/12 17:43;sebb;Not sure there's anything Net can do about this.

The parameter to the LIST command is supposed to be a pathname, and it is up to the server to determine if it is a file or a directory.

However, the ""-"" prefix is used by some servers for supporting qualifiers, e.g. -a, -l

This obviously has the potential to be confused with a valid pathname.

If the server fails to recognise ""-data"" as a pathname, then it seems to me that this is a bug in the server.
It ought to behave according to the RFCs.","27/Jun/12 16:35;bogdro;Some servers (most?) probably pass the argument to the ""ls"" command, hence the results. One workaround is provided in the listing above - use absolute paths. Another workaround is: if the path to be listed starts with a dash, prepend a ""./"" to it, but this will work only on Unix-like servers or those which implement TVFS. So, there would be need to call SYST and FEAT on every connect, but what if the server doesn't support FEAT, TVFS or SYST (or replies that it's not a Unix)?
I think it should be the user who should decide to use any of these workarounds (they can do it themselves), but the documentation (at least the Javadoc comment) should mention this case.","14/Jul/12 12:55;sebb;Fix code alignment; simplify.","14/Jul/12 13:23;sebb;Fixed by updating Javadoc.

URL: http://svn.apache.org/viewvc?rev=1361541&view=rev
Log:
NET-449 listFiles bug with folder that begins with ""-"". Clarify Javadoc.

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/ftp/FTPClient.java","14/Jul/12 14:16;sebb;Note: some servers interpret ""--"" to mean end of options.

In which case, you can use:

ftp.listFiles(""-- -dash"");

[I added this to the Javadoc]",,,,,,,
[net] TelnetClient hangs when reader-thread startup delays,NET-456,12547335,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,mariko,mariko,21/Mar/12 06:08,17/Apr/13 19:57,28/Mar/20 23:24,14/Jul/12 13:58,3.1,,,3.2,Telnet,,,0,,,,,,,"I'm trying to use TelnetClient(commons-net-3.1) with the reader-thread enabled,
 but it sometimes hangs.

I tracked ""__receiveState"", and found that the state sometimes changes to invalid ones.

In threaded-mode, TelnetInputStream.__read(boolean mayBlock) is normally called only by TelnetInputStream.run().
But if the read-thread startup delays, it may also called by TelnetInputStream.read()
beacues the value of __threaded is still false.


example of hang-up pattern

1.
// user-thread
telnetClient._connectAction()
TelnetInputStream._start()
__thread.start();                 ... try to start read-thread

2.
// user-thread
TelnetInputStream.read() ... __threaded is still false, so TelnetInputStream.__read() is called.

3.
// read-thread starts (before __read() above dosen't end )
TelnetInputStream.run( ) ... sets __threaded to true, and calls TelnetInputStream.__read()



I think __threaded flag should be set to true just after __thread.start(),
not at the begining of run().

        __thread.start();
        __threaded = true; // add



This problem may related to NET-73
",,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2012-07-14 13:58:13.154,,,false,,,,,,,,,,,,,,,,,232493,,,Sat Jul 14 13:58:13 UTC 2012,,,,,,,"0|i0lpvb:",124842,,,,,,,,,,,,,,,,"14/Jul/12 13:58;sebb;URL: http://svn.apache.org/viewvc?rev=1361549&view=rev
Log:
NET-456 TelnetClient hangs when reader-thread startup is delayed.

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/telnet/TelnetInputStream.java",,,,,,,,,,,
Remove unnecessary Base64 methods,NET-485,12611079,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Fixed,,sebb,sebb,09/Oct/12 22:10,17/Apr/13 19:57,28/Mar/20 23:24,09/Oct/12 22:16,3.1,,,3.2,,,,0,,,,,,,"There are two methods in Base64 which are left-overs from Commons Codec.
They were intended to support the Encoder and Decoder interfaces which are not used in Commons NET.

The following methods should be deleted:

Base64#decode(Object)
Base64#encode(Object)",,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,246539,,,Tue Oct 09 22:16:03 UTC 2012,,,,,,,"0|i07r2v:",43153,,,,,,,,,,,,,,,,"09/Oct/12 22:16;sebb;URL: http://svn.apache.org/viewvc?rev=1396378&view=rev
Log:
NET-485 Remove unnecessary Base64 methods

Modified:
    commons/proper/net/trunk/src/changes/changes.xml
    commons/proper/net/trunk/src/main/java/org/apache/commons/net/util/Base64.java
",,,,,,,,,,,
paths with spaces result in inaccurate file information,NET-454,12546867,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Not A Problem,,digitalsanctum,digitalsanctum,17/Mar/12 00:33,17/Apr/13 19:55,28/Mar/20 23:24,17/Mar/12 18:56,3.0.1,3.1,,,FTP,,,0,ftp,path,,,,,"Calling FTPClient.listFiles(String pathname) results in an inaccurate file list being returned. The following test illustrates the issue:

{code:java}
    @Test
    public void remoteListFilesFailure() throws Exception {

        FTPClient client = new FTPClient();

        client.connect(REMOTE_SERVER);
        client.enterLocalPassiveMode();
        client.login(REMOTE_USERNAME, REMOTE_PASSWORD);
        client.setFileType(FTP.BINARY_FILE_TYPE);

        int reply = client.getReplyCode();
        if (!FTPReply.isPositiveCompletion(reply)) {
            client.disconnect();
            log.error(""FTP server refused connection. reply="" + reply);
        }

        FTPFile[] rootFiles = client.listFiles(""78/1295213/0/476312ca9c653ffc6cc8fb6e1649dae6/ModComp PO # 1054.pdf"");
        Assert.assertEquals(1, rootFiles.length); // <-- fails with rootFiles.length = 0
    }
{code}
","Mac OS X 10.7.3, FTP server is Pure-FTPd on Linux CentOS 5",,,,,,,,,,,"17/Mar/12 14:10;digitalsanctum;FTPClientTest.java;https://issues.apache.org/jira/secure/attachment/12518792/FTPClientTest.java",,1.0,,,,,,,,,,,,,,,,,,,,2012-03-17 01:53:10.671,,,false,,,,,,,,,,,,,,,,,232025,,,Sat Mar 17 18:56:59 UTC 2012,,,,,,,"0|i0y5zj:",197439,,,,,,,,,,,,,,,,"17/Mar/12 01:53;sebb;What are the file names on the server?","17/Mar/12 02:05;sebb;Also, can you perform the listing using command-line FTP ?","17/Mar/12 03:10;sebb;What happens if you try:

{code}
client.listFiles(""78/1295213/0/476312ca9c653ffc6cc8fb6e1649dae6/"");
{code}

I tried setting up an identical test, and everything works OK for me:

{code}
set classpath=commons-net-examples-3.1.jar;commons-net-3.1.jar
java examples/ftp/FTPClientExample -l host user password ""78/1295213/0/476312ca9c653ffc6cc8fb6e1649dae6/ModComp PO # 1054.pdf""
...
215 UNIX Type: Apache FtpServer
Remote system is UNIX Type: Apache FtpServer
PASV
227 Entering Passive Mode (127,0,0,1,18,81)
LIST 78/1295213/0/476312ca9c653ffc6cc8fb6e1649dae6/ModComp PO # 1054.pdf
150 File status okay; about to open data connection.
226 Closing data connection.
-rw-------   1 user group            0 Mar 17 02:47 ModComp PO # 1054.pdf
-rw-------    1 group    user            0 2012-03-17 02:47:00 GMT  ModComp PO # 1054.pdf
NOOP
200 Command NOOP okay.
QUIT
221 Goodbye.
{code}","17/Mar/12 14:09;digitalsanctum;Hi Sebb. The problematic names all have spaces. I've tried other combinations of file names which work fine but spaces are the issue. I'm attaching more tests to illustrate. Below is the output of the command-line:

{code}
ftp> ls 78/1295213/0/476312ca9c653ffc6cc8fb6e1649dae6/
227 Entering Passive Mode (10,6,125,100,127,91)
150 Accepted data connection
drwxr-xr-x    2 8517     8517           73 Mar 16 13:32 .
drwxr-xr-x    2 8517     8517           73 Mar 16 13:32 ..
-rw-r--r--    1 8517     8517        16939 Nov 30  2010 ModComp PO # 1054.pdf
-rw-r--r--    1 8517     8517        16939 Mar 16 13:28 ModComp PO.pdf
-rw-r--r--    1 8517     8517        16939 Mar 16 13:27 sdf sdf.pdf
226-Options: -a -l 
226 5 matches total
ftp> ls 78/1295213/0/476312ca9c653ffc6cc8fb6e1649dae6/ModComp PO #1054.pdf
usage: ls [remote-path [local-file]]
ftp> 
{code}

This all points to a specific issue with Pure-FTPd since I'm not able to reproduce locally using the embedded Apache FTP server. 

Given all of this, what would be a good workaround for the remote host issue of not gracefully handling spaces?
 ","17/Mar/12 17:14;sebb;bq. ftp> ls 78/1295213/0/476312ca9c653ffc6cc8fb6e1649dae6/ModComp PO #1054.pdf
bq. usage: ls [remote-path [local-file]]

That's a feature of the command-line client; it's expecting an optional second parameter.
You need to quote the remote-path, for example:

{code}
ls ""78/1295213/0/476312ca9c653ffc6cc8fb6e1649dae6/ModComp PO #1054.pdf""
{code}

Works for me with Apache FTP server.

Try it with Pure-FTPd.

I think this is a bug in Pure-FTPd.
As far as I am aware, the LIST command only supports a single parameter which is the path.
Try enclosing the path in double-quotes in your test case.","17/Mar/12 18:36;digitalsanctum;Yeah, as I said this doesn't seem to be an issue with Apache FTP server. I did try enclosing the path in double quotes as well as single quotes in my test case and got the same result.

Do you have more information on the suspected bug in Pure-FTPd? I've done some googling with respect to Pure-FTPd and whitespace in the path but didn't find anything conclusive. 

This seems like a use case that would be pretty common and wondering what other people are doing as a workaround for dealing with whitespace in the paths. I guess people are changing the working directory, then calling list with ""."" or no args?

Thanks for your guidance.","17/Mar/12 18:56;sebb;Not a problem in NET; JIRA is not a support forum.

If you want further advice, please subscribe to the Commons User mailing list and ask there.",,,,,
ToNetASCIIInputStream skips LF at the end of the stream,NET-497,12629341,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Not A Problem,,mirko@raner.ws,mirko@raner.ws,25/Jan/13 23:08,17/Apr/13 19:55,28/Mar/20 23:24,29/Jan/13 01:33,3.1,,,,Telnet,TFTP,,0,,,,,,,"I have the following failing test case for ToNetASCIIInputStream:

{noformat}
    public void testToNetASCIIInputStream() throws Exception
    {
        final Charset ASCII = Charset.forName(""ASCII"");
        byte[] data = ""Hello\nWorld\n"".getBytes(ASCII);
        InputStream source = new ByteArrayInputStream(data);
        ToNetASCIIInputStream toNetASCII = new ToNetASCIIInputStream(source);
        byte[] output = new byte[512];
        int length = toNetASCII.read(output);
        byte[] result = new byte[length];
        System.arraycopy(output, 0, result, 0, length);
        assertEquals('\r', result[length-2]);
        assertEquals('\n', result[length-1]);
    }
{noformat}
",,3600,3600,,0%,3600,3600,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2013-01-29 01:29:16.01,,,false,,,,,,,,,,,,,,,,,309659,,,Wed Jan 30 21:37:34 UTC 2013,,,,,,,"0|i1fzz3:",301589,,,,,,,,,,,,,,,,"25/Jan/13 23:09;mirko@raner.ws;Sorry, got all scrambled... please run it through the formatter first. Thanks!","29/Jan/13 01:29;sebb;Thanks for the report, however this is not a bug.

The read(byte[]) method does not guarantee that as much data as possible will be read.
You need to call the method repeatedly until all input has been read.

This behaviour is the same as for java.io.InputStream.

As written, the read(byte[]) method won't block if there are some bytes available.
In that case it will only read what is reported as available.
However, it does not yet know how many bare LFs will be seen, so cannot allow for them.
This is why the method returns earlier than one might expect.

This partially non-blocking feature is not noted in the Javadoc, and it's not clear why the code does it.

Removing the feature would allow your specific test case to work.
However there will still be cases where calling read(byte[]) does not read to end of stream.
If you want to read to end of stream, you need to call the method repeatedly until it returns -1.
You may find it easier to call read().","30/Jan/13 21:37;mirko@raner.ws;O.K., I see what you're saying. This behavior seems to trigger a failure in our application, though. I'll double-check to see if ToNetASCIIInputStream is indeed the culprit and if I extracted the test case correctly.",,,,,,,,,
"After upgrade from JRE 1.6 Update 27 to Update 29 (and up till Update 35), cannot logon using FTPS",NET-479,12606062,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Not A Problem,,mjeffrey@email.com,mjeffrey@email.com,04/Sep/12 11:49,17/Apr/13 19:55,28/Mar/20 23:24,05/Oct/12 18:14,3.1,,,,FTP,,,0,,,,,,,"Using the following code works with JRE Update 27 but not with JRE Update 29 and later (neither Update 30 nor Update 35 work - and there was no Update 28).

{noformat}
final FTPSClient ftpsClient = new FTPSClient(""TLS"", true);

ftpsClient.connect(""test.ftps.xxxx.com"", 6366);
final int replyCode = ftpsClient.getReplyCode();
if (!FTPReply.isPositiveCompletion(replyCode)) {
    throw new RuntimeException();
}
ftpsClient.enterLocalPassiveMode();
if (!ftpsClient.login(""user"", ""pass"")) {
   throw new RuntimeException(""Cannot logon"");
}
{noformat}


With update 29 I receive the exception 'Cannot logon"".
I have tried to determine what has changed between the two releases and it seems there have been some changes to TLS - these are the release notes - with links to the security advisory:
http://www.oracle.com/technetwork/java/javase/6u29-relnotes-507960.html


Update 27 and 29 can be found here:
http://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-javase6-419409.html#jdk-6u27-oth-JPR


I also tried this (I can attach the debug output but it didn't seem to differ significantly between the successful and failed attempts)

{noformat}
System.setProperty(""javax.net.debug"", ""ssl"");
System.setProperty(""sun.security.ssl.allowUnsafeRenegotiation"", ""true"");
System.setProperty(""sun.security.ssl.allowLegacyHelloMessages"" , ""true"");
{noformat}

Unfortunately I do not have any detailed information on the FTPS server I am connecting to (it is a Bank's test server).
Any help would be appreciated.",,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,244050,,,Tue Sep 04 14:49:23 UTC 2012,,,,,,,"0|i05fjr:",29616,,,,,,,,,,,,,,,,"04/Sep/12 12:54;mjeffrey@email.com;I have an update. I have tried to reproduce this locally using FileZilla server (FTPS) but it did not exhibit the same behaviour (it worked correctly with Update 26 and 29). This seems to indicate that it is something special in the bank's FTPS server (I will try to find more details of it).","04/Sep/12 14:44;mjeffrey@email.com;Ok some more info and a workaround.

It seems to be related to this: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7103725
Similar reported here
http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7105007

Contrary to what these bugs state, for me it is not fixed in Update 30 or Update 35. 

This seems to be a workaround for the problem:
System.setProperty(""jsse.enableCBCProtection"", ""false"");



","04/Sep/12 14:49;mjeffrey@email.com;If you want to close it, feel free, but if I find more information I'll post it. ",,,,,,,,,
FTPClient.storeFile never returns in active mode if data channel cannot be established,NET-459,12551634,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Not A Problem,,jaro_chmurny,jaro_chmurny,19/Apr/12 15:18,17/Apr/13 19:55,28/Mar/20 23:24,14/Jul/12 13:41,3.0.1,3.1,,,FTP,,,0,,,,,,,"FTPClient.storeFile(String, InputStream) method is used to upload a file to the FTP server. Before the upload, active mode is chosen via the FTPClient.enterLocalActiveMode() method. However, the FTP server is not able to establish the data channel to the FTP client (for instance because of firewall). The storeFile method blocks and never returns. When I capture the network traffic with Wireshark, I see that there are two responses to the STOR command: the first one indicates that the data channel is going to be established, the second one indicates that the FTP server cannot establish the data channel. However, the storeFile method remains blocked forever, even if I play around with the various timeouts (setSoTimeout, setDefaultTimeout, setControlKeepAliveTimeout, setControlKeepAliveReplyTimeout).",,,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2012-04-20 15:33:46.8,,,false,,,,,,,,,,,,,,,,,236442,,,Wed May 02 22:52:34 UTC 2012,,,,,,,"0|i0y60f:",197443,,,,,,,,,,,,,,,,"20/Apr/12 15:33;sebb;Where exactly does the method block?

Can you take a thread dump to see?","02/May/12 08:36;jaro_chmurny;Here is the thread dump produced by jstack (the main thread is the relevant one):

2012-05-02 10:30:02
Full thread dump Java HotSpot(TM) Client VM (20.6-b01 mixed mode, sharing):

""Low Memory Detector"" daemon prio=6 tid=0x02bab000 nid=0x1294 runnable [0x00000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""C1 CompilerThread0"" daemon prio=10 tid=0x02ba5000 nid=0x10b4 waiting on condition [0x00000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""Attach Listener"" daemon prio=10 tid=0x02ba3800 nid=0x1330 waiting on condition [0x00000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""Signal Dispatcher"" daemon prio=10 tid=0x02ba2400 nid=0x10a8 runnable [0x00000000]
   java.lang.Thread.State: RUNNABLE

   Locked ownable synchronizers:
	- None

""Finalizer"" daemon prio=8 tid=0x02b9c800 nid=0x12f0 in Object.wait() [0x02d2f000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x22911148> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(Unknown Source)
	- locked <0x22911148> (a java.lang.ref.ReferenceQueue$Lock)
	at java.lang.ref.ReferenceQueue.remove(Unknown Source)
	at java.lang.ref.Finalizer$FinalizerThread.run(Unknown Source)

   Locked ownable synchronizers:
	- None

""Reference Handler"" daemon prio=10 tid=0x02b97c00 nid=0x1088 in Object.wait() [0x02cdf000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x22911048> (a java.lang.ref.Reference$Lock)
	at java.lang.Object.wait(Object.java:485)
	at java.lang.ref.Reference$ReferenceHandler.run(Unknown Source)
	- locked <0x22911048> (a java.lang.ref.Reference$Lock)

   Locked ownable synchronizers:
	- None

""main"" prio=6 tid=0x00317000 nid=0x14fc runnable [0x0092f000]
   java.lang.Thread.State: RUNNABLE
	at java.net.PlainSocketImpl.socketAccept(Native Method)
	at java.net.PlainSocketImpl.accept(Unknown Source)
	- locked <0x229d0320> (a java.net.SocksSocketImpl)
	at java.net.ServerSocket.implAccept(Unknown Source)
	at java.net.ServerSocket.accept(Unknown Source)
	at org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:693)
	at org.apache.commons.net.ftp.FTPClient.__storeFile(FTPClient.java:551)
	at org.apache.commons.net.ftp.FTPClient.storeFile(FTPClient.java:1704)
	at FtpUploadClient.put(FtpUploadClient.java:68)
	at FtpUploadClient.main(FtpUploadClient.java:38)

   Locked ownable synchronizers:
	- None

""VM Thread"" prio=10 tid=0x02b5ac00 nid=0x1588 runnable 

""VM Periodic Task Thread"" prio=10 tid=0x02bb6000 nid=0xd9c waiting on condition 

JNI global references: 987
","02/May/12 22:52;sebb;Looks like that thread dump was from running 3.0.1.

There's currently no way to apply a separate timeout to the accept() call, but if you call the method FTPClient#setDataTimeout(int), the timeout will be applied to the accept call as well.",,,,,,,,,
"Problem, in __getReply method, parsing reply code with leading space",NET-474,12598077,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Won't Fix,,a.amin,a.amin,09/Jul/12 19:34,11/Jul/12 00:03,28/Mar/20 23:24,10/Jul/12 17:01,3.1,,,,FTP,,,0,,,,,,,"FTPClient.getStatus() function call failed complaining about malformed response code.

After tracing the code, I found the problem at following class and line:
*org.apache.commons.net.ftp.FTP.__getReply(FTP.java:333)*

The issue is that this method always expects reply code at position 0 of the returned reply string. If the reply string has some leading spaces, it fails to parse the reply code and returns malformed reply string.

Example of such a reply string:

{noformat}
      211-nhpssltest Ipswitch FTP Server
      Version 5.0.2
      Connected to 184.70.132.130
      Logged in as massba
      TYPE: ASCII, FORM: Nonprint; STRUcture: File; transfer MODE: STREAM
      No data connection
211 End of status
{noformat}
",UNIX,3600,3600,,0%,3600,3600,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2012-07-09 20:13:17.337,,,false,,,,,,,,,,,,,,,,,294599,,,Wed Jul 11 00:01:24 UTC 2012,,,,,,,"0|i0yb6f:",198280,,,,,,,,,,,,,,,,"09/Jul/12 20:13;sebb;Use ""noformat"" instead of ""code"" because the latter truncates leading spaces.
[Ironic, here!]","09/Jul/12 20:21;sebb;As far as I can tell, the RFCs don't permit leading spaces before the reply code, so the server you are using is broken.

AFAIK this is the only report of such behaviour.

I don't think NET should be changed to cater for a broken server implementation.","10/Jul/12 16:13;a.amin;Anyways, I think this is a silly bug which can be fixed pretty easily. Besides, the server belongs to a government agency, I can't tell them to retire it just like that.","10/Jul/12 17:01;sebb;Sorry, but unless you can point to documentation that says that leading spaces are allowed by the FTP protocol, then the bug is in the server, not Commons NET.

I suggest advising them that the server appears to be faulty so they can contact their supplier to get it fixed.

[By the way, a net search suggests that version 5.0.2 is quite old, and may have some security issues, so it might be as well to upgrade anyway. That might well fix the reply format too.]","10/Jul/12 17:39;ggregory;Is it worth discussing adding a lenient vs. strict setting to the FTP class to allow for such misbehaved servers? The strict mode is as it is now. Lenient would trim to reply line before attempting to parse it.

If not, what about changing __getReply to protected to allow for overriding?","10/Jul/12 18:02;sebb;This is the first and only report of a server that apparently sends leading spaces.
IMO adding lenient processing is overkill/unnecessary feature creep.

If it really is a genuine problem affecting more than 1 specific server version then it might be worth allowing __getReply to be overridden, as that is probably the easiest solution.","11/Jul/12 00:01;sebb;Here is a sample session to a recent version of the server:

{noformat}
Connected to ftp.ipswitch.com.
220 ftp6.ipswitch.com X2 WS_FTP Server 7.5.1(76307814)
331 Enter password
230 User logged in
Remote system type is UNIX.
ftp> quote stat
211-System status Ipswitch FTP Server
 Version WS_FTP Server 7.5.1
 Connected to 192.168.100.130
 Logged in as anonymous
 TYPE: BINARY, FORM: Nonprint; STRUcture: File; transfer MODE: STREAM
 No data connection
211 End of status
ftp> bye
221 bye
{noformat}

Note that the reply codes start in column 1 (index 0).",,,,,
"Erroneous ""No route to host"" on upload failure",NET-469,12560187,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Major,Not A Problem,,vlfig,vlfig,11/Jun/12 15:50,12/Jun/12 11:06,28/Mar/20 23:24,12/Jun/12 11:06,3.1,,,,FTP,,,0,,,,,,,"The example code at 

http://commons.apache.org/net/examples/ftp/FTPClientExample.java

...fails to store a file in a remote server with:

java TestConnection -s 91.231.###.## ###### ******** file.csv file.csv

{{
220 Unauthorized access prohibited!
Connected to 91.231.###.## on 21
USER *******
331 Password required for ######.
PASS *******
230 User logged in.
SYST
215 Windows_NT
Remote system is Windows_NT
PASV
227 Entering Passive Mode (85,88,142,160,117,69).
java.net.NoRouteToHostException: No route to host
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:351)
	at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:213)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366)
	at java.net.Socket.connect(Socket.java:529)
	at org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:762)
	at org.apache.commons.net.ftp.FTPClient._storeFile(FTPClient.java:565)
	at org.apache.commons.net.ftp.FTPClient.__storeFile(FTPClient.java:557)
	at org.apache.commons.net.ftp.FTPClient.storeFile(FTPClient.java:1795)
	at pt.knowledgeworks.emsa.mssim.scenario.TestConnection.main(TestConnection.java:285)
}}

Tcpdump in attachment. I'm no tcp expert to tell what's wrong with the dump. Ping, traceroute and other ftp clients work without problems. Standard command-line ftp managed to upload a file with no problems.

Originally discovered via wagon-ftp (mvn deploy).

Thanks in advance.","Java(TM) SE Runtime Environment (build 1.6.0_31-b04) Java HotSpot(TM) 64-Bit Server VM (build 20.6-b01, mixed mode)

Linux 2.6.39-gentoo-r3 #6 SMP PREEMPT Thu Dec 8 19:34:57 WET 2011 x86_64 Intel(R) Core(TM) i5-2410M CPU @ 2.30GHz GenuineIntel GNU/Linux",0,0,,0%,0,0,,,,,"11/Jun/12 15:52;vlfig;dump.txt;https://issues.apache.org/jira/secure/attachment/12531686/dump.txt",,1.0,,,,,,,,,,,,,,,,,,,,2012-06-11 16:40:26.84,,,false,,,,,,,,,,,,,,,,,294601,,,Tue Jun 12 11:06:46 UTC 2012,,,,,,,"0|i0ycpj:",198528,,,,,,,,,,,,,,,,"11/Jun/12 15:52;vlfig;The tcp dump.","11/Jun/12 16:40;sebb;The response to PASV is

bq. 227 Entering Passive Mode (85,88,142,160,117,69)

This means that the server is listening on the IP address 85.88.142.160 at the port 117*256+69 = 30021.

That is the address that NET is trying to reach, and the one for which no route is found.

The response does not seem right, because the server is at 91.231.x.x

Try pinging 85.88.142.160 from your client host.

By the way, the TCP dump appears to be truncated, the PASV reply in particular is incomplete.

Can you provide dumps for both NET and command-line FTP for comparison?","12/Jun/12 11:06;vlfig;The command-line client was working because it was not entering passive mode. If we force it to passive fails with the exact same error message.

Do tell me in case the tcpdump for the command-line passive-mode client is of any use for you.

Thank you for your response. Site admins have been informed. Closing the issue

",,,,,,,,,
Bug in documentation for FTPClient,NET-450,12545627,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Minor,Fixed,,rjhtech,rjhtech,08/Mar/12 07:48,17/Apr/13 19:57,28/Mar/20 23:24,23/Mar/12 18:04,3.1,,,3.2,FTP,,,0,,,,,,,"In the Documentation for FTPClient there are some examples
One is
    FTPClient f = new FTPClient();
    f.connect(server);
    f.login(username, password);
    FTPFile[] files = listFiles(directory);

There is a typo on the last line.

It should be f.listFiles(directory);

Rating this as Minior as any decent Java programmer should work it out.",Documentation on Apache web site,300,300,,0%,300,300,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,230810,,,2012-03-08 07:48:50.0,,,,,,,"0|i0lpvj:",124843,,,,,,,,,,,,,,,,,,,,,,,,,,,
getTimestamp() return is different by same file in windows and linux,NET-461,12552261,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Minor,Not A Problem,,yixiuqingfeng,yixiuqingfeng,24/Apr/12 07:33,17/Apr/13 19:55,28/Mar/20 23:24,11/May/12 00:22,3.1,,,,FTP,,,0,FTPClient,getTimestamp,listFiles,,,,"When using ""listFiles"" in FTPClient, I have found getTimestamp() return is different in windows and linux.
For example,The file last modified time is 2012-04-24 15:10:40 (GMT +8:00) both in linux and windows, getTimestamp return is ""Tue Apr 24 15:10:00 CST 2012"" in windows, but return ""Tue Apr 24 07:10:00 CST 2012"" in linux。

Detail:
My Code is:
FTPClient client = new FTPClient();
client.connect(""*.*.*.*"", 21);
client.login(""*******"", ""*********"");
FTPFile[] files = client.listFiles();
        
for (int i = 0; i < files.length; i++)
{
   FTPFile ftpFile = files[i];
   System.out.println(ftpFile.getTimestamp().getTime());
}

Code print:
Windows:
Tue Apr 24 15:10:00 CST 2012

Linux:
Tue Apr 24 07:10:00 CST 2012

getTimestamp() return all is same but hour information is different。

Thanks 

",Linux and Windows,2419200,2419200,,0%,2419200,2419200,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,,,,false,,,,,,,,,,,,,,,,,238501,,,Tue May 08 03:17:46 UTC 2012,,,,,,,"0|i0y63z:",197459,,,,,,,,,,,,,,,,"08/May/12 03:17;yixiuqingfeng;vsftpd can set use_localtime=YES (NO) to fix",,,,,,,,,,,
Self signed cert or ca not installed on client but FTPS still works,NET-448,12544963,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Trivial,Not A Problem,,pant_deepak,pant_deepak,02/Mar/12 17:02,17/Apr/13 19:55,28/Mar/20 23:24,05/Mar/12 16:32,2.0,3.1,,,FTP,,,0,,,,,,,"I am using vsftpd ftp server on centos with our own self signed root ca certificate.

I have not installed the self signed root certificate on the client machine. Neither am I setting the Trust Manager on the FTPSClient object, using X509TrustManager instance pointing to my physical cert file.

But I am still able to use the FTPSClient bundled in any of the following jar file and send/receive the files.
commons-net-2.0.jar 
commons-net-3.1.jar 
commons-net-2.0-jdk14.jar (from zehon)

I was expecting that I will have to either install the self signed root ca on the client machine Or set Trust Manager etc.

Can you please explain the behavior? ","client: Windows SP sp4, jdk 1.6.0_24
server: Linux 2.6.32-220.4.2.el6.i686 running vsFTPd 2.2.2
apache lib: commons-net-2.0.jar or commons-net-3.1.jar or commons-net-2.0-jdk14.jar (from zehon)",,,,,,,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2012-03-03 11:28:14.5,,,false,,,,,,,,,,,,,,,,,230149,,,Mon Mar 05 16:32:02 UTC 2012,,,,,,,"0|i0y653:",197464,,,,,,,,,,,,,,,,"03/Mar/12 11:28;bogdro;The current default TrustManager of the FTPSClient only checks if the certificate's dates are valid (if the current date not eariler then the certificate's ""valid from"" date and not later than the certificate's ""valid till"" date). It doesn't check the certificate's chain, domains or issuers. Currently, you need to install your own TrustManager (perhaps use a default provided by the JRE, if any) to do that.","03/Mar/12 13:17;sebb;Try using

FTPSClient.setTrustManager(null)

This will cause the default JVM implementation to be used.

[Should probably update the Javadoc to make this clearer]","03/Mar/12 15:16;pant_deepak;Thanks for prompt responses. I have tried FTPSClient.setTrustManager(null) and there is no difference in behavior.

Just to clarify the sequence of events:
1. My program establishes connection to FTPS server in explicit mode using SSL or TLS protocol.
2. Server returns the public certificate installed at the server, which happens to be self-signed certificate in my case.
3. The default implementation of TrustManager checks if the public cert returned is valid in terms of dates. I think this is X509Certificate.checkValidity() method call, which only looks at dates.
4. No additional checks are being made to check if public cert was issued by a CA or self signed etc.


","03/Mar/12 15:31;sebb;Are you sure you set the trust manager to null before opening the connection?","05/Mar/12 14:05;pant_deepak;Thanks. If I do FTPSClient.setTrustManager(null) then I get following exception. So if I really want, I can provide my own implementation of X509TrustManager class, which will write some additional code in checkServerTrusted() method. Besides calling X509Certificate.checkValidity(), it can also do checks for self signed cert authority etc.

===
javax.net.ssl.SSLHandshakeException: java.security.cert.CertificateException: No X509TrustManager implementation available

        at com.sun.net.ssl.internal.ssl.BaseSSLSocketImpl.a(DashoA12275)
        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.a(DashoA12275)
        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.a(DashoA12275)
        at com.sun.net.ssl.internal.ssl.SunJSSE_az.a(DashoA12275)
        at com.sun.net.ssl.internal.ssl.SunJSSE_az.a(DashoA12275)
===","05/Mar/12 16:30;sebb;I get the response shown below when using the FTP client example to connect to Apache FTP server with a local certificate and using TrustManager = none.

Perhaps the different result is because of the certificate I'm using.

Without the ""-T none"", the command logs in OK.

{noformat}
set CLASSPATH=commons-net-examples-3.1.jar;commons-net-3.1.jar
java examples/ftp/FTPClientExample -l -p true -T none localhost:990 anonymous password
{noformat}

{noformat}
Could not connect to server.
javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: una
ble to find valid certification path to requested target
        at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174)
        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1731)
        at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:241)
        at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:235)
        at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1206)
        at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:136)
        at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:593)
        at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:529)
        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:925)
        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1170)
        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1197)
        at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1181)
        at org.apache.commons.net.ftp.FTPSClient.sslNegotiation(FTPSClient.java:265)
        at org.apache.commons.net.ftp.FTPSClient._connectAction_(FTPSClient.java:201)
        at org.apache.commons.net.SocketClient.connect(SocketClient.java:172)
        at org.apache.commons.net.SocketClient.connect(SocketClient.java:192)
        at examples.ftp.FTPClientExample.main(FTPClientExample.java:249)
Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certific
ation path to requested target
        at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:323)
        at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:217)
        at sun.security.validator.Validator.validate(Validator.java:218)
        at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:126)
        at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:209)
        at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:249)
        at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1185)
        ... 12 more
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
        at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:174)
        at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:238)
        at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:318)
        ... 18 more
{noformat}","05/Mar/12 16:32;sebb;The current behaviour is by design.",,,,,
"mlistDir doc should be ""MLSD"" not ""MSLD""",NET-441,12542191,Bug,Closed,NET,Commons Net,software,issues@commons.apache.org,,http://commons.apache.org/net/,Trivial,Fixed,,consiliens,consiliens,10/Feb/12 21:02,29/Feb/12 20:35,28/Mar/20 23:24,11/Feb/12 00:10,3.1,,,3.1,FTP,,,0,,,,,,,"In FTPClient.class ""Generate a directory listing for the current directory using the MSLD command."" should use ""MLSD"" not ""MSLD"".",,600,600,,0%,600,600,,,,,,,0.0,,,,,,,,,,,,,,,,,,,,2012-02-11 00:10:02.085,,,false,,,,,,,,,,,,,,,,,227478,,,Sat Feb 11 00:10:02 UTC 2012,,,,,,,"0|i0j0lr:",109026,,,,,,,,,,,,,,,,"11/Feb/12 00:10;sebb;Thanks!",,,,,,,,,,,
